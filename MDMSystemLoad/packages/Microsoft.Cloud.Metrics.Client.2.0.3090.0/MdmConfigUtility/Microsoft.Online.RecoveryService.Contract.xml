<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Online.RecoveryService.Contract</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ActionExecutionInformation">
            <summary>
            Action Execution Status class.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionInformation.ActionName">
            <summary>
            Gets or sets the action name.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionInformation.WorkflowName">
            <summary>
            Gets or sets the workflow name
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionInformation.WorkflowParametersXml">
            <summary>
            Gets or sets the workflow parameters
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionInformation.WorkflowServiceEndpoint">
            <summary>
            Gets or sets the workflow service endpoint address in the form of
            "https://management.ad.msft.net/DmsManagement.svc/cert"
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ActionStatus">
            <summary>
            Action execution status enumeration
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ActionStatus.InProgress">
            <summary>
            Action workflow is still being executed.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ActionStatus.Completed">
            <summary>
            Action workflow execution is completed.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ActionExecutionStatus">
            <summary>
            Action Execution Status class.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionStatus.Name">
            <summary>
            Gets or sets the action name.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionStatus.Type">
            <summary>
            Gets or sets the action type.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionStatus.Id">
            <summary>
            Gets or sets the action id (work-item id)
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionStatus.Status">
            <summary>
            Gets or sets the action execution status.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionStatus.IsSuccessful">
            <summary>
            Gets or sets a value indicating whether the action is completed successfully or not.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionStatus.StartTime">
            <summary>
            Gets or sets the execution start time
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionStatus.CompleteTime">
            <summary>
            Gets or sets the execution completion time
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionExecutionStatus.ResultDetails">
            <summary>
            Gets or sets the action result details
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ActionMessage">
            <summary>
            The representation of action progress message.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionMessage.Id">
            <summary>
            Gets or sets the id of the message
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionMessage.Message">
            <summary>
            Gets or sets the actual message
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionMessage.Timestamp">
            <summary>
            Gets or sets the message timestamp
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionMessage.Action">
            <summary>
            Gets or sets the name of the action this message belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ActionMessage.WorkItemId">
            <summary>
            Gets or sets the work-item id on action/workflow executor corresponding to action 
            to which this message belongs
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Annotation">
            <summary>
            Data object - the annotation entity.
            This represents a single message
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Annotation.Id">
            <summary>
            A unique ID within the `ContextId`
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Annotation.ContextId">
            <summary>
            ContextId is the scope of a message.
            - In case of chat, this is the chat room name
            - In case of annotations, this is the time/health series
            - In case of documentation, this is the object being documented
            <remarks>
            This is for internal use, the SDK will not expose a way to pass this.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Annotation.Timestamp">
            <summary>
            When is this annotation relevant for.
            In other words this is the point in time where the annotaion belongs in.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Annotation.ModifiedAt">
            <summary>
            When was this annotation modified
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Annotation.ModifiedBy">
            <summary>
            Who created this annotation? Could be a user or a machine
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Annotation.Content">
            <summary>
            The message body
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Annotation.Metadata">
            <summary>
            Optional dimensions
            For example:  {"Type":"Incident"}, {"IncidentTimestamp":"123445566789"}, ...
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport">
            <summary>
            Batch watchdog report class.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.HeaderSize">
            <summary>
            Header size
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.SerializationVersion">
            <summary>
            Serialization version
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.commonWatchdogMetadataCollectionBlob">
            <summary>
            The blob containing common watchdog metadata collection
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.commonWatchdogMetadataCollection">
            <summary>
            The common watchdog metadata collection
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.id">
            <summary>
            The id of the report
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.#ctor(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,System.String,System.String,System.Collections.Generic.List{System.String},Microsoft.Online.RecoveryService.Contract.MetadataCollection,System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport})">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.#ctor(System.Byte[])">
            <summary>
            The constructor which takes the serialized report blob and deserializes to individual properties.
            </summary>
            <param name="blob">The serialized report blob</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.WatchdogName">
            <summary>
            Gets or sets watchdog name
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.WatchdogType">
            <summary>
            Gets or sets watchdog type
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.ResourceTopologyName">
            <summary>
            Gets or sets resource identifier
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.ResourceType">
            <summary>
            Gets or sets resource type
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.ResourceDimensionNameList">
            <summary>
            Gets or sets the list of resource dimension names. 
            The dimension values will be specified in single watchdog report.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.CommonWatchdogMetadataCollection">
            <summary>
            Gets or sets the collection of common watchdog metadata across all single reports. 
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.CommonWatchdogMetadataCollectionBlob">
            <summary>
            Gets or sets blob the collection of common watchdog metadata across all single reports. 
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.MessageTemplate">
            <summary>
            Gets or sets message template. The template parameters in the message will be replaced by values in the backend.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.ReportList">
            <summary>
            Gets or set the list of reports.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.ClearSerializedBlobs">
            <summary>
            Clears the serialized blobs
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.GetFullReportList">
            <summary>
            Gets the full report list by merging common stuff with single watchdog report
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.GetFilteredReport(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport})">
            <summary>
            Gets the copy of this batch report containing reports for only these resources.
            </summary>
            <param name="singleReportList">list of single-reports</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.CopyCommonFieldsTo(Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport)">
            <summary>
            Populates the common fields to the input batch report.
            </summary>
            <param name="batchReport">batch report whose common fields will be populated</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.ContainsResource(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Whether this batch report contains report for this resource?
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>true if this report contains report for this resource. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.GetSingleReport(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the single report corresponding to this resource.
            </summary>
            <param name="resourceId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.IsSilentMonitor">
            <summary>
            Is this silent monitor?
            </summary>
            <returns>true if silent. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.ShouldMitigateIncident">
            <summary>
            Should mitigate incident?
            </summary>
            <returns>true if incident should be mitigated. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.GetHealthyCountToMitigate">
            <summary>
            Gets the healthy count to mitigate from the watchdog report
            </summary>
            <returns>healthy count</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.IsReplicatedMonitor">
            <summary>
            Is this replicated monitor from primary DC?
            </summary>
            <returns>true if replicated. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.GetSource">
            <summary>
            Gets the source of the watchdog report
            </summary>
            <returns>the source. can be null if not specified.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.GetId">
            <summary>
            Gets the id of the batch report
            </summary>
            <returns>the id of the batch report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.Serialize">
            <summary>
            Serializes this object and returns the byte blob.
            </summary>
            <returns>the serialized bytes blob</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.Deserialize(System.Byte[])">
            <summary>
            Deserializes the watchdog report
            </summary>
            <param name="blob">blob containing serialized bytes</param>
            <returns>the deserialized report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.SerializePayload">
            <summary>
            Serializes the payload
            </summary>
            <returns>return serialized bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.DeserializeInternal(System.Byte[])">
            <summary>
            Deserializes the watchdog report
            </summary>
            <param name="blob">blob containing serialized bytes</param>
            <returns>the deserialized report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport.DeserializePayload(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes the payload
            </summary>
            <param name="reader">the binary stream reader</param>
            <param name="serializationVersion">version of serialized data</param>
            <returns>deserialized payload</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ConfigurationSerializationSettings">
            <summary>
            Feature flag settings
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ConfigurationSerializationSettings.WriteResourceTypeLastModified">
            <summary>
            Feature flag for whether we should write the last modified fields for resource type or not
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.DataQualityConstant">
            <summary>
            Constant value for data quality.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.DataQualityConstant.TenantName">
            <summary>
            The metric tenant name.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.DataQualityConstant.ComponentName">
            <summary>
            The metric component name.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.DataQualityConstant.MetricName">
            <summary>
            The metric name.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.DataQualityConstant.TenantCombinationKey">
            <summary>
            The combination key of tenant.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.DataQualityConstant.ResourceTypeCombinationKey">
            <summary>
            The combination key of resource type.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.DataQualityConstant.ResourceNameCombinationKey">
            <summary>
            The combination key of resource name.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.DataQualityConstant.DataLossTypeCombinationKey">
            <summary>
            The combination key of data loss type.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.DataQualityConstant.DefaultCombinationValue">
            <summary>
            The default combination value.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.DataQualityLossType">
            <summary>
            The type of data quality loss.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.DataQualityLossType.ReportDropFromGateway">
            <summary>
            Loss from recovery gateway.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.DataQualityLossType.Throttled">
            <summary>
            Loss from recovery server.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IHealthSystemDataQualityClient">
            <summary>
            The data quality client.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IHealthSystemDataQualityClient.HasDataLossAsync(System.String,System.String,System.DateTime,System.DateTime,System.Guid)">
            <summary>
            Check if there is a data loss, it will consider both tenant level and resource type level.
            </summary>
            <param name="tenant">The tenant.</param>
            <param name="resourceType">The resource type.</param>
            <param name="from">The start time.</param>
            <param name="to">The end time.</param>
            <param name="traceId">The trace id.</param>
            <returns>A boolean indicate whether data loss or not.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IHealthSystemDataQualityClient.HasDataLossAsync(System.String,System.DateTime,System.DateTime,System.Guid)">
            <summary>
            Check if there is a data loss from tenant level.
            </summary>
            <param name="tenant">The tenant name.</param>
            <param name="from">The start time.</param>
            <param name="to">The end time.</param>
            <param name="traceId">The trace id.</param>
            <returns>A boolean indicate whether data loss or not.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IHealthSystemDataQualityManager">
            <summary>
            The data quality manager to emit the data quality metrics to storage
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IHealthSystemDataQualityManager.MarkDataLoss(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.DataQualityLossType)">
            <summary>
            Marked data loss to a resource. Now we only support for resource type level
            </summary>
            <param name="resourceIdentifier">The resource identifier</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IHealthSystemDataQualityManager.MarkDataLoss(System.String,Microsoft.Online.RecoveryService.Contract.DataQualityLossType)">
            <summary>
            Marked data loss to a tenant.
            </summary>
            <param name="tenant">The resource identifier</param>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IHealthExtService">
            <summary>
            The interface of the health extensibility service.
            </summary>
            
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IHealthExtService.CreateOrUpdateIncidentAsync(System.String,System.Nullable{System.Int64},System.Guid,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport,Microsoft.AzureAd.Icm.Types.AlertSourceIncident,System.Boolean,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus)">
            <summary>
            Create or update an IcM incident.
            </summary>
            <param name="tenant">The name of the tenant.</param>
            <param name="incidentCorrelationId"></param>
            <param name="resourceId"></param>
            <param name="failingWatchdogReports"></param>
            <param name="computedWatchdogReport"></param>
            <param name="alertSourceIncident"></param>
            <param name="updateIncidentOnSeverityChange"></param>
            <param name="previousHealthStatus"></param>
            <returns>
            A value indicating if the operation was successful.
            </returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IHealthExtService.MitigateIncidentAsync(System.String,System.Int64,System.Guid,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport,Microsoft.AzureAd.Icm.Types.AlertSourceIncident)">
            <summary>
            Mitigate the IcM incident.
            </summary>
            <param name="tenant">The name of the tenant.</param>
            <param name="incidentCorrelationId">The incident correlation Id.</param>
            <returns>
            A value indicating if the operation was successful.
            </returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IHealthExtService.ResourceHealthStatusTransitionAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Common.Actors.ResourceHealthStatusTransitionRequest})">
            <summary>
            Request to log resource health status transition to Azure activity log
            </summary>
            <param name="requestList">The list of ResourceHealthStatusTranstion requests</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IHealthExtService.ResourceHealthAnnotationAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Common.Actors.ResourceHealthAnnotationRequest})">
            <summary>
            Request to log resource health annotation to Azure activity log
            </summary>
            <param name="requestList">The list of ResourceHealthAnnotationAsync requests</param>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IncidentSourceIdentifier">
            <summary>
            Implementation of incident source identifier class.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.IncidentSourceIdentifier.Resource">
            <summary>
            Gets or sets identifier of the resource this incident is targeting
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.IncidentSourceIdentifier.WatchdogName">
            <summary>
            Gets or sets name of the watchdog/monitor arising the incident
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IncidentSourceIdentifier.Parse(System.String)">
            <summary>
            Parses the given string and creates an incident source identifier out of it
            </summary>
            <param name="sourceIdentifier">incident source identifier as string</param>
            <returns>incident source identifier as typed object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IncidentSourceIdentifier.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IncidentSourceIdentifier.Equals(Microsoft.Online.RecoveryService.Contract.IncidentSourceIdentifier)">
            <summary>
            Finds if the two source ids represent the same resources or not.
            </summary>
            <param name="other">The incident source id to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IncidentSourceIdentifier.GetHashCode">
            <summary>
            Gets hash code, derived from object, overrides.
            </summary>
            <returns>Hash code of the object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IncidentSourceIdentifier.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>string representation of this object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IncidentSourceIdentifier.ToRowKeyString">
            <summary>
            Returns row key representation of this class objects
            </summary>
            <returns>string representation of the object to be used as row key of XStore table</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.InternalHealthClient">
            <summary>
            Internal client for Health System to talk to the APIs on Metrics FE Health controller.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.InternalHealthClient.MetricsServerHealthRelativeUrl">
            <summary>
            The relative URL for health
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.InternalHealthClient.BaseUri">
            <summary>
            The base Uri to the controller.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.InternalHealthClient.AddHttpContentAndGetResponse(System.Net.HttpWebRequest,System.Object)">
            <summary>
            Add HTTP content and send the request
            </summary>
            <param name="httpWebRequest">A <see cref="T:System.Net.HttpWebRequest"/> object</param>
            <param name="httpContent">The HTTP content to add</param>
            <returns>The HTTP response string in the body</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.InternalHealthClient.GetHttpResponse(System.Net.HttpWebRequest)">
            <summary>
            Get the HTTP response
            </summary>
            <param name="httpWebRequest">A <see cref="T:System.Net.HttpWebRequest"/> object</param>
            <returns>The response string</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.InternalHealthClient.SetHttpWebRequestProperties(System.Net.HttpWebRequest,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Set common properties on a <see cref="T:System.Net.HttpWebRequest"/> object and attach the certificate
            </summary>
            <param name="httpWebRequest">a <see cref="T:System.Net.HttpWebRequest"/> object</param>
            <param name="method">The HTTP method</param>
            <param name="timeout">The timeout value</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.InternalHealthClient.InitializeMetricsClientCertificate">
            <summary>
            Initializes metrics client certificate
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.InternalHealthClient.AddCertificateToWebRequest(System.Net.HttpWebRequest)">
            <summary>
            Add certificate to the web request
            </summary>
            <param name="httpWebRequest">An HttpWebRequest instance</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.InternalHealthClient.ConvertToResourceHealthStatus(System.Nullable{System.Double})">
            <summary>
            Converts to resource health status enumeration
            </summary>
            <param name="status">double status returned by controller API.</param>
            <returns>ResourceHealthStatus enumeration</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.InternalHealthClient.Dispose(System.Boolean)">
            <summary>
            Internal implementation of the dispose.
            </summary>
            <param name="disposing">Whether method is being called by Dispose()</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.InternalHealthClient.Dispose">
            <summary>
            Implements the IDisposable interface.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus">
            <summary>
            Health status of the resource
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus.Healthy">
            <summary>
            Healthy Status
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus.Error">
            <summary>
            Error/Unhealthy Status
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus.Warning">
            <summary>
            Warning/Degraded status
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus.Unknown">
            <summary>
            Unknown status
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthState">
            <summary>
            Health State of a resource as modeled by the Recovery system
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthState.Healthy">
            <summary>
            The resource is healthy
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthState.Failing">
            <summary>
            One or more watchdogs are failing for that resource
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthState.Probation">
            <summary>
            The resource is a candidate for becoming healthy
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthState.Critical">
            <summary>
            The resource is failing and a repair is beyond the capacity of 
            the recovery system
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthType">
            <summary>
            Resource health type enumeration in watchdog report
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthType.Recovery">
            <summary>
            Recovery health type.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthType.Scaling">
            <summary>
            Scaling health type.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceOfflineStatus">
            <summary>
            Online/Offline status of a resource
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceOfflineStatus.Invalid">
            <summary>
            Status unknown (or mixed).
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceOfflineStatus.Online">
            <summary>
            Status online.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceOfflineStatus.Offline">
            <summary>
            Status offline.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.SuppressionMode">
            <summary>
            Suppression mode ENUM
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SuppressionMode.Suppress">
            <summary>
            Suppress(ed) resource
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SuppressionMode.Unsuppress">
            <summary>
            Un-suppress(ed) resource
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.SuppressionReason">
            <summary>
            Suppression reason ENUM
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SuppressionReason.Own">
            <summary>
            Suppress(ed) itself
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SuppressionReason.Parent">
            <summary>
            Un-suppress(ed) due to parent level suppression
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SuppressionReason.Unknown">
            <summary>
            Unknown suppression reason
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.WatchdogType">
            <summary>
            Watchdog type enumeration in watchdog report
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogType.FailureOnly">
            <summary>
            Watchdog which submits only unhealthy reports for a resource.
            </summary>
            <remarks>absence of unhealthy reports equates to healthy resource</remarks>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogType.Periodic">
            <summary>
            Watchdog which periodically reports healthy/unhealthy for a resource.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IncidentStatus">
            <summary>IncidentStatus ENUM</summary>
            <remarks>This is same as in AzureAd.ICM.Types</remarks>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentStatus.Invalid">
            <summary>invalid value</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentStatus.Active">
            <summary>incident is active</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentStatus.Resolved">
            <summary>incident is resolved</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentStatus.New">
            <summary>incident is newly inserted</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentStatus.Mitigating">
            <summary>incident is undergoing mitigation</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentStatus.Correlating">
            <summary>incident is undergoing correlation</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentStatus.Mitigated">
            <summary>Mitigated data member</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentStatus.Holding">
            <summary>incident is pending processing by an external mitigation system</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentStatus.Suppressed">
            <summary>incident has been suppressed</summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IncidentAddUpdateStatus">
            <summary>Enumeration for status of incident add or update as returned by ICM</summary>
            <remarks>This is same as in AzureAd.ICM.Types</remarks>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentAddUpdateStatus.Invalid">
            <summary>invalid value</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentAddUpdateStatus.AddedNew">
            <summary>The incident did not already exist, and was added</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentAddUpdateStatus.UpdatedExisting">
            <summary>The incident already exists, and was updated</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentAddUpdateStatus.DidNotChangeExisting">
            <summary>
            The incident already exists, but was not updated due to the source change in the incident being earlier
            or equal to the source change time last stored by the ICM system.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentAddUpdateStatus.AlertSourceUpdatesPending">
            <summary>
            The incident already exists and requires an update (based on the source change time in the incident and 
            the source change time last stored by the ICM system), but the update could not be made as there are 
            pending changes to the incident in the ICM system.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentAddUpdateStatus.UpdateToHoldingNotAllowed">
            <summary>
            The incident already exists, but was not updated because the caller attempted to update the state of the
            incident from a non-Holding state to a Holding state.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentAddUpdateStatus.Discarded">
            <summary>A suppression rule was in effect that caused the incident to be discarded</summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.MetaDataType">
            <summary>
            Enum for the type of the metadata collection. This is used in the new proprietary binary schame for
            blob serialization/deserialization.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.MetaDataType.ResourceDimension">
            <summary>
            The metadata collection is the ResourceDimensions in ResoruceId class.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.MetaDataType.WatchdogMetadata">
            <summary>
            The metadata collection is the WatchdogMetadata in WatchdogHealthReport class.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.MetaDataType.ResourceMetadata">
            <summary>
            The metadata collection is the ResourceMetadata in WatchdogHealthReport class.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.MetaDataType.AnnotationMetadata">
            <summary>
            The metadata collection is the metadata associated with the HealthAnnotation class. 
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.SerializedObjectType">
            <summary>
            Enumerate supported types for proprietary serialization/deserialization.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Null">
            <summary>
            The object is null
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Bool">
            <summary>
            Boolean value type (bool), the data size is 1 byte
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Int8">
            <summary>
            8-bit signed integer (sbyte)
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Int16">
            <summary>
            16-bit signed integer (short)
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Int32">
            <summary>
             32-bit signed integer (int)
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Int64">
            <summary>
             64-bit signed integer (long)
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Uint8">
            <summary>
            8-bit unsigned integer (byte)
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Uint16">
            <summary>
            16-bit unsigned integer (ushort)
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Uint32">
            <summary>
            32-bit unsigned integer (uint)
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Uint64">
            <summary>
            64-bit unsigned integer (ulong)
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Double">
            <summary>
            64-bit floating-point value (double)
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.String">
            <summary>
            Unisocde string
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.DateTimeUtc">
            <summary>
            UTC DateTime value (DateTime)
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializedObjectType.Binary">
            <summary>
            Generic binary blob (byte[])
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.WatchdogReportResultType">
            <summary>
            The type of the WatchdogReportResult (for failed WatchdogReport submission).
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReportResultType.Unknown">
            <summary>
            The failure reason is unknown, will treated as ServiceError.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReportResultType.UserError">
            <summary>
            The failure is because user error; for example, invalid arguments, unknown resource type, etc.
            This kind of errors should not impact the health of the health service.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReportResultType.ServiceError">
            <summary>
            The failure is because service error; for example, unreachable server, unreachable IcM, etc.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IncidentMessageType">
            <summary>
            The type of the IncidentMessagfeType
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentMessageType.PreCreateIncident">
            <summary>
            PreCreateIncident - send before health service is about to request IcM incident.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentMessageType.PostCreateIncident">
            <summary>
            PostCreateIncident - send after health service requests IcM incident.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentMessageType.UpdateIncident">
            <summary>
            UpdateIncident
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentMessageType.PreMitigateIncident">
            <summary>
            PreMitigateIncident
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentMessageType.MitigateIncident">
            <summary>
            MitigateIncident
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentMessageType.PreCreateOrUpdateIncident">
            <summary>
            PreCreateOrUpdateIncident - send before health service is about to request IcM incident via extensibility service.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IncidentResponse">
            <summary>
            The type of response of PreCreateIncident messages
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentResponse.None">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentResponse.Abandon">
            <summary>
            The health service does not need to file IcM incident, the partnet services already handle it.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentResponse.Create">
            <summary>
            The health service should file a new IcM incident.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentResponse.Update">
            <summary>
            The health service should update the existing IcM incident with the incident information.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IncidentWorkflowState">
            <summary>
            The possible IcM incident workflow state when Recovery Server interacts with customer services and the actor.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentWorkflowState.NoAction">
            <summary>
            For this incident, there is no interaction related to the extension model.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentWorkflowState.SubmitToIcM">
            <summary>
            No extension configured for the service, Recovery Server submits directly to IcM
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentWorkflowState.InTransition">
            <summary>
            The Recovery Server sends out the request message and waits (async) for the resule from the actor.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentWorkflowState.CompleteSuccess">
            <summary>
            The Recovery Server receives the result from the actor that the request succeeds.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentWorkflowState.CompleteFail">
            <summary>
            The Recovery Server receives the result from the actor that the request fails (for example, IcM request fails).
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.IncidentWorkflowState.TimeOut">
            <summary>
            The Recovery Server times out the request and directly submits IcM as it could not get the response from the actor
            in the timely manner.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.HealthFilterOperation">
            <summary>
            Health filter operation
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.HealthFilterOperation.Equals">
            <summary>
            Equals operation
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.HealthFilterOperation.NotEquals">
            <summary>
            Not Equals operation
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.HealthFilterOperation.Contains">
            <summary>
            Contains operation
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.HealthFilterOperation.NotContains">
            <summary>
            Not contains operation
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusReason">
            <summary>
            Resource health status reason
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusReason.AllHealthyReports">
            <summary>
            All the watchdog reports are healthy.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusReason.NoReports">
            <summary>
            There are no watchdog reports matching the filtering criteria.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusReason.SomeExpiredReports">
            <summary>
            There are some expired watchdog reports which matched the filtering criteria.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusReason.SomeErrorReports">
            <summary>
            There are some error watchdog reports which matched the filtering criteria.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusReason.SomeWarningReports">
            <summary>
            There are some warning watchdog reports which matched the filtering criteria.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusReason.SomeNotReportedAfterStartTime">
            <summary>
            There are some watchdog reports which did not report after the start-time of the health check.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusReason.SomeHealthyOnlyAfterStartTime">
            <summary>
            There are some healthy watchdog reports but the healthy report came after the start-time of the health check.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusReason.ResourceNotFound">
            <summary>
            The resource is not found.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason">
            <summary>
            The reason the RecoveryGateway forwards the individual request to peer datacenter.
            Sorted by severity; that is, result from lower severity should trump result from higher severity.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason.Healthy">
            <summary>
            The RecoveryGateway is healthy, no request replication.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason.AlertingDisabled">
            <summary>
            The Alerting is disabled from the datacenter, external request will be replicated to peer datacenter.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason.MonitoringServiceDisabled">
            <summary>
            The MonitoringService is disabled from the datacenter, external request will be replicated to peer datacenter.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Fault">
            <summary>
            WCF fault utilities for the recovery server.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Fault.ThrowFault``1(``0,System.String)">
            <summary>
            A helper function to throw a <see cref="T:System.ServiceModel.FaultException"/>.
            </summary>
            <typeparam name="T"><see cref="T:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFault"/> or a derived class.</typeparam>
            <param name="fault">Fault to be thrown.</param>
            <param name="errorMessage">Error message to report.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Fault.NewFaultException``1(``0,System.String)">
            <summary>
            A helper function to create a <see cref="T:System.ServiceModel.FaultException"/>.
            </summary>
            <typeparam name="T"><see cref="T:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFault"/> or a derived class.</typeparam>
            <param name="fault">Fault to be thrown.</param>
            <param name="errorMessage">Error message to report.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Fault.ThrowFault``1(``0,System.Exception)">
            <summary>
            Throws the fault with appropriate message from the exception.
            </summary>
            <typeparam name="T"><see cref="T:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFault"/> or a derived class.</typeparam>
            <param name="fault">Fault to be thrown.</param>
            <param name="ex">Exception whose details will be put in fault</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Fault.ThrowIfTrue``1(System.Boolean,``0)">
            <summary>
            Throws generic exception if the precondition fails
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">Condition to check before throwing</param>
            <param name="exception">Exception to throw if condition is false</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Fault.ThrowFault(System.Exception)">
            <summary>
            Throws recovery service fault by finding accurate exception inside the 
            given exception. The accurate exception can be deep down the exception.
            </summary>
            <param name="ex">the original exception</param>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation">
            <summary>
            An incident annotation
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.HealthAnnotation.ResourceId">
            <summary>
            Uniquely identifies one resource in the entire world.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.HealthAnnotation.MonitorName">
            <summary>
            Identifies one monitor for the <see cref="P:Microsoft.Online.RecoveryService.Contract.HealthAnnotation.ResourceId"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.HealthAnnotation.DisplayName">
            <summary>
            Identifies the display name for the <see cref="P:Microsoft.Online.RecoveryService.Contract.HealthAnnotation.ResourceId"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.HealthAnnotation.IsDowntimeAnnotation">
            <summary>
            Whether the annotation is specific for downtime reason annotation in RHC scenario.
            </summary>
            <returns>Whether this is downtime annotation</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.HealthAnnotation.AnnotationType">
            <summary>
            Query the annotation mlection for the "AvailabilityAnnotationType" property.
            </summary>
            <returns>The "AvailabilityAnnotationType" property value or unspecified</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.HealthAnnotation.AnnotationInitiator">
            <summary>
            Query the annotation mlection for the "AvailabilityImpactInitiator" property.
            </summary>
            <returns>The "AvailabilityImpactInitiator" property value or unspecified</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.HealthAnnotation.AnnotationPriority">
            <summary>
            Query the annotation mlection for the "AvailabilityImpactInitiator" property.
            </summary>
            <returns>The "AvailabilityImpactInitiator" property value or unspecified</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.HealthFilter">
            <summary>
            The health filter class
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.HealthFilter.PropertyName">
            <summary>
            Gets or sets the property name
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.HealthFilter.Operation">
            <summary>
            Gets or sets the operation of the filter
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.HealthFilter.PropertyValue">
            <summary>
            Gets or sets the property value
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IRecoveryClient">
            <summary>
            Interface to the recovery client object which retries.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryClient.SubmitWatchdogHealthReport(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.IDictionary{System.String,System.Object},Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Submit watchdog report for resource health.
            </summary>
            <param name="watchdogName">name of the watchdog</param>
            <param name="watchdogType">type of the watchdog</param>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource which is serialization xml of 
            the dictionary of property and their values using DataSerializer.Serialize</param>
            <param name="status">status in the report.</param>
            <param name="actionParameters">parameters to the action which is serialization xml of 
            the dictionary of parameters and their values using DataSerializer.Serialize. Can be null.</param>
            <param name="message">message for human consumption</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryClient.SubmitWatchdogHealthReport2(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.IDictionary{System.String,System.Object},Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Submit watchdog report for resource health.
            </summary>
            <param name="watchdogName">name of the watchdog</param>
            <param name="watchdogType">type of the watchdog</param>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource which is the dictionary of property 
            and their values. For example, properties for resource of type RoleInstance can be
            Environment, Datacenter, Slice, Role, RoleInstance</param>
            <param name="status">status in the report.
            Must be an object of RecoveryHealthStatus, when healthType is ResourceHealthType.Recovery,
            and ScalingHealthStatus, when healthType is ResourceHealthType.Scaling</param>
            <param name="watchdogMetadata">metadata of the watchdog which is the dictionary of property and 
            their values using DataSerializer.Serialize. Can be null. For example, some properties are defined below.
             1) Severity (type: integer, sample value: 2, default value: 3)
             2) Category (type: string, sample value: "Availability", default value: "<see cref="F:Microsoft.Online.RecoveryService.Common.Constants.WatchdogCategoryDefaultValue"/>")
             3) Source (type: string, sample value: "AIMS", default value: "Unknown")
             4) ReportExpirationTime (type: integer, unit: seconds, sample value: 60, default value: 300)</param>
            <param name="message">message for human consumption</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryClient.SubmitBatchWatchdogHealthReportInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport})">
            <summary>
            Submit batch watchdog reports for resource health.
            </summary>
            <param name="reports">batch watchdog reports</param>
            <returns>Result for report submissions</returns>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system. Watchdogs 
            submitted externally using this method will be discarded and not be counted for health evaluation.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryClient.PreviewIncident(Microsoft.Online.RecoveryService.Contract.WatchdogReport,Microsoft.Online.Metrics.Common.EventConfiguration.MonitorConfiguration,Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration)">
            <summary>
            Generates a preview of the incident corresponding to the health report.
            </summary>
            <param name="report">the health report</param>
            <param name="monitorConfig">the associated monitor configuration</param>
            <param name="resourceTypeConfig">the associated resource type configuration</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.DataSerializer">
            <summary>
            Helper class to serialize and deserialize data.
            </summary> 
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.DataSerializer.Types">
            <summary>
            Specifies list of types that participate in the 
            parameter dictionary objects.
            </summary>
            <remarks>add more types here for additional support.</remarks>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.DataSerializer.KnownTypes">
            <summary>
            Gets the known types.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.DataSerializer.Serialize(System.Object)">
            <summary>
            Serializes dictionary of parameters as a xml string.
            </summary>
            <param name="parameter">specifies the object to serialize.</param>
            <returns>serialized xml string.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.DataSerializer.Serialize(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Object)">
            <summary>
            Serializes specified type of object as a xml string.
            </summary>
            <param name="rootType">specifies a root object Type.</param>
            <param name="subtypes">specifies a collection of sub object Types.</param>
            <param name="parameter">specifies the object to serialize.</param>
            <returns>serialized xml string.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.DataSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes a xml string to an object of root type.
            </summary>
            <param name="rootType">specifies a root object Type.</param>
            <param name="xmlParameter">specifies a serialized parameter string.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.DataSerializer.Deserialize(System.Type,System.Type[],System.String)">
            <summary>
            Deserializes a xml string to an object.
            </summary>
            <param name="rootType">specifies a root object Type.</param>
            <param name="subtypes">specifies a collection of sub object Types.</param>
            <param name="xmlParameter">specifies the object to xml.</param>
            <returns>serialized xml string.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.DataSerializer.DeserializeAsDictionary(System.String)">
            <summary>
            Deserializes a xml string into dictionary of parameters.
            </summary>
            <param name="xmlParameter">specifies a serialized parameter string.</param>
            <returns>serialized xml string.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient">
            <summary>
            Interface of recovery server for external clients
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.PreviewIncident(System.String,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Generates a preview of the incident corresponding to the health report.
            </summary>
            <param name="tenant">the tenant for which preview is generated</param>
            <param name="report">the health report. serialized using WatchdogReport.Serialize</param>
            <param name="monitorConfig">the associated monitor configuration. serialized using MonitorConfiguration.Serialize</param>
            <param name="resourceTypeConfig">the associated resource type configuration. serialized using ResourceTypeConfiguration.Serialize</param>
            <returns>the incident to be previewed. it is json serialization of list of AlertSourceIncident objects.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.SubmitWatchdogHealthReport(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.String,System.String)">
            <summary>
            Submit watchdog report for resource health.
            </summary>
            <param name="watchdogName">name of the watchdog</param>
            <param name="watchdogType">type of the watchdog</param>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource which is serialization xml of 
            the dictionary of property and their values using DataSerializer.Serialize</param>
            <param name="status">status in the report.</param>
            <param name="actionParameters">parameters to the action which is serialization xml of 
            the dictionary of parameters and their values using DataSerializer.Serialize. Can be null.</param>
            <param name="message">message for human consumption</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.TransitionFromCriticalToProbationState(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Transition from critical state to probation state for a given resource.
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="message">message describing the reason for transition</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.StartProcessing(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Starts the processing of the unhealthy resource. This method is called as part of initialization
            when the service instance is transitioning from passive state to active state.
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetActionExecutionInformation(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Returns execution details for an action of a resource type
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">name of the action</param>
            <returns>Action execution details</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.StartAction(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Starts an action on the resource.
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">name of the action</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.NotifyActionStart(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ActionType,System.String,System.Int32)">
            <summary>
            Notifies recovery service on a started action execution
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">name of the action</param>
            <param name="workitemId">Id of the corresponding work item on WI management service</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetActionProgress(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Gets the list of progress messages of an action being executed
            </summary>
            <param name="resourceId">Resource id for which action is being executed</param>
            <param name="resourceHealthType">Resource health type</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">Name of the action</param>
            <returns>List of progress messages</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetActionOutput(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Gets the list of output messages of an action being executed
            </summary>
            <param name="resourceId">Resource id for which action is being executed</param>
            <param name="resourceHealthType">Resource health type</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">Name of the action</param>
            <returns>List of progress messages</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetActionStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Gets the list of progress messages of an action being executed
            </summary>
            <param name="resourceId">Resource id for which action is being executed</param>
            <param name="resourceHealthType">Resource health type</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">Name of the action</param>        
            <returns>List of progress messages</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetLastActionStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType)">
            <summary>
            Gets the status of the latest action on the resource
            </summary>
            <param name="resourceId">Resource id for which action is being executed</param>
            <param name="resourceHealthType">Resource health type</param>
            <returns>the action status</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.SubmitWatchdogHealthReport2(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.String,System.String)">
            <summary>
            Submit watchdog report for resource health.
            </summary>
            <param name="watchdogName">name of the watchdog</param>
            <param name="watchdogType">type of the watchdog</param>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource which is the dictionary of property 
                and their values. For example, properties for resource of type RoleInstance can be
                Environment, Datacenter, Slice, Role, RoleInstance</param>
            <param name="status">status in the report.
                Must be an object of RecoveryHealthStatus, when healthType is ResourceHealthType.Recovery,
                and ScalingHealthStatus, when healthType is ResourceHealthType.Scaling</param>
            <param name="watchdogMetadata">metadata of the watchdog which is the dictionary of property and 
                their values using DataSerializer.Serialize. Can be null. For example, some properties are defined below.
                1) Severity (type: integer, sample value: 2, default value: 3)
                2) Category (type: string, sample value: "Availability", default value: "<see cref="F:Microsoft.Online.RecoveryService.Common.Constants.WatchdogCategoryDefaultValue"/>")
                3) Source (type: string, sample value: "AIMS", default value: "Unknown")
                4) ReportExpirationTime (type: integer, unit: seconds, sample value: 60, default value: 300)</param>
            <param name="message">message for human consumption</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetResourceOfflineStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Returns current offline status of the given resource.
            </summary>
            <param name="resourceId">id of the resource</param>        
            <returns>The offline status of the resource as Unknown, Online or Offline</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.SetResourceOfflineStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceOfflineStatus)">
            <summary>
            Sets current offline status of the given resource.
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="status">The offline status of the resource as Unknown, Online or Offline</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.SetResourceOfflineStatusInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceOfflineStatus)">
            <summary>
            Sets current offline status of the given resource which is not replicated to other DC.
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="status">The offline status of the resource as Unknown, Online or Offline</param>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.SubmitBatchWatchdogHealthReports(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport})">
            <summary>
            Submit watchdog report for resource health in batch.
            </summary>
            <param name="watchdogReports">List of watchdog reports</param>
            <returns>List of watchdog report results for failing report submissions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.DeleteResourceAsync(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Deletes the resource asynchronously.
            </summary>
            <param name="resourceId">id of the resource</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetHealthStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the health status of the resource
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>health status of the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetFailingWatchdogs(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of failing watchdogs for a given resource
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of failing watchdogs for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetWatchdogReportsForTenant(System.String,System.Boolean)">
            <summary>
            Returns a list of watchdogs for tenant.
            </summary>
            <param name="tenant">The tenant name.</param>
            <param name="failing">watchdogs retured are failing or healthy</param>
            <returns>list of watchdogs for tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetHealthData(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets health data for a resource
            </summary>
            <param name="resourceId">resource id</param>
            <returns>health data for the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetHealthDataForTenant(System.String)">
            <summary>
            Gets health data for resources of a tenant
            </summary>
            <param name="tenant">tenant name</param>
            <returns>health data for the resources of a tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.RestoreHealthHistory">
            <summary>
            Restore the resource history related data from persisted store.
            </summary>
            <returns>The async task.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports for a given resource
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetAllWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports for a given resource including expired reports too.
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchdog reports for the given resource including expired reports too.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.AddResource(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Add a new resource 
            </summary>
            <param name="resourceId">resource id</param>
            <param name="resourceMetadata">resource metadata</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.SubmitWatchdogHealthReportInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport})">
            <summary>
            Submit watchdog reports for resource health.
            </summary>
            <param name="reports">watchdog reports</param>
            <returns>Result for report submissions</returns>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system. Watchdogs 
            submitted externally using this method will be discarded and not be counted for health evaluation.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.DeleteResourceInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Deletes the resource asynchronously.
            </summary>
            <param name="resourceId">id of the resource</param>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.DeleteNodeInternal(System.String,System.String)">
            <summary>
            Deletes the node and its sub-resources.
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="nodeId">id of the node</param>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetIncidents(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the incidents on a resource
            </summary>
            <param name="resourceId">resource id</param>
            <returns>list of incidents</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.CreateTestIncident(System.String,System.String,System.String)">
            <summary>
            Create a new test incident for the tenant.
            </summary>
            <param name="tenant">
                The name of the tenant.
            </param>
            <param name="connectorId">
                The IcM connector Id.
            </param>
            <param name="icmUrl">
                The IcM endpoint Url.
            </param>
            <returns>
            A value indicating if the incident creation failed.
            </returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetSuppressionState(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the suppression state of the resource
            </summary>
            <param name="resourceId">resource id</param>
            <returns>suppression state of the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetResourceIdentifierProperties(System.String,System.String)">
            <summary>
            Gets identifier properties for a resource type in tenant configuration
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="resourceType">type of the resource</param>
            <returns>list of resource identifier properties</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.SubmitSerializedWatchdogHealthReports(System.Byte[],System.Int32)">
            <summary>
            Batch submit WatchdogReport using proprietary binary schema to serialize/deserialize
            WatchdogReport (for input) and WatchdogReportResult (for output) lists.
            </summary>
            <param name="watchdogReportBlob">The serialized WatchdogReport list</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized WatchdogReport list</param>
            <returns>The serialized WatchdogReportResult list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.SubmitSerializedWatchdogHealthReports2(System.IO.Stream)">
            <summary>
            Batch submit WatchdogReport using proprietary binary schema to serialize/deserialize
            WatchdogReport (for input) and WatchdogReportResult (for output) lists.
            </summary>
            <param name="watchdogReportBlob">The serialized WatchdogReport list</param>
            <returns>The serialized WatchdogReportResult list</returns>
            <remarks>This version of submit API allows the client to just post bytes in http post content. This is 
            efficient than the other API where byte[] is serialized into base64 string over the network.</remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.SubmitSerializedWatchdogHealthReportInternal(System.Byte[],System.Int32)">
            <summary>
            Submit watchdog reports for resource health. This is the variation that uses proprietary binary schema
            for serialization/deserialization.
            </summary>
            <param name="reports">watchdog reports</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized WatchdogReport list</param>
            <returns>The serialized WatchdogReportResult list</returns>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system. Watchdogs 
            submitted externally using this method will be discarded and not be counted for health evaluation.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.SubmitSerializedBatchWatchdogHealthReportInternal(System.Byte[])">
            <summary>
            API to submit serialized batch watchdog health reports (BatchWatchdogReport instances) for a given resource.
            </summary>
            <param name="batchReportBlob">serialized list of batch-watchdog reports (BatchWatchdogReport)</param>
            <returns>result for report submissions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetSerializedFailingWatchdogs(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of failing watchdogs for a given resource in serialized binary blob form
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>Serialized blob that represents the list of failing watchdogs for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetSerializedWatchdogReportsForTenant(System.String,System.Boolean)">
            <summary>
            Returns a list of watchdogs for tenant in serialized binary blob form
            </summary>
            <param name="tenant">The tenant name.</param>
            <param name="failing">watchdogs retured are failing or healthy</param>
            <returns>serialized blob for the list of watchdogs for tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetSerializedWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports (in serialized binary blob form) for a given resource, NOT including expired reports
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>The serialized blob that represents the list of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetAllSerializedWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports (in serialized binary blob form) for a given resource including expired reports too.
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchdog reports for the given resource including expired reports too.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetResourceHealthReport(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the resource based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="resourceId">the id of the resource</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetBatchResourceHealthReports(System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the resource based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="tenant">the tenant of the resources</param>
            <param name="resourceIds">the list of the resources</param>
            <param name="healthStatusFilters">the health status filter. if specified, only resources which matches this filter are returned.</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the list of resource health reports</returns>
            <remarks>there is max limit of 100 resources.</remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetChildResourceHealthReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the child resources based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="resourceId">the id of the resource</param>
            <param name="childResourceType">the resource type of the children</param>
            <param name="healthStatusFilters">the health status filter.</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.AddorUpdateHealthAnnotation(Microsoft.Online.RecoveryService.Contract.HealthAnnotation)">
            <summary>
            Add or Update the <paramref name="annotation"/>.
            </summary>
            <param name="annotation">
                The health annotation to be added.
            </param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.AddorUpdateHealthAnnotationBulk(System.Collections.Generic.IEnumerable{Microsoft.Online.RecoveryService.Contract.HealthAnnotation})">
            <summary>
            Add or Update the <paramref name="annotations"/>.
            </summary>
            <param name="annotations">
                The health annotations to be added.
            </param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.AddorUpdateSerializedHealthAnnotations(System.Byte[],System.Int32)">
            <summary>
            Batch submit HealthAnnotation using proprietary binary schema to serialize/deserialize
            HealthAnnotation (for input) list.
            </summary>
            <param name="annotationsBlob">The serialized <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/> list.</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized HealthAnnotation list</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.AddorUpdateSerializedHealthAnnotations2(System.IO.Stream)">
            <summary>
            Batch submit HealthAnnotation using proprietary binary schema to serialize/deserialize
            HealthAnnotation (for input) list.
            </summary>
            <param name="annotationsBlob">The serialized <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/> list.</param>
            <remarks>This version of submit API allows the client to just post bytes in http post content. This is 
            efficient than the other API where byte[] is serialized into base64 string over the network.</remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetHealthAnnotations(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.DateTime,System.DateTime)">
            <summary>
            Get the <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/> for the <paramref name="resourceId"/>.
            </summary>
            <param name="resourceId">The resource Id to fetch annotations for.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns>The list of <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/>.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetHealthAnnotationsForWatchdog(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.DateTime,System.DateTime)">
            <summary>
            Get the <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/> for the <paramref name="resourceId"/>.
            </summary>
            <param name="resourceId">The resource Id to fetch annotations for.</param>
            <param name="watchdogName">The name of the watchdog.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns>The list of <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/>.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetResourceHealthHistory(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the resource normalized and aggregated 
            over various watchdog results for <paramref name="resourceId"/>.
            </summary>
            <param name="resourceId">The resource Id.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="normalized">Whether to return normalized or raw history</param>
            <returns>The normalized health history of the resource ordered from the start to end minute.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetBatchResourceHistory(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the resources normalized and aggregated 
            over various watchdog results for <paramref name="resourceIds"/>.
            </summary>
            <param name="resourceIds">The resource Id.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">Whether to return normalized or raw history</param>
            <returns>The normalized health history of the resource ordered from the start to end minute.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetBatchResourceHistoryInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the resources normalized and aggregated 
            over various watchdog results for <paramref name="resourceIds"/>.
            </summary>
            <param name="resourceIds">The resource Id.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">Whether to return normalized or raw history</param>
            <returns>The normalized health history of the resource ordered from the start to end minute.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetBatchWatchdogHistory(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceWatchdogPair},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Gets the history of the watchdogs in the given time range.
            </summary>
            <param name="resourceWatchdogPairs">The resource watchdog.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">A value indicating if only transitions are to be retrieved..</param>
            <returns>The history of the watchdog in the given time range.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetBatchWatchdogHistoryInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceWatchdogPair},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Gets the history of the watchdogs in the given time range.
            </summary>
            <param name="resourceWatchdogPairs">The resource watchdog.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">A value indicating if only transitions are to be retrieved..</param>
            <returns>The history of the watchdog in the given time range.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetBatchWatchdogHealthHistory(System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the watchdogs matching specified filters on each resource in the results.
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="resourceIds">The list of resource Ids.</param>
            <param name="watchdogFilters">The list of watchdog filters. 
            only return watchdog histories if the watchdog metadata matches all the filters.
            null means to return all watchdog histories.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="normalized">Normalized vs raw history</param>
            <returns>The health history of the watchdogs matching filters (both health status filter/watchdog filters) per resource 
            ordered from the start to end minute.</returns>
            <returns>There is max limit of 100 resources.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetIncidentId(System.String,System.Guid)">
            <summary>
            Get the Icm incident id from incident source id.
            </summary>
            <param name="topologyName">The monitoringAccountName</param>
            <param name="incidentSourceId">The incident source id, which is a guid</param>
            <returns>The incident id</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetResourceHealthReportInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the resource based on watchdogs matching the filters since the time specified.
            This is internal-only variation of GetResourceHealthReport.
            </summary>
            <param name="resourceId">the id of the resource</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
                used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
                Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetBatchResourceHealthReportsInternal(System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health reports of the resources based on watchdogs matching the filters since the time specified.
            This is internal-only variation of GetResourceHealthReport.
            </summary>
            <param name="tenant">the tenant of the resources</param>
            <param name="resourceIds">the list of the resources</param>
            <param name="healthStatusFilters">the health status filter</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
                used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
                Any report before that time will be considered stale.</param>
            <returns>the list of resource health reports</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetChildResourceHealthReportsInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the child resources based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="resourceId">the id of the resource</param>
            <param name="childResourceType">the resource type of the children</param>
            <param name="healthStatusFilters">the health status filter. if specified, only resources matching this filter will be returned.</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
                used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
                Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetBatchWatchdogHealthHistoryInternal(System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the watchdogs matching specified filters on each resource in the results.
            This is internal-only variation of GetBatchWatchdogHealthHistory.
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="resourceIds">The list of resource Ids.</param>
            <param name="watchdogFilters">The list of watchdog filters. 
            only return watchdog histories if the watchdog metadata matches all the filters.
            null means to return all watchdog histories.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="normalized">Normalized vs raw history</param>
            <returns>The health history of the watchdogs matching filters (both health status filter/watchdog filters) per resource 
            ordered from the start to end minute.</returns>
            <returns>There is max limit of 100 resources.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetBatchWatchdogReportsAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier})">
            <summary>
            Gets list of watchdog reports for the list of given resources
            </summary>
            <param name="resourceIds"></param>
            <returns>List of watchdog reports for the given resource. The WatchDogReport has the resourceIdentifier for which it is generated</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetSerializedBatchWatchdogReportsAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier})">
            <summary>
            Gets the serialized list of watchdog reports for the list of given resources. Use the <see cref="T:Microsoft.Online.RecoveryService.Contract.SerializationHelper"/> class to deserialize the result.
            </summary>
            <param name="resourceIds"></param>
            <returns>byte array which is serialized List of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetSerializedBatchWatchdogReportsInternalAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier})">
            <summary>
            Gets list of watchdog reports (in serialized binary blob form) for given batch of resources, NOT including expired reports
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>The serialized blob that represents the list of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetBatchWatchdogReportsInternalAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier})">
            <summary>
            Gets list of watchdog reports for a given batch of resources, NOT including expired reports
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>the list of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetWatchdogReportsInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports for a given resource
            This is internal-only variation of GetWatchdogReports
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetSerializedWatchdogReportsInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports (in serialized binary blob form) for a given resource, NOT including expired reports
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>The serialized blob that represents the list of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetHealthDataInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets health data for a resource
            This is internal-only variation of GetHealthData
            </summary>
            <param name="resourceId">resource id</param>
            <returns>health data for the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetIncidentsInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the incidents on a resource.
            This is internal-only variation of GetIncidents
            </summary>
            <param name="resourceId">resource id</param>
            <returns>list of incidents</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetViewTreeInternal(System.String,System.String,System.String)">
            <summary>
            Gets view model tree for a resource. This tree consist of resource itself, its ancestors, siblings and children
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="tenant">tenant name</param>
            <param name="resourceType">type of the resource</param>
            <param name="resourceName">name of the resource</param>
            <returns>view model tree of the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetViewTreeForNodesInternal(System.String,System.String[])">
            <summary>
            Gets common view model tree for a set of nodes. This tree is a union of trees of individual nodes passed.
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="tenant">tenant name</param>
            <param name="nodeIds">identifiers of the nodes</param>
            <returns>a view model tree of spanning all of the given nodes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetMatchingResourcesInternal(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter})">
            <summary>
            Gets the resources which matches the filters and are from one from the specified resource-types (if specified).
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="resourceTypes">Optional. If specified, matching resource type should be one from this list.</param>
            <param name="resourceDimensionFilters">The resource dimension filters.</param>
            <returns>The list of matching resource-ids.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetFilteredViewTreeInternal(System.String,System.Nullable{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.String[],System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTree"/> from the Recovery Service which matches the specified filter(s)
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="healthStatus">Optional. If specified, specifies the health status of nodes to be returned.</param>
            <param name="dimensions">The resource dimensions.</param>
            <param name="nodeId">The nodeId if a lower level tree has to be fetched.</param>
            <param name="onlyDirectChildren">
            A value indicating whether only direct children are to be returned.
            </param>
            <returns>The <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTree"/> structure.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetBatchNodesFromNodeIdsInternalAsync(System.String,System.String[])">
            <summary>
            Gets a list of <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTreeNode"/> from the Recovery Service corresponding to the nodeids
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="nodeIds">The list of nodeIds</param>
            <returns>The <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTreeNode"/> structure.</returns>
            <remarks> The children field of the node will not have any children in the list</remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetViewTreeForTenantInternal(System.String)">
            <summary>
            Gets common view model tree for tenant
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="tenant">tenant name</param>
            <returns>a view model tree for a tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetChildrenInViewTreeInternal(System.String,System.String)">
            <summary>
            Gets children of a resource in view model tree
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="tenant">tenant name</param>
            <param name="nodeId">id of the node</param>
            <returns>sub-tree containing list of children</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetMaxNumberOfDaysForHistory">
            <summary>
            Get the property for the maximum number of days of history data that the health system would keep.
            Currently resource health check will keep maximum 90 days of history/transition/annotation data.
            </summary>
            <returns>The maximum number of days of history data that the health system would keep.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetResourceHealth(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource})">
            <summary>
            Returns the current health data for a list of resources
            </summary>
            <param name="armResourceIds">The list of queried resources.</param>
            <returns>The list of the current health status of the resources in the input list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetHistoricalHealth(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.Int32)">
            <summary>
            Returns the transitions in resource health for last n days for the resource with given arm id.
            </summary>
            <param name="armResourceIds">The list of ArmResourceIds for the queried resource</param>
            <param name="lastNDays">Query the health status of the resource for the given days where the value of lastNDays should be betweeb 0 and MaxDaysForHistory</param>
            <returns>Transitions that the resource went in chronologically sorted order</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetHistoricalEvents(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.DateTime,System.DateTime)">
            <summary>
            Returns the list of all donwtime annotations between startTime and endTime
            This is capped to maximum of 1000 values
            </summary>
            <param name="armResourceIds">List of arm Ids of resources</param>
            <param name="startTime">startTime for querying the annotation</param>
            <param name="endTime">EndTime for querying the annotation</param>
            <returns>Collection of health events reported between startTime and endTime</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetHistoricalHealthInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.Int32)">
            <summary>
            Returns the transitions in resource health for last n days for the resource with given arm id.
            </summary>
            <param name="armResourceIds">The ArmResourceId for the queried resource</param>
            <param name="lastNDays">Query the health status of the resource for the given days where the value of lastNDays should be betweeb 0 and MaxDaysForHistory</param>
            <returns>Transitions that the resource went in chronologically sorted order</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetLastNHealthData(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.Int32)">
            <summary>
            Returns the last N transitions of the resource. Data older than MaxDaysForHistory days will be ignored
            </summary>
            <param name="armResourceIds">The list of ArmResourceIds for the queried resource</param>
            <param name="lastNTransitions">Max number of transition data returned</param>
            <returns>List of at most the last N transitions in chronologically sorted order, if possible</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetLastNHealthDataInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.Int32)">
            <summary>
            Returns the last N transitions of the resource. Data older than MaxDaysForHistory days will be ignored
            </summary>
            <param name="armResourceIds">The ArmResourceId for the queried resource</param>
            <param name="lastNTransitions">Max number of transition data returned</param>
            <returns>List of at most the last N transitions in chronologically sorted order, if possible</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient.GetChildren(Microsoft.Online.RecoveryService.Contract.ArmResource)">
             <summary>
             Return the immediate child resources of the given parent resource. 
             A common scenario for this api would where a customer queries for the health of his cloud service, the expected result from RHC is of form:
                 {  
                     ResourceId : "R1"
                     ResourceState : "Degraded", 
                     ChildResourceStates :
                     {
                          [ { ResourceId : "R2", ResourceState: Up, ChildResourceStates: {}}, {{ ResourceId : "R3", ResourceState: Up, ChildResourceStates: {}}]
                     }
                 } 
            
             To achieve this RHC would need to query the hierarchy first from Health Service and then query for the health for each node in the hierarchy independently.
             </summary>
             <param name="armResourceId"></param>
             <returns>The list of immediate child resources; return null if the input resource is a leaft resource (that is, without child resources).</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalSubmitClientObsolete.SubmitSerializedWatchdogHealthReports(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Batch submit WatchdogReport using proprietary binary schema to serialize/deserialize
            WatchdogReport (for input) and WatchdogReportResult (for output) lists.
            </summary>
            <param name="watchdogReportBlob">The serialized WatchdogReport list</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized WatchdogReport list</param>
            <param name="outBlobSize">Return the blob size (in bytes) of the returned WatchdogReportResult list</param>
            <returns>The serialized WatchdogReportResult list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalSubmitClientObsolete.SubmitSerializedWatchdogHealthReportInternal(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Submit watchdog reports for resource health. This is the variation that uses proprietary binary schema
            for serialization/deserialization.
            </summary>
            <param name="reports">watchdog reports</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized WatchdogReport list</param>
            <param name="outBlobSize">Return the blob size (in bytes) of the returned WatchdogReportResult list</param>
            <returns>The serialized WatchdogReportResult list</returns>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system. Watchdogs 
            submitted externally using this method will be discarded and not be counted for health evaluation.
            </remarks>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete">
            <summary>
            Obsolete interfaces to cover n -> n+1 upgrade
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetResourceHealthReportInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the resource based on watchdogs matching the filters since the time specified.
            This is internal-only variation of GetResourceHealthReport.
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="resourceId">the id of the resource</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
                used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
                Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetBatchResourceHealthReportsInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health reports of the resources based on watchdogs matching the filters since the time specified.
            This is internal-only variation of GetResourceHealthReport.
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="tenant">the tenant of the resources</param>
            <param name="resourceIds">the list of the resources</param>
            <param name="healthStatusFilters">the health status filter</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the list of resource health reports</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetChildResourceHealthReportsInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the child resources based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="resourceId">the id of the resource</param>
            <param name="childResourceType">the resource type of the children</param>
            <param name="healthStatusFilters">the health status filter. if specified, only resources matching this filter will be returned.</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetBatchWatchdogHealthHistoryInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the watchdogs matching specified filters on each resource in the results.
            This is internal-only variation of GetBatchWatchdogHealthHistory.
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="tenant">name of the tenant</param>
            <param name="resourceIds">The list of resource Ids.</param>
            <param name="watchdogFilters">The list of watchdog filters. 
            only return watchdog histories if the watchdog metadata matches all the filters.
            null means to return all watchdog histories.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="normalized">Normalized vs raw history</param>
            <returns>The health history of the watchdogs matching filters (both health status filter/watchdog filters) per resource 
            ordered from the start to end minute.</returns>
            <returns>There is max limit of 100 resources.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetWatchdogReportsInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports for a given resource
            This is internal-only variation of GetWatchdogReports
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetSerializedWatchdogReportsInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports (in serialized binary blob form) for a given resource, NOT including expired reports
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="resourceId">id of the resource</param>
            <returns>The serialized blob that represents the list of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetHealthDataInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets health data for a resource
            This is internal-only variation of GetHealthData
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="resourceId">resource id</param>
            <returns>health data for the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetIncidentsInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the incidents on a resource.
            This is internal-only variation of GetIncidents
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="resourceId">resource id</param>
            <returns>list of incidents</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetViewTreeInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,System.String,System.String,System.String)">
            <summary>
            Gets view model tree for a resource. This tree consist of resource itself, its ancestors, siblings and children
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="tenant">tenant name</param>
            <param name="resourceType">type of the resource</param>
            <param name="resourceName">name of the resource</param>
            <returns>view model tree of the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetViewTreeForNodesInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,System.String,System.String[])">
            <summary>
            Gets common view model tree for a set of nodes. This tree is a union of trees of individual nodes passed.
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="tenant">tenant name</param>
            <param name="nodeIds">identifiers of the nodes</param>
            <returns>a view model tree of spanning all of the given nodes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetMatchingResourcesInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter})">
            <summary>
            Gets the resources which matches the filters and are from one from the specified resource-types (if specified).
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="tenantName">The tenant name.</param>
            <param name="resourceTypes">Optional. If specified, matching resource type should be one from this list.</param>
            <param name="resourceDimensionFilters">The resource dimension filters.</param>
            <returns>The list of matching resource-ids.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetFilteredViewTreeInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,System.String,System.Nullable{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.String[],System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTree"/> from the Recovery Service which matches the specified filter(s)
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="tenantName">The tenant name.</param>
            <param name="healthStatus">Optional. If specified, specifies the health status of nodes to be returned.</param>
            <param name="dimensions">The resource dimensions.</param>
            <param name="nodeId">The nodeId if a lower level tree has to be fetched.</param>
            <param name="onlyDirectChildren">
            A value indicating whether only direct children are to be returned.
            </param>
            <returns>The <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTree"/> structure.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetViewTreeForTenantInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,System.String)">
            <summary>
            Gets common view model tree for tenant
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="tenant">tenant name</param>
            <returns>a view model tree for a tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete.GetChildrenInViewTreeInternal(Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason@,System.String,System.String)">
            <summary>
            Gets children of a resource in view model tree
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="reason">The reason where the result is obtained.</param>
            <param name="tenant">tenant name</param>
            <param name="nodeId">id of the node</param>
            <returns>sub-tree containing list of children</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientSupportingObsolete">
            <summary>
            Interface of recovery server for external clients, which supports obsolete APIs
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.GatewayResultWithReplicationReason`1">
            <summary>
            Wraps result and provides gatewayReplicationReason
            </summary>
            <typeparam name="T">Wrapped type</typeparam>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.GatewayResultWithReplicationReason`1.#ctor(`0,Microsoft.Online.RecoveryService.Contract.GatewayReplicationReason)">
            <summary></summary>
            <param name="result"></param>
            <param name="reason"></param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.GatewayResultWithReplicationReason`1.Result">
            <summary>Wrapped result</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.GatewayResultWithReplicationReason`1.GatewayReplicationReason">
            <summary>GatewayReplicationReason</summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IViewService">
            <summary>
            IViewService interface for AdRocs view service
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetAllTenants">
            <summary>
            Get list of all tenants
            </summary>
            <returns>List of all tenants on-boarded on ADROCS</returns>
            <remarks>reads and returns list of tenant from all tenants gateway config.xml
            TODO: this should return only tenants which already has a view model tree created.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetResourceIdentifierWithDimensions(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the resource identifier with dimensions
            </summary>
            <param name="resourceId">the resource-id without dimensions</param>
            <returns>the resource-id with dimensions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetViewTree(System.String,System.String,System.String)">
            <summary>
            Gets view model tree for a resource. 
            This tree consist of resource itself, its ancestors, siblings and children
            </summary>
            <param name="tenant">tenant name</param>
            <param name="resourceType">type of the resource</param>
            <param name="resourceName">name of the resource</param>
            <returns>view model tree of the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetViewTreeForNodes(System.String,System.String[])">
            <summary>
            Gets common view model tree for a set of nodes
            This tree is a union of trees of individual nodes passed.
            </summary>
            <param name="tenant">tenant name</param>
            <param name="nodeIds">identifiers of the nodes</param>
            <returns>a view model tree of spanning all of the given nodes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetMatchingResources(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter})">
            <summary>
            Gets the resources which matches the filters and are from one of the specified resource-types (if specified).
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="resourceTypes">Optional. If specified, matching resources type should be one from this list.</param>
            <param name="resourceDimensionFilters">The resource dimension filters.</param>
            <returns>The list of matching resource-ids.</returns>
            <remarks>The matching resources should have visualization hierarchy setup.</remarks>
            <remarks>There is max limit of 10000 matching resources.</remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetFilteredViewTree(System.String,System.Nullable{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.String[],System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTree"/> from the Recovery Service which matches the specified filter(s)
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="healthStatus">Optional. If specified, specifies the health status of nodes to be returned.</param>
            <param name="dimensions">The resource dimensions.</param>
            <param name="nodeId">The nodeId if a lower level tree has to be fetched.</param>
            <param name="onlyDirectChildren">
                A value indicating whether only direct children are to be returned.
            </param>
            <returns>The <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTree"/> structure.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetBatchNodesFromNodeIdsAsync(System.String,System.String[])">
            <summary>
            Gets a list of <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTreeNode"/> from the Recovery Service corresponding to the nodeids
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="nodeIds">The list of nodeIds</param>
            <returns>The <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTreeNode"/> structure.</returns>
            <remarks> The children field of the node will not have any children in the list</remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetViewTreeForTenant(System.String)">
            <summary>
            Gets common view model tree for tenant
            </summary>
            <param name="tenant">tenant name</param>
            <returns>a view model tree for a tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetChildrenInViewTree(System.String,System.String)">
            <summary>
            Gets children of a resource in view model tree
            </summary>
            <param name="tenant">tenant name</param>
            <param name="nodeId">id of the node</param>
            <returns>sub-tree containing list of children</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.DeleteNode(System.String,System.String)">
            <summary>
            Deletes resources in a given nodes hierarchy
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="nodeId">id of the node to be deleted</param>
            <returns>true if deletion succeeds, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.SetSuppressionState(System.String,System.String,Microsoft.Online.RecoveryService.Contract.SuppressionMode,System.TimeSpan)">
            <summary>
            Add a new suppression rule for a tenant
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="nodeId">id of the node to be deleted</param>
            <param name="suppressionState">suppression state for the node</param>
            <param name="expirationTime">expiration time for suppression state for the node</param>
            <returns>View sub-tree after applying suppression state to the node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.SetSuppressionStateForResource(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.SuppressionMode,System.TimeSpan)">
            <summary>
            Add a new suppression rule for a tenant for a resource
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="suppressionState">suppression state for the node</param>
            <param name="expirationTime">expiration time for suppression state for the node</param>
            <returns>View sub-tree after applying suppression state to the node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.AddSuppressionRule(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},Microsoft.Online.RecoveryService.Contract.SuppressionMode,System.TimeSpan,System.String)">
            <summary>
            Adds a new suppression rule
            </summary>
            <param name="tenant">tenant name</param>
            <param name="resourceTypes">list of resource-types with which this rule is associated with. 
                null means resources of any type matching filters will be suppressed.</param>
            <param name="resourceDimensionFilters">list of dimension filters with which this rule is associated with. cannot be null or empty.</param>
            <param name="suppressionState">suppression state.</param>
            <param name="expirationTime">expiration time for suppression state for the node</param>
            <param name="alias">alias which is adding this suppression rule</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.RemoveSuppressionRule(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter})">
            <summary>
            Removes a new suppression rule
            </summary>
            <param name="tenant">tenant name</param>
            <param name="resourceTypes">list of resource-types with which this rule is associated with</param>
            <param name="resourceDimensionFilters">list of dimension filters with which this rule is associated with</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetSuppressionRulesForNodeId(System.String,System.String)">
            <summary>
            Gets the active suppression rules for the given node and tenant
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="nodeId">The node id.</param>
            <returns>List of the active <see cref="T:Microsoft.Online.RecoveryService.Contract.SuppressionRule"/> objects for the given nodeid. Returns null if node doesnt exist</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetSuppressionRules(System.String)">
            <summary>
            Gets all active suppression rules for a tenant
            </summary>
            <param name="tenantName">name of the tenant</param>
            <returns>List of the active <see cref="T:Microsoft.Online.RecoveryService.Contract.SuppressionRule"/> objects for the given tenant.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetAddedTopologyResources(System.String,System.Int64)">
            <summary>
            Returns resources that were added to the topology 
            </summary>
            <param name="partitionKey">recovery service partition key</param>
            <param name="sinceTime">return resources that were added after this time tick</param>
            <returns>list of resources</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetTopologyChildResources(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Gets all immediate children of a given resource in tenant resource topology.
            </summary>
            <param name="resourceId">Resource for which to return child resources</param>
            <param name="childResourceType">type of the child resource</param>
            <returns>List of child resources of the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetSerializedBatchTopologyChildResources(System.Byte[])">
            <summary>
            Batch api to returns child resources of a resource
            </summary>
            <param name="resourceIdListBlob">blob containing resource-id's</param>
            <returns>blob containing list of child resources of each resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.IsTenantAtThrottleLimit(System.String)">
            <summary>
            Returns a value indicating whether the tenant should be throttled due to number of resources.
            </summary>
            <param name="tenant">The name of the tenant.</param>
            <returns>A value indicating whether the tenant should be throttled due to number of resources.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.AddTopologyResource(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Add a resource to topology
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetChildWatchdogSummaryForResource(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Gets watchdog summary data a resource (union of all watdogs of its child resources)
            </summary>
            <param name="resourceId">resource identifier</param>
            <param name="childResourceType">type of the child resource</param>
            <returns>list of watchdog summary data</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IViewService.GetSerializedBatchChildWatchdogSummaries(System.Byte[])">
            <summary>
            Serialized batch api to returns child watchdog summary for resources
            </summary>
            <param name="resourceIdListBlob">blob containing resource-id's</param>
            <returns>blob containing list of child watchdog summaries of each resource</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.MetadataCollection">
            <summary>
            Metadata collection which has methods to return xml or JSON serialization.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.MetadataCollection.dictionary">
            <summary>
            Metadata collection as dictionary. Can be changed to List if needed to 
            reduce memory footprint.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.#ctor">
            <summary>
            Initializes a new instance of the MetadataCollection class.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MetadataCollection class with a serialized collection (dictionary).
            Serialization can be in xml format or JSON format.
            </summary>
            <param name="serializedMetadata">Serialized dictionary</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the MetadataCollection class with a dictionary.
            </summary>
            <param name="dictionary">input dictionary</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the MetadataCollection class with a dictionary.
            </summary>
            <param name="entries">input dictionary</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MetadataCollection.SerializationXml">
            <summary>
            Gets the serialization xml of the metadata collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MetadataCollection.SerializationJson">
            <summary>
            Gets the serialization JSON of the metadata collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MetadataCollection.Entries">
            <summary>
            Gets the entries in the metadata collection
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.ToDictionary">
            <summary>
            Gets the dictionary with the entries
            </summary>
            <returns>returns the dictionary containing the entries</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.IsEmpty">
            <summary>
            Is collection empty?
            </summary>
            <returns>true if empty</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.Count">
            <summary>
            Returns the count of properties in the collection
            </summary>
            <returns>the count</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.Add(System.String,System.Object)">
            <summary>
            Adds a new object to the metadata collection
            </summary>
            <param name="name">Name of the entry.</param>
            <param name="value">Value of the entry.</param>
            <returns>Existing value replaced by the new one or null for new entry.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.Get(System.String)">
            <summary>
            Tries to get a value by name.
            </summary>
            <param name="name">Name of the dictionary entry.</param>
            <returns>value if present. null if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.GetValues(System.Text.RegularExpressions.Regex)">
            <summary>
            Tries to get a value by name.
            </summary>
            <param name="filter">The filter to match against.</param>
            <returns>value if present. null if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.ContainsProperty(System.String)">
            <summary>
            Whether contains the metadata property
            </summary>
            <param name="property">name of the parameter</param>
            <returns>true if present</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.Copy">
            <summary>
            Returns the copy of the metadata collection.
            </summary>
            <returns>the copied metadata collection.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.Copy(System.Action{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            Returns the copy of the metadata collection using copy action
            </summary>
            <param name="copyAction"></param>
            <returns>the copied metadata collection.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.Serialize(Microsoft.Online.RecoveryService.Contract.MetaDataType)">
            <summary>
            Serializes the metadata collection as byte blob
            </summary>
            <param name="metadataType">The metadata type</param>
            <returns>the byte blob</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.Deserialize(System.Byte[],Microsoft.Online.RecoveryService.Contract.MetaDataType)">
            <summary>
            Deserialize the byte blob
            </summary>
            <param name="blob">The byte blob</param>
            <param name="metadataType">The metadata type</param>
            <returns>The metadata collection</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.Add(Microsoft.Online.RecoveryService.Contract.MetadataCollection,Microsoft.Online.RecoveryService.Contract.MetadataCollection)">
            <summary>
            Add twos metadata collection
            </summary>
            <param name="metadata1">first metadata</param>
            <param name="metadata2">second metadata</param>
            <returns>final metadata</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MetadataCollection.Merge(Microsoft.Online.RecoveryService.Contract.MetadataCollection,Microsoft.Online.RecoveryService.Contract.MetadataCollection,System.Boolean@)">
            <summary>
            Merges two metadata collection
            </summary>
            <param name="metadataLeft">First metadata collection in the merge</param>
            <param name="metadataRight">Second metadata collection in the merge</param>
            <param name="changed">Out parameter indicating whether where was an actual merge operation</param>
            <returns>Merged metadata</returns>
            <remarks>
            If a property exist in two dictionaries with the same value, then the one 
            in the metadata Right will win (override).
            </remarks>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest">
            <summary>
            The message body for MitigateIncident requests that will be sent from health service to the partner services.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest.Create(System.Int64,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport,Microsoft.AzureAd.Icm.Types.AlertSourceIncident,System.String)">
            <summary>
            Create MitigateIncident request message object.
            </summary>
            <param name="incidentId">The IcM incident id</param>
            <param name="resource">The ResourceIdentifier object</param>
            <param name="failingReports">The list of failing WatchdogReport objects</param>
            <param name="computedReport">The computed WatchdogReport object</param>
            <param name="alertSource">The AlertSourceIncident object</param>
            <param name="alternativeAlertId">The alternative alert id</param>
            <returns>The returned MitigateIncidentRequest object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest.#ctor(System.Int64,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport,Microsoft.AzureAd.Icm.Types.AlertSourceIncident)">
            <summary>
            The private constructor
            </summary>
            <param name="incidentId">The IcM incident id</param>
            <param name="resource">The ResourceIdentifier object</param>
            <param name="failingReports">The list of failing WatchdogReport objects</param>
            <param name="computedReport">The computed WatchdogReport object</param>
            <param name="alertSource">The AlertSourceIncident object</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest.IncidentId">
            <summary>
            The IcM incident ID
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest.Resource">
            <summary>
            The ResourceIdentifier
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest.FailingWatchdogReports">
            <summary>
            The listy of the failing WatchdogReport objects
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest.ComputedWatchdogReport">
            <summary>
            The computed WatchdogReport object
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest.AlertSource">
            <summary>
            The AlertSourceIncident object
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest.AlertId">
            <summary>
            The alternative AlertId from CreateIncidentResponse message.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest.MessageHeaderSize1">
            <summary>
            The fixed-size part of MitigateIncidentRequest message body.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest.Serialize">
            <summary>
            Serialize the MitigateIncidentRequest object to binary blob.
            The format of the binary blob for the first iteration is
            
            00  UINT32 blobSize
            04 UINT16 headerSize
            06 UINT8  version
            07 UINT8  type (MitigateIncident)
            08 UINT64 incidentId
            16 UINT32 offsetResourceIdentifier
            20 UINT32 sizeResourceIdentifier
            24 UINT32 offsetFailingWatchdogReportList
            28 UINT32 sizeFailingWatchdogReportList
            32 UINT32 offsetComputedWatchdogReport
            36 UINT32 sizeComputedWatchdogReport
            40 UINT32 offsetAlertSourceIncident
            44 UINT32 sizeAlertSourceIncident
            48 UINT32 offsetAlertId
            52 UINT32 sizeAlertId
            
            [serialized ResourceIdentifier]
            [serialized WatchdogReport list for failing watchdog reports]
            [serialized WatchdogReport for computed watchdog report]
            [serialized AlertSourceIncident]
            [serialized AlertId string]
            
            </summary>
            <returns>The binary blob for the serialized MitigateIncidentRequest object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest.Deserialize(System.Byte[])">
            <summary>
            Deserialize the binary blob to the MitigateIncidentRequest object.
            </summary>
            <param name="blob">The input binary blob</param>
            <returns>The MitigateIncidentRequest object</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse">
            <summary>
            The message body for MitigateIncident responses that will be sent from the partner services to the health service incident processing actor.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.Create(Microsoft.Online.RecoveryService.Contract.IncidentResponse,Microsoft.Online.RecoveryService.Contract.MitigateIncidentRequest)">
            <summary>
            Create MitigateIncidentResponse message based on the corresponding MitigateIncidentRequest object
            </summary>
            <param name="response">The type of the response, handled or updated</param>
            <param name="request">The corresponding MitigateIncidentRequest object</param>
            <returns>The returned MitigateIncidentResponse object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.Create(System.Int64,Microsoft.Online.RecoveryService.Contract.IncidentResponse,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.AzureAd.Icm.Types.AlertSourceIncident,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport)">
            <summary>
            Create MitigateIncident response message body
            </summary>
            <param name="incidentId">The IcM incident id</param>
            <param name="response">The type of the response</param>
            <param name="resource">The ResourceIdentifierobject </param>
            <param name="alertSource">The AlertSourceIncident object</param>
            <param name="failingReports">The list of failing WatchdogReport objects</param>
            <param name="computedReport">The computed WatchdogReport object</param>
            <returns>The returned MitigateIncidentResponse object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.#ctor(System.Int64,Microsoft.Online.RecoveryService.Contract.IncidentResponse,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.AzureAd.Icm.Types.AlertSourceIncident,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport)">
            <summary>
            The private constructor
            </summary>
            <param name="incidentId">The IcM incident id</param>
            <param name="response">The type of the response</param>
            <param name="resource">The ResourceIdentifierobject </param>
            <param name="alertSource">The AlertSourceIncident object</param>
            <param name="failingReports">The list of failing WatchdogReport objects</param>
            <param name="computedReport">The computed WatchdogReport object</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.IncidentId">
            <summary>
            The IcM incident ID
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.Response">
            <summary>
            The type of the MitigateIncidentResponse; should be handled or update.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.Resource">
            <summary>
            The ResourceIdentifier object
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.AlertSource">
            <summary>
            The AlertSourceIncident object
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.FailingWatchdogReports">
            <summary>
            The listy of the failing WatchdogReport objects
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.ComputedWatchdogReport">
            <summary>
            The computed WatchdogReport object
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.MessageHeaderSize1">
            <summary>
            The fixed-size part of MitigateIncidentRequest message body.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.Serialize">
            <summary>
            Serialize the MitigateIncidentResponse object to binary blob.
            The format of the binary blob for the first iteration is
            
            00 UINT32 blobSize
            04 UINT16 headerSize
            06 UINT8  version
            07 UINT8  type (MitigateIncident)
            08 UINT8  ResponseType
            09 UINT64 IncidentId
            17 UINT32 offsetResourceIdentifier
            21 UINT32 sizeResourceIdentifier
            25 UINT32 offsetAlertSourceIncident
            29 UINT32 sizeAlertSourceIncident
            33 UINT32 offsetFailingWatchdogReportList
            37 UINT32 sizeFailingWatchdogReportList
            41 UINT32 offsetComputedWatchdogReport
            45 UINT32 sizeComputedWatchdogReport
            49
            
            [serialized ResourceIdentifier]
            [serialized AlertSourceIncident]
            [serialized FailingWatchdogReportList]
            [serialized ComputedWatchdogReport]
            
            </summary>
            <returns>The binary blob for the serialized MitigateIncidentResponse object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.MitigateIncidentResponse.Deserialize(System.Byte[])">
            <summary>
            Deserialize the binary blob to the MitigateIncidentResponse object.
            </summary>
            <param name="blob">The input binary blob</param>
            <returns>The MitigateIncidentResponse object</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.DmsConfiguration">
            <summary>
            DMS configuration
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.DmsConfiguration.DateTimeFormat">
            <summary>
            Format for LastUpdateTime DateTime
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.DmsConfiguration.LastUpdateTime">
            <summary>
            Gets or sets the last update time in UTC.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.DmsConfiguration.LastUpdatedBy">
            <summary>
            Gets or sets the user who made the last update.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.DmsConfiguration.TenantName">
            <summary>
            Gets or sets the name of the tenant for which this configuration belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.DmsConfiguration.Id">
            <summary>
            Gets the Identifier field to determine the type of the model uniquely
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.DmsConfiguration.CheckIfSimilarConfig(Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase)">
            <summary>
            Does a deep comparison of the <paramref name="other"/> config with the current instance
            </summary>
            <param name="other">The instance to compare with. If the instance are not of the same type this returns false</param>
            <returns>A value indicating whether the two instances are same</returns>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.IncidentEnrichmentSettingsSerializer.DateTimeFormat">
            <summary>
            Format for LastUpdateTime DateTime
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.EnrichmentSettingsDocDbFormat">
            <summary>
            Class to wrap <see cref="T:AlertEnrichment.Contracts.EnrichmentSettings"/> object to a format which can be stored in document db
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.EnrichmentSettingsDocDbFormat.Id">
            <summary>
            Gets the Identifier field to determine the type of the model uniquely
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.EnrichmentSettingsDocDbFormat.TenantName">
            <summary>
            Gets or sets the name of the tenant for which this configuration belongs to
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.EnrichmentSettingsDocDbFormat.CheckIfSimilarConfig(Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase)">
            <summary>
            Does a deep comparison of the <paramref name="other"/> config with the current instance
            </summary>
            <param name="other">The instance to compare with. If the instance are not of the same type this returns false</param>
            <returns>A value indicating whether the two instances are same</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule">
            <summary>
            The representation a recovery rule configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule.Name">
            <summary>
            Gets or sets rule name
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule.Description">
            <summary>
            Gets or sets rule description
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule.Condition">
            <summary>
            Gets or sets rule execution condition
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule.Priority">
            <summary>
            Gets or sets a value indicating rules precedence among competing rules.
            Used when more than one rule is triggered (condition met) for at the same time
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule.Actions">
            <summary>
            Gets or sets ordered list of actions to be executed when rule evaluation triggers 
            the rule(condition met)
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule.HealthyAction">
            <summary>
            Gets or sets the action to be executed when the incident matching this recovery rule becomes healthy
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule.Mode">
            <summary>
            Gets or sets the mode of the recovery rule.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule.SuccessSeverity">
            <summary>
            Gets or sets the severity of the incident for successful action execution.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule.ShouldNotLockResource">
            <summary>
            Gets or sets the value indicating whether to lock the resource or not. False means lock the resource.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule.FromXml(System.Xml.XmlNode,System.Collections.Generic.IList{Microsoft.Online.RecoveryService.Contract.Models.ActionConfiguration})">
            <summary>
            Returns a <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule"/> object from a xml node
            </summary>
            <param name="ruleNode">XmlNode that contains rule configuration</param>
            <param name="repairActionsForHealthType">List of repair actions for this tenant</param>
            <returns>The <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule"/> object. </returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule.ToXml(Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule,System.Collections.Generic.IList{Microsoft.Online.RecoveryService.Contract.Models.ActionConfiguration},System.Xml.XmlDocument)">
            <summary>
            Converts a <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule"/> object to XML
            </summary>
            <param name="recoveryRule">The <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule"/> object.</param>
            <param name="document">The parent XML node where the recovery rule is to be added.</param>
            <param name="repairActionList">List of repair actions available to use in the <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule"/> object</param>
            <returns>The <see cref="T:System.Xml.XmlNode"/> containing the xml data of the recovery rule.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRuleList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRuleList.FromXml(System.Xml.XmlNode,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.Models.ActionConfiguration})">
            <summary>
            Gets the recovery rule list from the resource type node.
            </summary>
            <param name="resourceTypeNode">the resource-type node</param>
            <returns>list of recovery rules</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRuleList.UpdateXml(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule},System.Collections.Generic.IList{Microsoft.Online.RecoveryService.Contract.Models.ActionConfiguration},System.Xml.XmlElement)">
            <summary>
            Converts the list of <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule"/> objects to XML and adds them to the resource type element.
            </summary>
            <param name="recoveryRules">A list of <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule"/> objects to be added.</param>
            <param name="repairActionList">List of repair actions available to use in the <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRule"/> list</param>
            <param name="resourceTypeElement">The resource type Xml element where the recovery rules will be added.</param>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRuleMode">
            <summary>
            Recovery rule mode specified in the resource configuration
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRuleMode.NoExecute">
            <summary>
            No execution of action.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRuleMode.ExecuteAndNotify">
            <summary>
            Recovery action is executed and incident is submitted for notification after action completion.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.RecoveryRuleMode.ExecuteAndResolve">
            <summary>
            Recovery action is executed and incident is resolved automatically if resource become 
            healthy because of the action.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.ServiceBusConfiguration">
            <summary>
            The representation of service bus configuration in <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.ServiceBusConfiguration.DateTimeFormat">
            <summary>
            Format for LastUpdateTime DateTime
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ServiceBusConfiguration.ConnectionString">
            <summary>
            Gets or sets service bus connection string.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ServiceBusConfiguration.Id">
            <summary>
            Gets the Identifier field to determine the type of the model uniquely
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ServiceBusConfiguration.TenantName">
            <summary>
            Gets or sets the name of the tenant for which this configuration belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ServiceBusConfiguration.LastUpdateTime">
            <summary>
            Gets or sets the last update time in UTC.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ServiceBusConfiguration.LastUpdatedBy">
            <summary>
            Gets or sets the user who made the last update.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ServiceBusConfiguration.FromXml(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Gets the service bus account information from xml node
            </summary>
            <param name="configNode">the configuration xml node</param>
            <param name="trimSecrets">A value indicating if secrets are to be trimmed.</param>
            <returns>service bus configuration object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ServiceBusConfiguration.CheckIfSimilarConfig(Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase)">
            <summary>
            Does a deep comparison of the <paramref name="other"/> config with the current instance
            </summary>
            <param name="other">The instance to compare with. If the instance are not of the same type this returns false</param>
            <returns>A value indicating whether the two instances are same</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfigDocumentDbPayload">
            <summary>
            Generic class to hold data to be used as payload to upload to document db
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfigDocumentDbPayload.Row">
            <summary>
            Collection of health configurations
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase">
            <summary>
            Base class for any configuration that needs to be stored in document db
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase.TenantName">
            <summary>
            Gets or sets the name of the tenant for which this configuration belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase.Id">
            <summary>
            Gets the Identifier field to determine the type of the model uniquely
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase.GetConfigIdentifier">
            <summary>
            Gets the <see cref="T:Microsoft.Online.Metrics.Common.ConfigurationStore.DocumentDbRowKey"/> to uniquely identify a row in document db
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase.CheckIfSimilarConfig(Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase)">
            <summary>
            Does a deep comparison of the <paramref name="other"/> config with the current instance
            </summary>
            <param name="other">The instance to compare with. If the instance are not of the same type this returns false</param>
            <returns>A value indicating whether the two instances are same</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.WatchdogConfiguration">
            <summary>
            The representation of all the configuration needed for an action.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.WatchdogConfiguration.EmitAvailabilityEvents">
            <summary>
            A value indicating if availability events are to be emitted.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.WatchdogConfiguration.DefaultExpirationTimeInSeconds">
            <summary>
            The default report expiration time of the watchdog.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.WatchdogConfiguration.WatchdogName">
            <summary>
            The name of the watchdog.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.AnyFailingWatchdogHealthExpression">
            <summary>
            The representation of all the health expression expression.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.AnyFailingWatchdogHealthExpression.#ctor">
            <summary>
            Initializes a new instance of the AnyFailingWatchdogHealthExpression class
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.AnyFailingWatchdogHealthExpression.Severity">
            <summary>
            Gets or sets the severity
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.AnyFailingWatchdogHealthExpression.ForceSeverity">
            <summary>
            Gets or sets a value indicating whether to force the severity
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.AnyFailingWatchdogHealthExpression.FromXml(System.Xml.XmlNode)">
            <summary>
            Gets the expression object from xml node
            </summary>
            <param name="expressionNode">the expression xml node</param>
            <returns>expression object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.AnyFailingWatchdogHealthExpression.ToXml(Microsoft.Online.RecoveryService.Contract.Models.AnyFailingWatchdogHealthExpression,System.Xml.XmlDocument)">
            <summary>
            Gets the xml node from the expression object
            </summary>
            <param name="expression">the expression object</param>
            <param name="document">XML document</param>
            <returns>the expression xml node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.AnyFailingWatchdogHealthExpression.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.AnyFailingWatchdogHealthExpression.Equals(Microsoft.Online.RecoveryService.Contract.Models.AnyFailingWatchdogHealthExpression)">
            <summary>
            Finds if the two expressions are equal or not.
            </summary>
            <param name="other">The config to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.CustomHealthExpression">
            <summary>
            The representation of all the health expression expression.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.CustomHealthExpression.#ctor">
            <summary>
            Initializes a new instance of the CustomHealthExpression class
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.CustomHealthExpression.Expression">
            <summary>
            Gets or sets the java-script expression
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.CustomHealthExpression.FromXml(System.Xml.XmlNode)">
            <summary>
            Gets the expression object from xml node
            </summary>
            <param name="expressionNode">the expression xml node</param>
            <returns>expression object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.CustomHealthExpression.ToXml(Microsoft.Online.RecoveryService.Contract.Models.CustomHealthExpression,System.Xml.XmlDocument)">
            <summary>
            Gets the xml node from the expression object
            </summary>
            <param name="expression">the expression object</param>
            <param name="document">XML document</param>
            <returns>the expression xml node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.CustomHealthExpression.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.CustomHealthExpression.Equals(Microsoft.Online.RecoveryService.Contract.Models.CustomHealthExpression)">
            <summary>
            Finds if the two expressions are equal or not.
            </summary>
            <param name="other">The config to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.HealthExpressionType">
            <summary>
            Various types of health expression
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.HealthExpressionType.Invalid">
            <summary>
            Invalid type
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.HealthExpressionType.UnhealthyChildren">
            <summary>
            The unhealthy children expression.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.HealthExpressionType.AnyFailingWatchdog">
            <summary>
            Any failing watchdog expression
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.HealthExpressionType.SuppressIncident">
            <summary>
            Suppress incident expression
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.HealthExpressionType.Custom">
            <summary>
            The custom expression.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.HealthExpression">
            <summary>
            The base health expression class
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.HealthExpression.Type">
            <summary>
            Gets or sets the expression type
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.HealthExpression.SuppressIncident">
            <summary>
            Gets or sets a value indicating whether to suppress the incident
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.HealthExpression.FromXml(System.Xml.XmlNode)">
            <summary>
            Gets the health expression
            </summary>
            <param name="expressionNode">the expression node</param>
            <returns>the expression object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.HealthExpression.ToXml(Microsoft.Online.RecoveryService.Contract.Models.HealthExpression,System.Xml.XmlDocument)">
            <summary>
            Gets the xml node from the expression object
            </summary>
            <param name="expression">the expression object</param>
            <param name="document">XML document</param>
            <returns>the expression xml node</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.HealthExpressionList">
            <summary>
            The health expression list class
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.HealthExpressionList.FromXml(System.Xml.XmlNode)">
            <summary>
            Gets the list of health expressions from xml
            </summary>
            <param name="configNode">the config node</param>
            <returns>the list of expressions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.HealthExpressionList.UpdateXml(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.Models.HealthExpression},System.Xml.XmlNode)">
            <summary>
            Updates the parent xml node with the list of health expressions
            </summary>
            <param name="expressionList">the list of expressions</param>
            <param name="parentNode">the parent node which will be updated</param>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration">
            <summary>
            The representation of all the configuration needed for an incident
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration.Name">
            <summary>
            Gets or sets the name of the view tree.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration.NodeNames">
            <summary>Gets or sets the list of tree node names</summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration.FromXml(System.Xml.XmlNode)">
            <summary>
            Gets the health view tree configuration object from xml node
            </summary>
            <param name="configNode">the configuration xml node</param>
            <returns>incident configuration object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration.ToXml(Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration,System.Xml.XmlDocument)">
            <summary>
            Gets the xml node from the health view tree configuration object
            </summary>
            <param name="config">the health view tree configuration</param>
            <param name="document">XML document</param>
            <returns>the configuration xml node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration.Equals(Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration)">
            <summary>
            Finds if the two configurations are equal or not.
            </summary>
            <param name="other">The config to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration.FullyMatches(Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration)">
            <summary>
            Finds if the two configurations are fully match each other. If any of node
            has null or empty name, consider as not match
            </summary>
            <param name="other">The config to be compared with.</param>
            <returns>True, if they have the same field values and also the same node sequence, false 
            otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration.ResourceHierarchyCollides(Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration,System.String@)">
            <summary>
            Finds if the two configurations can cause resource collisions during health visualization of 2 unrelated types
            </summary>
            <param name="other">The config to be compared with.</param>
            <param name="forkNode">The parent of the colliding levels</param>
            <returns>True, if there can be collision at any level of the trees, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration.ValidParentChildTrees(Microsoft.Online.RecoveryService.Contract.Models.HealthViewTreeConfiguration)">
            <summary>
            Checks if the two tree configurations are valid parent child configs. 
            </summary>
            <param name="parent">The parent config</param>
            <returns>True, if valid false otherwise</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.IcmConfiguration">
            <summary>
            The representation of ICM configuration in <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.IcmConfiguration.DateTimeFormat">
            <summary>
            Format for LastUpdateTime DateTime
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IcmConfiguration.Url">
            <summary>
            Gets or sets ICM url
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IcmConfiguration.ConnectorId">
            <summary>
            Gets or sets ICM connector id
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IcmConfiguration.Id">
            <summary>
            Gets the Identifier field to determine the type of the model uniquely
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IcmConfiguration.TenantName">
            <summary>
            Gets or sets the name of the tenant for which this configuration belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IcmConfiguration.LastUpdateTime">
            <summary>
            Gets or sets the last update time in UTC.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IcmConfiguration.LastUpdatedBy">
            <summary>
            Gets or sets the user who made the last update.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.IcmConfiguration.IsMockIcmConfiguration">
            <summary>
            Determine whether the IcmConfiguration is for mock IcM client; that is, if the ConnectorId is zero GUID.
            </summary>
            <returns>whether the IcmConfiguration is for mock IcM client</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.IcmConfiguration.FromXml(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the tenant settings from xml node
            </summary>
            <param name="configNode">the configuration xml node</param>
            <returns>incident configuration object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.IcmConfiguration.CheckIfSimilarConfig(Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase)">
            <summary>
            Does a deep comparison of the <paramref name="other"/> config with the current instance
            </summary>
            <param name="other">The instance to compare with. If the instance are not of the same type this returns false</param>
            <returns>A value indicating whether the two instances are same</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration">
            <summary>
            The representation of all the configuration needed for an incident
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.Environment">
            <summary>Gets or sets the environment component of the incident location</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.DataCenter">
            <summary>Gets or sets the data center component of the incident location</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.DeviceGroup">
            <summary>Gets or sets the device type component of the incident location</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.DeviceName">
            <summary>Gets or sets the device name component of the incident location</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.ServiceInstanceId">
            <summary>Gets or sets the service instance name component of the incident location</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.RoutingId">
            <summary>Gets or sets the routing ID of the incident</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.DiagnosticsLink">
            <summary>Gets or sets the diagnostics link in the incident</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.ChangesLink">
            <summary>Gets or sets the changes link in the incident</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.MetricsViewComponent">
            <summary>Gets or sets Metrics view component</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.MetricsViewName">
            <summary>Gets or sets Metrics view name</summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.FromXml(System.Xml.XmlNode,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the incident configuration object from xml node
            </summary>
            <param name="configNode">the configuration xml node</param>
            <param name="identifierProperties">The identifier properties for the resource type.</param>
            <returns>incident configuration object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.ToXml(Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration,System.Xml.XmlDocument)">
            <summary>
            Gets the xml node from the incident configuration object
            </summary>
            <param name="config">the incident configuration</param>
            <param name="document">XML document</param>
            <returns>the configuration xml node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration.Equals(Microsoft.Online.RecoveryService.Contract.Models.IncidentConfiguration)">
            <summary>
            Finds if the two configurations are equal or not.
            </summary>
            <param name="other">The config to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.RecoveryActionList">
            <summary>
            The base health expression class
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.RecoveryActionList.FromXml(System.Xml.XmlNode)">
            <summary>
            Gets the list of action configurations from xml
            </summary>
            <param name="configNode">the config node</param>
            <returns>the list of expressions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.RecoveryActionList.UpdateXml(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.Models.ActionConfiguration},System.Xml.XmlNode)">
            <summary>
            Updates the parent xml node with the list of action configurations
            </summary>
            <param name="actionList">Action configuration list</param>
            <param name="parentNode">the parent node which will be updated</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.RecoveryActionList.GetDistinctActionEnvironments(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.Models.ActionConfiguration})">
            <summary>
            Creates a distinct list of environments referenced on a list of <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.ActionConfiguration"/>
            </summary>
            <param name="actionList">List of <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.ActionConfiguration"/> objects</param>
            <returns>A distinct list of environments referenced on a list of <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.ActionConfiguration"/></returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration">
            <summary>
            The representation of all the configuration needed for an incident
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.DefaultSuccessTimeout">
            <summary>
            Default success timeout
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.DefaultFailureTimeout">
            <summary>
            Default failure timeout
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.DefaultCapacity">
            <summary>
            Default capacity
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.DateTimeFormat">
            <summary>
            Format for LastUpdateTime DateTime
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the TopologyConfiguration class
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.Version">
            <summary>
            Gets or sets the version of this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.Name">
            <summary>
            Gets or sets the name of the resource type
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.ArmResourceIdDimension">
            <summary>
            The dimension name from ResourceIdentifier instance that the corresponding dimension value would be the armResourceId/InternalId used in the RHC events.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.ArmResourceIdDimensions">
            <summary>
            The list of dimension names from ResourceIdentifier instance which together will represent armResourceId/InternalId in the RHC events.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.ArmResourceLocationDimension">
            <summary>
            The dimension name from ResourceIdentifier instance that the corresponding dimension value would be the armResourceLocation used in the RHC events.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.ArmResourceType">
            <summary>
            The ARM resource type of the ResourceIdentifier instance.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.OnboardActivityLog">
            <summary>
            Whether the RHC onboard resource type should also onboard Azure activity log.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.ActivityLogSubmitDelay">
            <summary>
            The delay when process to submit to Azure activity log.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.ActivityLogSubscriptionList">
            <summary>
            The common-separated string that represents the list of subscriptions that should be excluded from onboard the Azure activity log.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.StaleArtifactDeletionTimeInHours">
            <summary>
            The StaleArtifactDeletionTimeInHours setting
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.IdentifierProperties">
            <summary>
            Gets or sets the list of identifier properties which together constitutes the identity of 
            the resources of this type.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.MetadataProperties">
            <summary>
            Gets or sets the list of properties in resource metadata which can be used in the visualization
            hierarchy of the resource.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.ViewConfiguration">
            <summary>
            Gets or sets the health view tree configuration
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.ViewConfigurations">
            <summary>
            Gets or sets the list of health view tree configurations
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.IncidentConfiguration">
            <summary>
            Gets or sets the incident configuration
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.HealthExpressions">
            <summary>
            Gets or sets the list of health expressions
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.WatchdogConfigurations">
            <summary>
            The instance containing watchdog related configurations.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.RecoveryRules">
            <summary>
            Gets or sets the list of recovery rules.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.ActionConfigurations">
            <summary>
            Gets or sets the list of action configurations
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.TopologyConfiguration">
            <summary>
            Gets or sets the topology configuration of the resource type which contains information about
            the parent of this resource type.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.SuccessTimeout">
            <summary>
            Gets or sets the success timeout in secs
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.FailureTimeout">
            <summary>
            Gets or sets the success timeout in secs
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.Capacity">
            <summary>
            Gets or sets the capacity which is the fraction of capacity among resources that has to be online
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.ShouldEmitHealthMetrics">
            <summary>
            Gets or sets a value indicating whether to emit health metrics for this resource type or not.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.DefaultReportExpirationTimeInSeconds">
            <summary>
            The default report expiration time of the watchdog.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.IsSystemResource">
            <summary>
            Is this a system resource.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.LastUpdateTime">
            <summary>
            Gets or sets the last update time in UTC.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.LastUpdatedBy">
            <summary>
            Gets or sets the user who made the last update.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.TenantName">
            <summary>
            Gets or sets the name of the tenant for which this configuration belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.Id">
            <summary>
            Gets the Identifier field to determine the type of the model uniquely
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.FromXml(System.Xml.XmlNode,System.String,Microsoft.Online.RecoveryService.Contract.Models.TenantSettings)">
            <summary>
            Gets the resource type configuration object from xml
            </summary>
            <param name="configNode">configuration node</param>
            <param name="tenantSettings">tenant settings</param>
            <returns>resource type configuration object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.GetWatchdogConfigList(Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration,System.Xml.XmlNode)">
            <summary>
            Populate the watchog configuration list.
            </summary>
            <param name="config">The resource type config.</param>
            <param name="configNode">The resource type node.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.UpdateXml(Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration,System.Xml.XmlNode,Microsoft.Online.RecoveryService.Contract.ConfigurationSerializationSettings)">
            <summary>
            Updates the xml with the config.
            </summary>
            <param name="config">the incident configuration</param>
            <param name="parentNode">the parent node which will be updated with this configuration</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.UpdateWatchdogConfigList(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.Models.WatchdogConfiguration},System.Xml.XmlElement)">
            <summary>
            Update the watchdog config list
            </summary>
            <param name="watchdogConfigurations"></param>
            <param name="resourceTypeElement"></param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.Equals(Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration)">
            <summary>
            Finds if the two configurations are equal or not.
            </summary>
            <param name="other">The config to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.CheckIfSimilarConfig(Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase)">
            <summary>
            Checks whether a <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration"/> is similar to a <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase"/>
            </summary>
            <param name="other"><see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase"/> to check for equlity with. If <paramref name="other"/> is not an instance of
            <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration"/> this method will return false</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.Serialize">
            <summary>
            Serialize the watchdog report
            </summary>
            <returns>the serialized bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration.Deserialize(System.Byte[])">
            <summary>
            Deserializes the watchdog report
            </summary>
            <param name="blob">blob containing serialized bytes</param>
            <returns>the deserialized report</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration">
            <summary>
            The representation of all the configuration needed for resource type topology information.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.ParentResourceType">
            <summary>Gets or sets the parent resource type</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.ParentResourceTypes">
            <summary>Gets or sets the list of parent resource types</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.DmsTargetResourceType">
            <summary>Gets or sets the DMS target resource type</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.DmsTargetResourceName">
            <summary>Gets or sets the DMS target resource name</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.LogChildMetrics">
            <summary>Gets or set a value indicating whether to log child resource count metrics for this resource type</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.LeverageParentHealthStatus">
            <summary>
            Gets/sets whether to leverage parent resource health status if the resource health status is not available (not added yet or expired).
            If set, the parent resource type that would be used to walk the topology for health status.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.GetParentResourceTypes">
            <summary>
            Gets the list of parent resource types
            </summary>
            <returns>list of parent resource-types</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.FromXml(System.Xml.XmlNode)">
            <summary>
            Gets the resource type topology configuration object from xml node
            </summary>
            <param name="configNode">the configuration xml node</param>
            <returns>incident configuration object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.ToXml(Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration,System.Xml.XmlDocument)">
            <summary>
            Gets the xml node from the resource type topology configuration object
            </summary>
            <param name="config">the resource type topology configuration</param>
            <param name="document">XML document</param>
            <returns>the configuration xml node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.Equals(Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration)">
            <summary>
            Finds if the two configurations are equal or not.
            </summary>
            <param name="other">The config to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.ReplaceWithMetadata(Microsoft.Online.RecoveryService.Contract.MetadataCollection)">
            <summary>
            Replaces all the values of the template with values from metadata.
            </summary>
            <param name="metadata">The metadata using which the template has to be filled in.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeTopologyConfiguration.ConstructTargetResourceIdentifier(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.MetadataCollection)">
            <summary>
            Constructs the target identifier of the resource which is passed to DMS workflow
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource</param>
            <returns>target resource identifier constructed from templates.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.SuppressIncidentHealthExpression">
            <summary>
            The representation of all the health expression expression.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.SuppressIncidentHealthExpression.#ctor">
            <summary>
            Initializes a new instance of the SuppressIncidentHealthExpression class
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.SuppressIncidentHealthExpression.FromXml(System.Xml.XmlNode)">
            <summary>
            Gets the expression object from xml node
            </summary>
            <param name="expressionNode">the expression xml node</param>
            <returns>expression object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.SuppressIncidentHealthExpression.ToXml(Microsoft.Online.RecoveryService.Contract.Models.SuppressIncidentHealthExpression,System.Xml.XmlDocument)">
            <summary>
            Gets the xml node from the expression object
            </summary>
            <param name="expression">the expression object</param>
            <param name="document">the xml document</param>
            <returns>the expression xml node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.SuppressIncidentHealthExpression.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.SuppressIncidentHealthExpression.Equals(Microsoft.Online.RecoveryService.Contract.Models.SuppressIncidentHealthExpression)">
            <summary>
            Finds if the two expressions are equal or not.
            </summary>
            <param name="other">The config to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings">
            <summary>
            The representation of the tenant settings.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings.Environment">
            <summary>Gets or sets the environment</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings.RoutingId">
            <summary>Gets or sets the routing id</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings.MaximumResourcesCount">
            <summary>
            Gets or sets the maximum allowed resources for this account.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings.ViewModelPartitionCount">
            <summary>
            Gets or sets the maximum number of view model partition count.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings.UpdateIncidentOnSeverityChange">
            <summary>
            Gets or sets a value indicating whether to update incident on severity change or to create a new one.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings.UseHealthStore">
            <summary>
            Gets or sets a value indicating whether to use health store for reading history.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings.StaleArtifactDeletionTime">
            <summary>
            Gets or sets the time after which delete the stale artifacts (resource, watchdog, actions).
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings.Id">
            <summary>
            Gets the Identifier field to determine the type of the model uniquely
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings.TenantName">
            <summary>
            Gets or sets the name of the tenant for which this configuration belongs to
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings.FromXml(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the tenant settings from xml node
            </summary>
            <param name="configNode">the configuration xml node</param>
            <param name="tenant">the name of the tenant</param>
            <returns>incident configuration object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TenantSettings.CheckIfSimilarConfig(Microsoft.Online.RecoveryService.Contract.Models.TopologyDocDbModelBase)">
            <summary>
            Does a deep comparison of the <paramref name="other"/> config with the current instance
            </summary>
            <param name="other">The instance to compare with. If the instance are not of the same type this returns false</param>
            <returns>A value indicating whether the two instances are same</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration">
            <summary>
            The representation of configuration of topology.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.SystemResourceTypes">
            <summary>
            The system resource types used by the system.
            These resource types are automatically added to tenant configuration and is not editable or returned to the UI.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.MonitorSystemResourceType">
            <summary>
            Name of the monitor system resource type.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.RunnerInstanceSystemResourceType">
            <summary>
            Name of the RunnerInstance system resource type.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.IcmXmlElement">
            <summary>
            The name of the XML element that contains icm configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.ServiceBusXmlElement">
            <summary>
            The name of the XML element that contains icm configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.IncidentEnrichmentSettingsXmlElement">
            <summary>
            The name of the XML element that contains icm configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.SettingsXmlElement">
            <summary>
            The name of the XML element that contains tenant settings.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.DefaultIcmUrl">
            <summary>
            The default IcM prod url to be used when connector id is present, but url is not present.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.DefaultNamespace">
            <summary>
            The default namespace for extensibility.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.DefaultWorkerCount">
            <summary>
            The default number of workers.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.DefaultEnabledTopicLIst">
            <summary>
            The default list of enabled topics. 
            <remarks>This isn't used right now, there are only 2 fixed topics.</remarks>
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.VirtualQosSystemResourceType">
            <summary>
            Name of the virtual monitor in Qos system resource type.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.DateTimeFormat">
            <summary>
            Format for LastUpdateTime DateTime
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TopologyConfiguration class
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.TenantName">
            <summary>
            Gets or sets the name of the tenant for which this configuration belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.Version">
            <summary>
            Gets or sets the version of this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.TenantSettings">
            <summary>
            Gets or sets the tenant settings.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.ResourceTypeConfigurations">
            <summary>Gets or sets the name of the resource type</summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.IcmConfig">
            <summary>
            ICM configuration
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.DmsConfiguration">
            <summary>
            Gets or sets the Dms configuration
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.ServiceBusConfiguration">
            <summary>
            The service bus configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.IncidentEnrichmentSettings">
            <summary>The Incident Enrichment settings</summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.CreateInitialXmlDocument(System.Boolean)">
            <summary>
            Creates initial configuration xml for topology.
            </summary>
            <param name="createSystemResources">
            A flag indicating if system resources are to be added.
            </param>
            <returns>initial configuration xml</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.FromDocumentDbPayload(Microsoft.Online.RecoveryService.Contract.Models.TopologyConfigDocumentDbPayload)">
            <summary>
            Converts the <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfigDocumentDbPayload"/> payload to <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration"/>
            </summary>
            <param name="payload">The <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfigDocumentDbPayload"/> payload object to be converted to <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration"/></param>
            <returns>If the payload is empty returns null, else returns a <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration"/> object created from the payload</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.ToDocumentDbPayload(Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration)">
            <summary>
            Converts a topology config to <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfigDocumentDbPayload"/>
            </summary>
            <param name="config"><see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration"/> configuration to be converted to <see cref="T:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfigDocumentDbPayload"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.FromXml(System.Xml.XmlDocument,System.String,System.Boolean)">
            <summary>
            Gets the topology configuration from the xml document
            </summary>
            <param name="document">the xml document</param>
            <param name="tenant">the name of the tenant</param>
            <param name="trimSecrets">A value indicating if secrets are to be trimmed.</param>
            <returns>the configuration object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.ToXml(Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration,System.Xml.XmlDocument,System.Boolean,Microsoft.Online.RecoveryService.Contract.ConfigurationSerializationSettings)">
            <summary>
            Updates the xml document with the configuration object 
            </summary>
            <param name="config">The configuration object</param>
            <param name="document">The xml document</param>
            <param name="updateAdminSettings">A value indicating if the admin settings element is to be updated.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration.Equals(Microsoft.Online.RecoveryService.Contract.Models.TopologyConfiguration)">
            <summary>
            Finds if the two configurations are equal or not.
            </summary>
            <param name="other">The config to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition">
            <summary>
            The representation of unhealthy children expression condition.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.#ctor">
            <summary>
            Initializes a new instance of the UnhealthyChildrenExpressionCondition class
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.PercentageMin">
            <summary>
            Gets or sets the percentage min
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.PercentageMax">
            <summary>
            Gets or sets the percentage max
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.UnhealthyCountMin">
            <summary>
            Gets or sets the unhealthy child count min
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.UnhealthyCountMax">
            <summary>
            Gets or sets the unhealthy child count max
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.TotalCountMin">
            <summary>
            Gets or sets the total child count min
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.TotalCountMax">
            <summary>
            Gets or sets the total child count max
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.NumberInsteadOfPercentage">
            <summary>
            Gets or sets the type of condition = Percentage (or) Absolute Number
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.HealthStatus">
            <summary>
            Gets or sets the health status
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.Severity">
            <summary>
            Gets or sets the percentage max
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.SuppressIncident">
            <summary>
            Gets or sets a value indicating whether the incident should be suppressed or not.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.CreateIncidentAtChild">
            <summary>
            Gets or sets an Enum indicating which level to create or suppress incident at.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.ForceSeverity">
            <summary>
            Gets or sets a value indicating whether the severity specified in the condition should be forced
            or not.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.Annotation">
            <summary>
            Optional downtime/degraded annotations for RHC onboard resource types
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.IncidentTitle">
            <summary>
            Optional parameterized incident title
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.FromXml(System.Xml.XmlNode)">
            <summary>
            Gets the condition object from xml node
            </summary>
            <param name="conditionNode">the condition xml node</param>
            <returns>condition object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.ToXml(Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition,System.Xml.XmlDocument)">
            <summary>
            Gets the xml node from the condition object
            </summary>
            <param name="condition">the condition</param>
            <param name="document">the xml document</param>
            <returns>the condition xml node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.Equals(Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition)">
            <summary>
            Finds if the two configurations are equal or not.
            </summary>
            <param name="other">The config to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.Evaluate(System.Double,System.Int32,System.Int32)">
            <summary>
            Evaluate the condition based on unhealthy children percentage.
            </summary>
            <param name="unhealthyChildrenPercentage">the percentage of unhealthy children</param>
            <returns>true if condition evaluates to true. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.EnumToStringRhs(Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus)">
            <summary>
            Converts to string from the enumeration
            </summary>
            <param name="value">the value which will be converted to string</param>
            <returns>the resource health status string value</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenExpressionCondition.StringToEnumRhs(System.String)">
            <summary>
            Converts to enumeration from the string (Healthy/Degraded/Unhealthy).
            </summary>
            <param name="value">the value which will be converted to ENUM</param>
            <returns>the resource health status enumeration value</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenHealthExpression">
            <summary>
            The representation of all the health expression expression.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenHealthExpression.#ctor">
            <summary>
            Initializes a new instance of the UnhealthyChildrenHealthExpression class
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenHealthExpression.Conditions">
            <summary>
            Gets or sets the list of conditions for the health expression
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenHealthExpression.FromXml(System.Xml.XmlNode)">
            <summary>
            Gets the expression object from xml node
            </summary>
            <param name="expressionNode">the expression xml node</param>
            <returns>expression object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenHealthExpression.ToXml(Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenHealthExpression,System.Xml.XmlDocument)">
            <summary>
            Gets the xml node from the expression object
            </summary>
            <param name="expression">the expression</param>
            <param name="document">the xml document</param>
            <returns>the expression xml node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenHealthExpression.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenHealthExpression.Equals(Microsoft.Online.RecoveryService.Contract.Models.UnhealthyChildrenHealthExpression)">
            <summary>
            Finds if the two expressions are equal or not.
            </summary>
            <param name="other">The config to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.RecoveryClient">
            <summary>
            Recovery Client helper which sets up connection to ADROCS using certification authentication
            by using the certificate on the local machine in the "My" store. The client retries
            given the number of retries.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.connectionPool">
            <summary>
            The client connection pool stores created conntections
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.DefaultBatchSize">
            <summary>
            Default size of the batch
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.DefaultTotalSubItemBatchSize">
            <summary>
            Default size of the new batch API 
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.DefaultMaxConcurrencyLimit">
            <summary>
            Default max concurrency limit 
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.endpointAddress">
            <summary>
            The endpoint address object created using the recovery server uri
            and is used to create channel
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.binding">
            <summary>
            The binding to be used while creating the connection to recovery server
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.thumbprint">
            <summary>
            The thumbprint of the certificate to be used.
            Corresponding certificate needs to be installed on local machine's My store.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.retryCount">
            <summary>
            The number of retries to be done.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.retrySleepInterval">
            <summary>
            The number of seconds to sleep before every retry.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.maxNumberOfConnectionsInPool">
            <summary>
            The maximum number of recovery service client connections in client connection pool
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.numberOfConnectionsInPool">
            <summary>
            The current number of client connecions in the client connection pool
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.channelFactory">
            <summary>
            Instance to the channel factory which is used to create connection channels.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.batchSize">
            <summary>
            Size of the batch of reports submitted via this client. 
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.totalSubItemBatchSize">
            <summary>
            Total sub-items inside items of a given batch-reports submitted via this client where each batch-report
            contains multiple sub-items (single-report).
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.maxConcurrencyLimit">
            <summary>
            Max concurrency limit used while submitting batches of reports to health service
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryClient.disposed">
            <summary>
            <see langword="true"/> if the <see cref="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.Dispose"/> method has been invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.#ctor(System.String,System.String,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the RecoveryClient class.
            </summary>
            <param name="uri">The uri to connect to ADROCS recovery service</param>
            <param name="thumbprint">The thumbprint of the certificate to be used for the authentication 
            with ADROCS</param>
            <param name="retryCount">The number of retries to be used for the API calls.</param>
            <param name="retrySleepInterval">The number of seconds to sleep before every retry.</param>
            <param name="batchSize">the size of the batch submitted by this client</param>
            <param name="totalSubItemBatchSize">the size of the batch where each batch item has sub-items submitted by this client. 
            this will be used by the API which takes BatchWatchdogReport which contains multiple SingleWatchdogReport.</param>
            <param name="maxConcurrencyLimit">max number of report submissions to be run in parallel</param>
            <param name="maxConcurrentConnections">The maximum number of recovery service client connections in client connection pool</param>
            <param name="useCurrentUserStore">Whether to use LocalMachine or CurrentUser store for cert</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the RecoveryClient class.
            </summary>
            <param name="retryCount">The number of retries to be used for the API calls.</param>
            <param name="retrySleepInterval">The number of seconds to sleep before every retry.</param>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetClientFromPoolDelegate">
            <summary>
            Defines a delegate for methods that can be used to get a recovery client from
            client connection pool
            </summary>
            <returns>Instance of recovery service returned.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.RecoveryClient.ReturnClientToPoolDelegate">
            <summary>
            Defines a delegate for methods that can be used to return a recovery client back to pool.
            </summary>
            <param name="client">client to be returned back to pool</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetClientFromPoolMethod">
            <summary>
            Gets or sets the method that can be used to get Recovery Client.
            This is used for mocking in unit-testing.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.RecoveryClient.ReturnClientToPoolMethod">
            <summary>
            Gets or sets the method that can be used to return a recovery client back to pool.
            This is used for mocking in unit-testing.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.PreviewIncident(Microsoft.Online.RecoveryService.Contract.WatchdogReport,Microsoft.Online.Metrics.Common.EventConfiguration.MonitorConfiguration,Microsoft.Online.RecoveryService.Contract.Models.ResourceTypeConfiguration)">
            <summary>
            Generates a preview of the incident corresponding to the health report.
            </summary>
            <param name="report">the health report</param>
            <param name="monitorConfig">the associated monitor configuration</param>
            <param name="resourceTypeConfig">the associated resource type configuration</param>
            <returns>the incidents to be previewed</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.PreviewIncident(System.String,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Generates a preview of the incident corresponding to the health report.
            </summary>
            <param name="tenant">the tenant for which preview is generated</param>
            <param name="report">the health report</param>
            <param name="monitorConfig">the associated monitor configuration</param>
            <param name="resourceTypeConfig">the associated resource type configuration</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SubmitWatchdogHealthReport(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.IDictionary{System.String,System.Object},Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Submit watchdog report for resource health.
            </summary>
            <param name="watchdogName">name of the watchdog</param>
            <param name="watchdogType">type of the watchdog</param>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource which is serialization xml of 
            the dictionary of property and their values using DataSerializer.Serialize</param>
            <param name="status">status in the report.</param>
            <param name="actionParameters">parameters to the action which is serialization xml of 
            the dictionary of parameters and their values using DataSerializer.Serialize. Can be null.</param>
            <param name="message">message for human consumption</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SubmitWatchdogHealthReport(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.String,System.String)">
            <summary>
            Submit watchdog report for resource health.
            </summary>
            <param name="watchdogName">name of the watchdog</param>
            <param name="watchdogType">type of the watchdog</param>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource which is serialization xml of 
            the dictionary of property and their values using DataSerializer.Serialize</param>
            <param name="status">status in the report.</param>
            <param name="actionParameters">parameters to the action which is serialization xml of 
            the dictionary of parameters and their values using DataSerializer.Serialize. Can be null.</param>
            <param name="message">message for human consumption</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SubmitWatchdogHealthReport2(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.IDictionary{System.String,System.Object},Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Submit watchdog report for resource health.
            </summary>   
            <param name="watchdogName">name of the watchdog</param>
            <param name="watchdogType">type of the watchdog</param>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource which is the dictionary of property 
            and their values. For example, properties for resource of type RoleInstance can be
            Environment, Datacenter, Slice, Role, RoleInstance</param>
            <param name="status">status in the report.
            Must be an object of RecoveryHealthStatus, when healthType is ResourceHealthType.Recovery,
            and ScalingHealthStatus, when healthType is ResourceHealthType.Scaling</param>
            <param name="watchdogMetadata">metadata of the watchdog which is the dictionary of property and 
            their values using DataSerializer.Serialize. Can be null. For exampls, some properties are defined below.
             1) Severity (type: integer, sample value: 2, default value: 3)
             2) Category (type: string, sample value: "Availability", default value: "<see cref="F:Microsoft.Online.RecoveryService.Common.Constants.WatchdogCategoryDefaultValue"/>")
             3) Source (type: string, sample value: "AIMS", default value: "Unknown")
             4) ReportExpirationTime (type: integer, unit: seconds, sample value: 60, default value: 300)</param>
            <param name="message">message for human consumption</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SubmitWatchdogHealthReport2(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.String,System.String)">
            <summary>
            Submit watchdog report for resource health.
            </summary>
            <param name="watchdogName">name of the watchdog</param>
            <param name="watchdogType">type of the watchdog</param>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource which is serialization xml of 
            the dictionary of property and their values using DataSerializer.Serialize</param>
            <param name="status">status in the report.</param>
            <param name="watchdogMetadata">metadata of the watchdog which is serialization xml of 
            the dictionary of property and their values using DataSerializer.Serialize</param>
            <param name="message">message for human consumption</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SubmitBatchWatchdogHealthReports(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport})">
            <summary>
            Submit watchdog report for resource health in batch.
            </summary>
            <param name="watchdogReports">List of watchdog reports</param>
            <returns>List of watchdog report results for failing report submissions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SubmitSerializedWatchdogHealthReports(System.Byte[],System.Int32)">
            <summary>
            Batch submit WatchdogReport using proprietary binary schema to serialize/deserialize
            WatchdogReport (for input) and WatchdogReportResult (for output) lists.
            </summary>
            <param name="watchdogReportBlob">The serialized WatchdogReport list</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized WatchdogReport list</param>
            <returns>The serialized WatchdogReportResult list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SubmitSerializedWatchdogHealthReports2(System.IO.Stream)">
            <summary>
            Batch submit WatchdogReport using proprietary binary schema to serialize/deserialize
            WatchdogReport (for input) and WatchdogReportResult (for output) lists.
            This is mainly a server-side API so for the initial implementation the client-side will just throw
            NotImplementedException.
            </summary>
            <param name="watchdogReportBlob">The serialized WatchdogReport list</param>
            <returns>The serialized WatchdogReportResult list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.TransitionFromCriticalToProbationState(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Transition from critical state to probation state for a given resource with the retries specified.
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="message">message describing the reason for transition</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.StartProcessing(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Starts the processing of the unhealthy resource. This method is called as part of initialization
            when the service instance is transitioning from passive state to active state.
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetActionExecutionInformation(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Returns execution details for a anction of a resource type
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">name of the action</param>
            <returns>Action execution details</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.NotifyActionStart(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ActionType,System.String,System.Int32)">
            <summary>
            Notifies recovcery service on a started action execution
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">name of the action</param>
            <param name="workitemId">Id of the corresponding work item on WI management service</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.StartAction(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Starts an action on the resource.
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">name of the action</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetActionProgress(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Gets the list of progress messages of an action being executed
            </summary>
            <param name="resourceId">Resource id for which action is being executed</param>
            <param name="resourceHealthType">Resource health type</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">Name of the action</param>
            <returns>List of progress messages</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetActionOutput(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Gets the list of output messages of an action executed
            </summary>
            <param name="resourceId">Resource id for which action is being executed</param>
            <param name="resourceHealthType">Resource health type</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">Name of the action</param>
            <returns>List of output messages</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetActionStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Gets the status of action being executed
            </summary>
            <param name="resourceId">Resource id for which action is being executed</param>
            <param name="resourceHealthType">Resource health type</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">Name of the action</param>        
            <returns>Status of the action being executed</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetLastActionStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType)">
            <summary>
            Gets the status of latest action on the resource.
            </summary>
            <param name="resourceId">Resource id for which action is being executed</param>
            <param name="resourceHealthType">Resource health type</param>
            <returns>Status of the latest action</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetResourceOfflineStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Returns current offline status of the given resource.
            </summary>
            <param name="resourceId">id of the resource</param>        
            <returns>The offline status of the resource as Unknown, Online or Offline</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SetResourceOfflineStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceOfflineStatus)">
            <summary>
            Sets current offline status of the given resource.
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="status">The offline status of the resource as Unknown, Online or Offline</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SetResourceOfflineStatusInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceOfflineStatus)">
            <summary>
            Sets current offline status of the given resource which is not replicated to other DC.
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="status">The offline status of the resource as Unknown, Online or Offline</param>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.DeleteResourceAsync(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Delete the resource asynchronously.
            </summary>
            <param name="resourceId">id of the resource</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetHealthStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the health status of the resource
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>health status of the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetSerializedFailingWatchdogs(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of failing watchdogs for a given resource in serialized binary blob form
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>Serialized blob that represents the list of failing watchdogs for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetFailingWatchdogs(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of failing watchdogs for a given resource
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of failing watchogs for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetSerializedWatchdogReportsForTenant(System.String,System.Boolean)">
            <summary>
            Returns a list of watchdogs for tenant in serialized binary blob form
            </summary>
            <param name="tenant">The tenant name.</param>
            <param name="failing">watchdogs retured are failing or healthy</param>
            <returns>serialized blob for the list of watchdogs for tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetWatchdogReportsForTenant(System.String,System.Boolean)">
            <summary>
            Returns a list of watchdogs for tenant.
            </summary>
            <param name="tenant">The tenant name.</param>
            <param name="failing">when failing = true, returns watchdogs with  
            <see cref="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.IsNotHealthy" /></param>
            <returns>list of watchdogs for tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetHealthData(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets health data for a resource
            </summary>
            <param name="resourceId">resource id</param>
            <returns>health data for the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetHealthDataForTenant(System.String)">
            <summary>
            Gets health data for a resources of a tenant
            </summary>
            <param name="tenant">name of the tenant</param>
            <returns>health data for the resources of a tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.RestoreHealthHistory">
            <summary>
            Restore the resource history related data from persisted store.
            </summary>
            <returns>The async task.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetSerializedWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports (in serialized binary blob form) for a given resource, NOT including expired reports
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>The serialized blob that represents the list of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports for a given resource
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetBatchWatchdogReportsInternalAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier})">
            <summary>
            Gets list of watchdog reports for a given list of resources, NOT including expired reports
            </summary>
            <param name="resourceIds">list with resourceidentifiers</param>
            <returns>The serialized blob that represents the list of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetAllSerializedWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports (in serialized binary blob form) for a given resource including expired reports too.
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchdog reports for the given resource including expired reports too.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetBatchWatchdogReportsAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier})">
            <summary>
            Gets list of watchdog reports for the list of given resources
            </summary>
            <param name="resourceIds"></param>
            <returns>List of watchdog reports for the given resource. The WatchDogReport has the resourceIdentifier for which it is generated</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetSerializedBatchWatchdogReportsAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier})">
            <summary>
            Gets the serialized list of watchdog reports for the list of given resources. Use the <see cref="T:Microsoft.Online.RecoveryService.Contract.SerializationHelper"/> class to deserialize the result.
            </summary>
            <param name="resourceIds"></param>
            <returns>byte array which is serialized List of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetSerializedBatchWatchdogReportsInternalAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier})">
            <summary>
            Gets list of watchdog reports (in serialized binary blob form) for a given resource, NOT including expired reports
            </summary>
            <param name="resourceIds">id of the resource</param>
            <returns>The serialized blob that represents the list of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetAllWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports for a given resource including expried reports too
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchog reports for the given resource including expried reports too</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.AddResource(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Add a new resource 
            </summary>
            <param name="resourceId">resource id</param>
            <param name="resourceMetadata">resource metadata</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetIncidents(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the incidents on a resource
            </summary>
            <param name="resourceId">resource id</param>
            <returns>list of incidents</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetIncidentId(System.String,System.Guid)">
            <summary>
            Get the Icm incident id from incident source id.
            </summary>
            <param name="topologyName">The monitoringAccountName</param>
            <param name="incidentSourceId">The incident source id, which is a guid</param>
            <returns>The incident id</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.CreateTestIncident(System.String,System.String,System.String)">
            <summary>
            Create a new test incident for the tenant.
            </summary>
            <param name="tenant">
                The name of the tenant.
            </param>
            <param name="connectorId">
                The IcM connector Id.
            </param>
            <param name="icmUrl">
                The IcM endpoint Url.
            </param>
            <returns>
            A value indicating if the incident creation failed.
            </returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetResourceIdentifierWithDimensions(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the resource identifier with dimensions
            </summary>
            <param name="resourceId">the resource-id without dimensions</param>
            <returns>the resource-id with dimensions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetViewTree(System.String,System.String,System.String)">
            <summary>
            Gets view model tree for a resource. 
            This tree consist of resource itself, its ancestors, siblings and children
            </summary>
            <param name="tenant">tenant name</param>
            <param name="resourceType">type of the resource</param>
            <param name="resourceName">name of the resource</param>
            <returns>view model tree of the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetViewTreeForNodes(System.String,System.String[])">
            <summary>
            Gets common view model tree for a set of nodes
            This tree is a union of trees of individual nodes passed.
            </summary>
            <param name="tenant">tenant name</param>
            <param name="nodeIds">identifiers of the nodes</param>
            <returns>a view model tree of spanning all of the given nodes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetMatchingResources(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter})">
            <summary>
            Gets the resources which matches the filters and are from one from the specified resource-types (if specified).
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="resourceTypes">Optional. If specified, matching resource type should be one from this list.</param>
            <param name="resourceDimensionFilters">The resource dimension filters.</param>
            <returns>The list of matching resource-ids.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetFilteredViewTree(System.String,System.Nullable{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.String[],System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTree"/> from the Recovery Service which matches the specified filter(s)
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="healthStatus">Optional. If specified, specifies the health status of nodes to be returned.</param>
            <param name="dimensions">The resource dimensions.</param>
            <param name="nodeId">The nodeId if a lower level tree has to be fetched.</param>
            <param name="onlyDirectChildren">
                A value indicating whether only direct children are to be returned.
            </param>
            <returns>The <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTree"/> structure.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetViewTreeForTenant(System.String)">
            <summary>
            Gets common view model tree for tenant
            </summary>
            <param name="tenant">tenant name</param>
            <returns>a view model tree for a tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetChildrenInViewTree(System.String,System.String)">
            <summary>
            Gets children of a resource in view model tree
            </summary>
            <param name="tenant">tenant name</param>
            <param name="nodeId">id of the resource node</param>
            <returns>subtree containing list of children</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.DeleteNode(System.String,System.String)">
            <summary>
            Deletes resources in a given nodes hieracrhy
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="nodeId">id of the node to be deleted</param>
            <returns>true if deletion succeds, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetSuppressionState(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the suppression state of the resource
            </summary>
            <param name="resourceId">resource id</param>
            <returns>suppression state of the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.AddSuppressionRule(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},Microsoft.Online.RecoveryService.Contract.SuppressionMode,System.TimeSpan,System.String)">
            <summary>
            Adds a new suppression rule
            </summary>
            <param name="tenant">tenant name</param>
            <param name="resourceTypes">list of resource-types with which this rule is associated with. 
                null means resources of any type matching filters will be suppressed.</param>
            <param name="resourceDimensionFilters">list of dimension filters with which this rule is associated with. cannot be null or empty.</param>
            <param name="suppressionState">suppression state.</param>
            <param name="expirationTime">expiration time for suppression state for the node</param>
            <param name="alias">alias which is adding this suppression rule</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.RemoveSuppressionRule(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter})">
            <summary>
            Removes a new suppression rule
            </summary>
            <param name="tenant">tenant name</param>
            <param name="resourceTypes">list of resource-types with which this rule is associated with</param>
            <param name="resourceDimensionFilters">list of dimension filters with which this rule is associated with</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SetSuppressionState(System.String,System.String,Microsoft.Online.RecoveryService.Contract.SuppressionMode,System.TimeSpan)">
            <summary>
            Add a new suppression rule for a tenant
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="nodeId">id of the node to be deleted</param>
            <param name="suppressionState">suppression state for the node</param>
            <param name="expirationTime">expration time for suppression state for the node</param>
            <returns>View subtree after applying suppression state to the node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SetSuppressionStateForResource(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.SuppressionMode,System.TimeSpan)">
            <summary>
            Add a new suppression rule for a tenant for a resource
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="suppressionState">suppression state for the node</param>
            <param name="expirationTime">expration time for suppression state for the node</param>
            <returns>View subtree after applying suppression state to the node</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetSuppressionRulesForNodeId(System.String,System.String)">
            <summary>
            Gets the active suppression rules for the given node and tenant
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="nodeId">The node id.</param>
            <returns>List of the active <see cref="T:Microsoft.Online.RecoveryService.Contract.SuppressionRule"/> objects for the given nodeid. Returns null if node doesnt exist</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetSuppressionRules(System.String)">
            <summary>
            Gets all active suppression rules for a tenant
            </summary>
            <param name="tenantName">name of the tenant</param>
            <returns>List of the active <see cref="T:Microsoft.Online.RecoveryService.Contract.SuppressionRule"/> objects for the given tenant.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetAddedTopologyResources(System.String,System.Int64)">
            <summary>
            Returns resources that were added to the topology 
            </summary>
            <param name="partitionKey">recovery service partition key</param>
            <param name="sinceTime">return resources that were added after this time tick</param>
            <returns>list of resources</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetAllTenants">
            <summary>
            Get list of all tenants
            </summary>
            <returns>List of all tenants onboarded on ADROCS</returns>
            <remarks>reads and returns list of tenant from alltenantsgatewayconfig.xml</remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SubmitWatchdogHealthReportInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport})">
            <summary>
            Submit watchdog reports for resource health.
            </summary>
            <param name="watchdogReports">watchdog reports</param>
            <returns>Result for report submissions</returns>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system. Watchdogs 
            submitted externally using this method will be discarded and not be counted for health evaluation.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SubmitBatchWatchdogHealthReportInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport})">
            <summary>
            Submit batch watchdog reports for resource health.
            </summary>
            <param name="batchReports">batch watchdog reports</param>
            <returns>Result for report submissions</returns>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system. Watchdogs 
            submitted externally using this method will be discarded and not be counted for health evaluation.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SubmitSerializedWatchdogHealthReportInternal(System.Byte[],System.Int32)">
            <summary>
            Batch submit WatchdogReport using proprietary binary schema to serialize/deserialize
            WatchdogReport (for input) and WatchdogReportResult (for output) lists.
            </summary>
            <param name="watchdogReportBlob">The serialized WatchdogReport list</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized WatchdogReport list</param>
            <returns>The serialized WatchdogReportResult list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SubmitSerializedBatchWatchdogHealthReportInternal(System.Byte[])">
            <summary>
            API to submit serialized batch watchdog health reports (BatchWatchdogReport instances) for a given resource.
            </summary>
            <param name="batchReportBlob">serialized list of batch-watchdog reports (BatchWatchdogReport)</param>
            <returns>result for report submissions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.DeleteResourceInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Delete the resource asynchronously.
            </summary>
            <param name="resourceId">id of the resource</param>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.DeleteNodeInternal(System.String,System.String)">
            <summary>
            Deletes the node and its sub-resources.
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="nodeId">id of the node</param>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetResourceIdentifierProperties(System.String,System.String)">
            <summary>
            Gets identifier properties for a resource type in tenant configuration
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="resourceType">type of the resource</param>
            <returns>list of resource identifier properties</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetTopologyChildResources(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Gets child resources of a given resource from topology
            </summary>
            <param name="resourceId">resource id</param>
            <param name="childResourceType">type of the child resource</param>
            <returns>list of child resources</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetSerializedBatchTopologyChildResources(System.Byte[])">
            <summary>
            Serialized batch api to returns child resources of a resource
            </summary>
            <param name="resourceIdListBlob">blob containing resource-id's</param>
            <returns>blob containing list of child resources of each resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetSerializedBatchChildWatchdogSummaries(System.Byte[])">
            <summary>
            Serialized batch api to returns child watchdog summary for resources
            </summary>
            <param name="resourceIdListBlob">blob containing resource-id's</param>
            <returns>blob containing list of child watchdog summaries of each resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.IsTenantAtThrottleLimit(System.String)">
            <summary>
            Returns a value indicating whether the tenant should be throttled due to number of resources.
            </summary>
            <param name="tenant">The name of the tenant.</param>
            <returns>A value indicating whether the tenant should be throttled due to number of resources.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetChildWatchdogSummaryForResource(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Gets watchdog summary data a resource (union of all watdogs of its child resources)
            </summary>
            <param name="resourceId">resource identifier</param>
            <param name="childResourceType">type of the child resource</param>
            <returns>list of watchdog summary data</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.AddTopologyResource(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Add a resource to topology
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetResourceHealthReport(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the resource based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="resourceId">the id of the resource</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetChildResourceHealthReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the child resources based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="resourceId">the id of the resource</param>
            <param name="childResourceType">the resource type of the children</param>
            <param name="healthStatusFilters">the health status filter.</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.AddorUpdateHealthAnnotation(Microsoft.Online.RecoveryService.Contract.HealthAnnotation)">
            <summary>
            Add or Update the <paramref name="annotation"/>.
            </summary>
            <param name="annotation">
                The health annotation to be added.
            </param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.AddorUpdateHealthAnnotationBulk(System.Collections.Generic.IEnumerable{Microsoft.Online.RecoveryService.Contract.HealthAnnotation})">
            <summary>
            Add or Update the <paramref name="annotations"/>.
            </summary>
            <param name="annotations">
                The health annotations to be added.
            </param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.AddorUpdateSerializedHealthAnnotations(System.Byte[],System.Int32)">
            <summary>
            Batch submit HealthAnnotation using proprietary binary schema to serialize/deserialize
            HealthAnnotation (for input) list.
            </summary>
            <param name="annotationsBlob">The serialized <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/> list.</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized HealthAnnotation list</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.AddorUpdateSerializedHealthAnnotations2(System.IO.Stream)">
            <summary>
            Batch submit HealthAnnotation using proprietary binary schema to serialize/deserialize
            HealthAnnotation (for input) list.
            </summary>
            <param name="annotationsBlob">The serialized <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/> list.</param>
            <remarks>This version of submit API allows the client to just post bytes in http post content. This is 
            efficient than the other API where byte[] is serialized into base64 string over the network.</remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetHealthAnnotations(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.DateTime,System.DateTime)">
            <summary>
            Get the <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/> for the <paramref name="resourceId"/>.
            </summary>
            <param name="resourceId">The resource Id to fetch annotations for.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns>The list of <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/>.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetHealthAnnotationsForWatchdog(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.DateTime,System.DateTime)">
            <summary>
            Get the <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/> for the <paramref name="resourceId"/>.
            </summary>
            <param name="resourceId">The resource Id to fetch annotations for.</param>
            <param name="watchdogName">The name of the watchdog.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns>The list of <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/>.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetBatchResourceHealthReports(System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the resource based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="tenant">the tenant of the resources</param>
            <param name="resourceIds">the list of the resources</param>
            <param name="healthStatusFilters">the health status filter. if specified, only resources which matches this filter are returned.</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the list of resource health reports</returns>
            <remarks>there is max limit of 100 resources.</remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetResourceHealthHistory(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the resource normalized and aggregated 
            over various watchdog results for <paramref name="resourceId"/>.
            </summary>
            <param name="resourceId">The resource Id.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="normalized">Whether to return normalized or raw history</param>
            <returns>The normalized health history of the resource ordered from the start to end minute.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetBatchResourceHistory(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the resources normalized and aggregated 
            over various watchdog results for <paramref name="resourceIds"/>.
            </summary>
            <param name="resourceIds">The resource Id.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">Whether to return normalized or raw history</param>
            <returns>The normalized health history of the resource ordered from the start to end minute.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetBatchResourceHistoryInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the resources normalized and aggregated 
            over various watchdog results for <paramref name="resourceIds"/>.
            </summary>
            <param name="resourceIds">The resource Id.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">Whether to return normalized or raw history</param>
            <returns>The normalized health history of the resource ordered from the start to end minute.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetBatchWatchdogHistory(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceWatchdogPair},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Gets the history of the watchdogs in the given time range.
            </summary>
            <param name="resourceWatchdogPairs">The resource watchdog.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">A value indicating if only transitions are to be retrieved..</param>
            <returns>The history of the watchdog in the given time range.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetBatchWatchdogHistoryInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceWatchdogPair},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Gets the history of the watchdogs in the given time range.
            </summary>
            <param name="resourceWatchdogPairs">The resource watchdog.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">A value indicating if only transitions are to be retrieved..</param>
            <returns>The history of the watchdog in the given time range.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetBatchWatchdogHealthHistory(System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the watchdogs matching specified filters on each resource in the results.
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="resourceIds">The list of resource Ids.</param>
            <param name="watchdogFilters">The list of watchdog filters. 
            only return watchdog histories if the watchdog metadata matches all the filters.
            null means to return all watchdog histories.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="normalized">Normalized vs raw history</param>
            <returns>The health history of the watchdogs matching filters (both health status filter/watchdog filters) per resource 
            ordered from the start to end minute.</returns>
            <returns>There is max limit of 100 resources.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.RecoveryClient.InternalRoutingFunc`1">
            <summary>Supporting obsolete routing function</summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.InvokeFallback``1(Microsoft.Online.RecoveryService.Contract.RecoveryClient.InternalRoutingFunc{``0})">
            <summary>Supporting obsolete routing function</summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetResourceHealthReportInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the resource based on watchdogs matching the filters since the time specified.
            This is internal-only variation of GetResourceHealthReport.
            </summary>
            <param name="resourceId">the id of the resource</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
                used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
                Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetBatchResourceHealthReportsInternal(System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health reports of the resources based on watchdogs matching the filters since the time specified.
            This is internal-only variation of GetResourceHealthReport.
            </summary>
            <param name="tenant">the tenant of the resources</param>
            <param name="resourceIds">the list of the resources</param>
            <param name="healthStatusFilters">the health status filter</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
                used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
                Any report before that time will be considered stale.</param>
            <returns>the list of resource health reports</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetChildResourceHealthReportsInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the child resources based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="resourceId">the id of the resource</param>
            <param name="childResourceType">the resource type of the children</param>
            <param name="healthStatusFilters">the health status filter.</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetBatchWatchdogHealthHistoryInternal(System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the watchdogs matching specified filters on each resource in the results.
            This is internal-only variation of GetBatchWatchdogHealthHistory.
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="resourceIds">The list of resource Ids.</param>
            <param name="watchdogFilters">The list of watchdog filters. 
                only return watchdog histories if the watchdog metadata matches all the filters.
                null means to return all watchdog histories.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="normalized">Normalized vs raw history</param>
            <returns>The health history of the watchdogs matching filters (both health status filter/watchdog filters) per resource 
            ordered from the start to end minute.</returns>
            <returns>There is max limit of 100 resources.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetWatchdogReportsInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports for a given resource
            This is internal-only variation of GetWatchdogReports
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetSerializedWatchdogReportsInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports (in serialized binary blob form) for a given resource, NOT including expired reports
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>The serialized blob that represents the list of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetHealthDataInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets health data for a resource
            This is internal-only variation of GetHealthData
            </summary>
            <param name="resourceId">resource id</param>
            <returns>health data for the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetIncidentsInternal(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the incidents on a resource.
            This is internal-only variation of GetIncidents
            </summary>
            <param name="resourceId">resource id</param>
            <returns>list of incidents</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetViewTreeInternal(System.String,System.String,System.String)">
            <summary>
            Gets view model tree for a resource. This tree consist of resource itself, its ancestors, siblings and children
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="tenant">tenant name</param>
            <param name="resourceType">type of the resource</param>
            <param name="resourceName">name of the resource</param>
            <returns>view model tree of the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetViewTreeForNodesInternal(System.String,System.String[])">
            <summary>
            Gets common view model tree for a set of nodes. This tree is a union of trees of individual nodes passed.
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="tenant">tenant name</param>
            <param name="nodeIds">identifiers of the nodes</param>
            <returns>a view model tree of spanning all of the given nodes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetMatchingResourcesInternal(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter})">
            <summary>
            Gets the resources which matches the filters and are from one from the specified resource-types (if specified).
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="resourceTypes">Optional. If specified, matching resource type should be one from this list.</param>
            <param name="resourceDimensionFilters">The resource dimension filters.</param>
            <returns>The list of matching resource-ids.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetFilteredViewTreeInternal(System.String,System.Nullable{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.String[],System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTree"/> from the Recovery Service which matches the specified filter(s)
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="tenantName">The tenant name.</param>
            <param name="healthStatus">Optional. If specified, specifies the health status of nodes to be returned.</param>
            <param name="dimensions">The resource dimensions.</param>
            <param name="nodeId">The nodeId if a lower level tree has to be fetched.</param>
            <param name="onlyDirectChildren">
            A value indicating whether only direct children are to be returned.
            </param>
            <returns>The <see cref="T:Microsoft.Online.RecoveryService.Contract.ViewTree"/> structure.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetViewTreeForTenantInternal(System.String)">
            <summary>
            Gets common view model tree for tenant
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="tenant">tenant name</param>
            <returns>a view model tree for a tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetChildrenInViewTreeInternal(System.String,System.String)">
            <summary>
            Gets children of a resource in view model tree
            This is internal-only variation of GetSerializedWatchdogReports
            </summary>
            <param name="tenant">tenant name</param>
            <param name="nodeId">id of the node</param>
            <returns>sub-tree containing list of children</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetMaxNumberOfDaysForHistory">
            <summary>
            Get the property for the maximum number of days of history data that the health system would keep.
            Currently resource health check will keep maximum 90 days of history/transition/annotation data.
            </summary>
            <returns>The maximum number of days of history data that the health system would keep.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetResourceHealth(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource})">
            <summary>
            Returns the current health data for a list of resources
            </summary>
            <param name="armResourceIds">The list of queried resources.</param>
            <returns>The list of the current health status of the resources in the input list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetHistoricalHealth(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.Int32)">
            <summary>
            Returns the transitions in resource health for last n days for the resource with given arm id.
            </summary>
            <param name="armResourceIds">The list of ArmResourceIds for the queried resource</param>
            <param name="lastNDays">Query the health status of the resource for the given days where the value of lastNDays should be betweeb 0 and MaxDaysForHistory</param>
            <returns>Transitions that the resource went in chronologically sorted order</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetHistoricalEvents(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.DateTime,System.DateTime)">
            <summary>
            Returns the list of all donwtime annotations between startTime and endTime
            This is capped to maximum of 1000 values
            </summary>
            <param name="armResourceIds">List of arm Ids of resources</param>
            <param name="startTime">startTime for querying the annotation</param>
            <param name="endTime">EndTime for querying the annotation</param>
            <returns>Collection of health events reported between startTime and endTime</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetHistoricalHealthInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.Int32)">
            <summary>
            Returns the transitions in resource health for last n days for the resource with given arm id.
            </summary>
            <param name="armResourceIds">The ArmResourceId for the queried resource</param>
            <param name="lastNDays">Query the health status of the resource for the given days where the value of lastNDays should be betweeb 0 and MaxDaysForHistory</param>
            <returns>Transitions that the resource went in chronologically sorted order</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetLastNHealthData(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.Int32)">
            <summary>
            Returns the last N transitions of the resource. Data older than MaxDaysForHistory days will be ignored
            </summary>
            <param name="armResourceIds">The list of ArmResourceIds for the queried resource</param>
            <param name="lastNTransitions">Max number of transition data returned</param>
            <returns>List of at most the last N transitions in chronologically sorted order, if possible</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetLastNHealthDataInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.Int32)">
            <summary>
            Returns the last N transitions of the resource. Data older than MaxDaysForHistory days will be ignored
            </summary>
            <param name="armResourceIds">The ArmResourceId for the queried resource</param>
            <param name="lastNTransitions">Max number of transition data returned</param>
            <returns>List of at most the last N transitions in chronologically sorted order, if possible</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetChildren(Microsoft.Online.RecoveryService.Contract.ArmResource)">
             <summary>
             Return the immediate child resources of the given parent resource. 
             A common scenario for this api would where a customer queries for the health of his cloud service, the expected result from RHC is of form:
                 {  
                     ResourceId : "R1"
                     ResourceState : "Degraded", 
                     ChildResourceStates :
                     {
                          [ { ResourceId : "R2", ResourceState: Up, ChildResourceStates: {}}, {{ ResourceId : "R3", ResourceState: Up, ChildResourceStates: {}}]
                     }
                 } 
            
             To achieve this RHC would need to query the hierarchy first from Health Service and then query for the health for each node in the hierarchy independently.
             </summary>
             <param name="armResourceId"></param>
             <returns>The list of immediate child resources; return null if the input resource is a leaft resource (that is, without child resources).</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.Dispose">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.Dispose(System.Boolean)">
            <summary>
            Releases resources held by this <see cref="T:System.Object"/>.
            </summary>
            <param name="disposing">
            Indicates whether this method is being invoked by <see cref="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.Dispose"/>
            (<see langword="true"/>) or a destructor (<see langword="false"/>).
            </param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.BatchAndSubmitReports(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},System.Func{System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},System.Threading.Tasks.Task{System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReportResult}}},System.String)">
            <summary>
            Split the reports in small batches and submit each batch serially.
            </summary>
            <param name="watchdogReports">list of watchdog reports</param>
            <param name="batchMethod">the batch method to call for each batch submission</param>
            <param name="batchMethodName">the name of batch method</param>
            <returns>List of watchdog report results for failing report submissions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SingleSubmitBatchReports(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},System.Func{System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},System.Threading.Tasks.Task{System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReportResult}}},System.String)">
            <summary>
            Submits a single batch of reports.
            </summary>
            <param name="watchdogReports">list of watchdog reports</param>
            <param name="batchMethod">the batch method to call for each batch submission</param>
            <param name="batchMethodName">the name of batch method</param>
            <returns>List of watchdog report results for failing report submissions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.BatchAndSubmitReports(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport},System.Func{System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport},System.Threading.Tasks.Task{System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReportResult}}},System.String)">
            <summary>
            Split the reports in small batches and submit the batches bounded by concurrency limit.
            </summary>
            <param name="batchReports">list of watchdog reports</param>
            <param name="batchMethod">the batch method to call for each batch submission</param>
            <param name="batchMethodName">the name of batch method</param>
            <returns>List of watchdog report results for failing report submissions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.SingleSubmitBatchReports(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport},System.Func{System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport},System.Threading.Tasks.Task{System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReportResult}}},System.String)">
            <summary>
            Submits one batch of reports to health service.
            </summary>
            <param name="batchReports">list of watchdog reports</param>
            <param name="batchMethod">the batch method to call for each batch submission</param>
            <param name="batchMethodName">the name of batch method</param>
            <returns>List of watchdog report results for failing report submissions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.GetRecoveryClient">
            <summary>
            Gets a <see cref="T:Microsoft.Online.RecoveryService.Contract.IRecoveryClient"/> instance to utilize to execute a request 
            </summary>
            <returns>
            A <see cref="T:Microsoft.Online.RecoveryService.Contract.IRecoveryClient"/> instance.
            </returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.ReleaseRecoveryClient(Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient)">
            <summary>
            Return the instance of the IRecoveryClient back to the pool.
            </summary>
            <param name="recoveryClient">The recovery client to release.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.CreateRecoveryClient">
            <summary>
            Create client for the recovery service. It reuses the channel if not faulted.
            </summary>
            <returns>An client which can be used to communicate with the recovery service.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.CallRecoveryActionWithRetry(System.Func{Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient,System.Threading.Tasks.Task})">
            <summary>
            Calls the given method as a recovery action. This means that we make 
            sure only genuine exceptions are retried.
            </summary>
            <param name="method">The method called on the recovery client.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryClient.CallRecoveryFunctionWithRetry``1(System.Func{Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClient,System.Threading.Tasks.Task{``0}},System.Func{Microsoft.Online.RecoveryService.Contract.IRecoveryServiceExternalClientObsolete,``0})">
            <summary>
            Calls the given method as a recovery action. This means that we make 
            sure only genuine exceptions are retried.
            </summary>
            <typeparam name="TResult">Return type of the action</typeparam>
            <param name="method">The method called on the recovery client.</param>
            <param name="fallbackMethod">The fallback method for older clients</param>
            <returns>Returned value from action execution</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.RecoveryExceptionHelper">
            <summary>
            Extension methods for exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryExceptionHelper.IsRetryableRecoveryException(System.Exception)">
            <summary>
            Indicates whether the exception thrown by recovery service is retryable.
            </summary>
            <param name="ex">Exception to check</param>
            <returns>True if the web service call should be retried. False otherwise.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFaultReason">
            <summary>
            Reason for the <see cref="T:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFault"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFaultReason.InvalidReport">
            <summary>
            Invalid report submitted.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFaultReason.InvalidResourceIdentifier">
            <summary>
            Invalid Resource Identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFaultReason.NonPrimaryReplica">
            <summary>
            The replica is no longer the primary.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFaultReason.TransientError">
            <summary>
            The server encountered a transient error which may be addressed by issuing a retry.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFaultReason.InternalError">
            <summary>
            An internal error occurred.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFaultReason.InvalidAction">
            <summary>
            Invalid Action Name.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFaultReason.InvalidBatchRequest">
            <summary>
            Invalid batch request.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFaultReason.ObjectNotFound">
            <summary>
            Object not found.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFault">
            <summary>
            The fault contract for recovery server.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFault.#ctor(Microsoft.Online.RecoveryService.Contract.RecoveryServiceFaultReason,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFault"/> class.
            </summary>
            <param name="serverFaultReason">The reason for the fault.</param>
            <param name="canRetry">
            <see langword="true"/> if clients can issue a retry to attempt to recover from the fault, 
            <see langword="false"/> otherwise.
            </param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFault.ServerFaultReason">
            <summary>
            Gets or sets the value indicating the reason for the fault.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.RecoveryServiceFault.CanRetry">
            <summary>
            Gets or sets a value indicating whether the operation can be retried.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IRecoveryService">
            <summary>
            Interface of recovery server
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.PreviewIncident(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Generates a preview of the incident corresponding to the health report.
            </summary>
            <param name="report">the health report</param>
            <param name="monitorConfig">the associated monitor configuration</param>
            <param name="resourceTypeConfig">the associated resource type configuration</param>
            <returns>the incidents to be previewed</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.SubmitWatchdogHealthReport(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.String,System.String)">
            <summary>
            Submit watchdog report for resource health.
            </summary>
            <param name="watchdogName">name of the watchdog</param>
            <param name="watchdogType">type of the watchdog</param>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource which is serialization xml of 
                the dictionary of property and their values using DataSerializer.Serialize</param>
            <param name="status">status in the report.</param>
            <param name="actionParameters">parameters to the action which is serialization xml of 
                the dictionary of parameters and their values using DataSerializer.Serialize. Can be null.</param>
            <param name="message">message for human consumption</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.TransitionFromCriticalToProbationState(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Transition from critical state to probation state for a given resource.
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="message">message describing the reason for transition</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.StartProcessing(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Starts the processing of the unhealthy resource. This method is called as part of initialization
            when the service instance is transitioning from passive state to active state.
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.StartProcessingSerialized(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,System.Byte[])">
            <summary>
            Starts the processing of the unhealthy resource. This method is called as part of initialization
            when the service instance is transitioning from passive state to active state.
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceIdBlob">serialized id of the resource</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetActionExecutionInformation(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Returns execution details for an action of a resource type
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">name of the action</param>
            <returns>Action execution details</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.StartAction(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Starts an action on the resource.
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">name of the action</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.NotifyActionStart(Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ActionType,System.String,System.Int32)">
            <summary>
            Notifies recovery service on a started action execution
            </summary>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">name of the action</param>
            <param name="workitemId">Id of the corresponding work item on WI management service</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetActionProgress(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Gets the list of progress messages of an action being executed
            </summary>
            <param name="resourceId">Resource id for which action is being executed</param>
            <param name="resourceHealthType">Resource health type</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">Name of the action</param>        
            <returns>List of progress messages</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetActionOutput(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Gets the list of output messages of an action being executed
            </summary>
            <param name="resourceId">Resource id for which action is being executed</param>
            <param name="resourceHealthType">Resource health type</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">Name of the action</param>        
            <returns>List of progress messages</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetActionStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ActionType,System.String)">
            <summary>
            Gets the list of progress messages of an action being executed
            </summary>
            <param name="resourceId">Resource id for which action is being executed</param>
            <param name="resourceHealthType">Resource health type</param>
            <param name="actionType">type of the action</param>
            <param name="actionName">Name of the action</param>
            <returns>List of progress messages</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetLastActionStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceHealthType)">
            <summary>
            Returns execution details for latest action
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="healthType">health type of the resource</param>
            <returns>Action execution details</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.SubmitWatchdogHealthReport2(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.String,System.String)">
            <summary>
            Submit watchdog report for resource health.
            </summary>
            <param name="watchdogName">name of the watchdog</param>
            <param name="watchdogType">type of the watchdog</param>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource which is the dictionary of property 
            and their values. For example, properties for resource of type RoleInstance can be
            Environment, Datacenter, Slice, Role, RoleInstance</param>
            <param name="status">status in the report.
            Must be an object of RecoveryHealthStatus, when healthType is ResourceHealthType.Recovery,
            and ScalingHealthStatus, when healthType is ResourceHealthType.Scaling</param>
            <param name="watchdogMetadata">metadata of the watchdog which is the dictionary of property and 
            their values using DataSerializer.Serialize. Can be null. For example, some properties are defined below.
             1) Severity (type: integer, sample value: 2, default value: 3)
             2) Category (type: string, sample value: "Availability", default value: "<see cref="F:Microsoft.Online.RecoveryService.Common.Constants.WatchdogCategoryDefaultValue"/>")
             3) Source (type: string, sample value: "AIMS", default value: "Unknown")
             4) ReportExpirationTime (type: integer, unit: seconds, sample value: 60, default value: 300)</param>
            <param name="message">message for human consumption</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetResourceOfflineStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Returns current offline status of the given resource.
            </summary>
            <param name="resourceId">id of the resource</param>        
            <returns>The offline status of the resource as Unknown, Online or Offline</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.SetResourceOfflineStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceOfflineStatus)">
            <summary>
            Sets current offline status of the given resource.
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="status">The offline status of the resource as Unknown, Online or Offline</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.SubmitBatchWatchdogHealthReports(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport})">
            <summary>
            Submit watchdog report for resource health in batch.
            </summary>
            <param name="watchdogReports">List of watchdog reports</param>
            <returns>List of watchdog report results for failing report submissions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.DeleteResourceAsync(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Deletes the resource asynchronously.
            </summary>
            <param name="resourceId">id of the resource</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetHealthStatus(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the health status of the resource
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>health status of the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetFailingWatchdogs(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of failing watchdogs for a given resource
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of failing watchdogs for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetSerializedBatchFailingWatchdogs(System.Byte[])">
            <summary>
            Batch API to gets the list of failing watchdogs for multiple resources
            </summary>
            <param name="resourceIdListBlob">blob containing list of resources</param>
            <returns>blob containing list of failing watchdogs per resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetSerializedBatchFailingOrExpiredWatchdogs(System.Byte[])">
            <summary>
            Batch API to gets the list of failing or expired watchdogs for multiple resources
            </summary>
            <param name="resourceIdListBlob">blob containing list of resources</param>
            <returns>blob containing list of failing watchdogs per resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetWatchdogReportsForTenant(System.String,System.Boolean)">
            <summary>
            Returns a list of watchdogs for tenant.
            </summary>
            <param name="tenant">The tenant name.</param>
            <param name="failing">watchdogs retured are failing or healthy</param>
            <returns>list of watchdogs for tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetHealthData(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets health data for a resource
            </summary>
            <param name="resourceId">resource id</param>
            <returns>health data for the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetHealthDataForTenant(System.String)">
            <summary>
            Gets health data for resources of a tenant
            </summary>
            <param name="tenant">tenant name</param>
            <returns>health data for the resources of a tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.RestoreHealthHistory">
            <summary>
            Restore the resource history related data from persisted store.
            </summary>
            <returns>The async task.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetSerializedHealthDataForTenant(System.String)">
            <summary>
            Gets serialized health data for resources of a tenant
            </summary>
            <param name="tenant">tenant name</param>
            <returns>serialized health data for the resources of a tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetSerializedChangedHealthDataForTenant(System.String,System.Nullable{System.DateTime})">
            <summary>
            Gets serialized health data for resources of a tenant which changed 
            </summary>
            <param name="tenant">tenant name</param>
            <param name="since">the resources which changed since this time</param>
            <returns>serialized health data for the resources which changed since the specified time.
            Consists of both the resource which changed as well as resource which are marked for delete.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetSerializedBatchHealthStatus(System.Byte[])">
            <summary>
            Gets serialized health status for resources
            </summary>
            <param name="resourceIdListBlob">blob containing list of resource-id's</param>
            <returns>serialized health status for the resources</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetBatchWatchdogReportsAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier})">
            <summary>
            Gets list of watchdog reports for the list of given resources
            </summary>
            <param name="resourceIds"></param>
            <returns>List of watchdog reports for the given watchdog. The WatchDogReport has the resourceIdentifier for which it is generated</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetSerializedBatchWatchdogReportsAsync(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier})">
            <summary>
            Gets list of watchdog reports for the list of given resources
            </summary>
            <param name="resourceIds"></param>
            <returns>List of watchdog reports for the given watchdog. The WatchDogReport has the resourceIdentifier for which it is generated</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports for a given resource, NOT including expired reports
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetBatchResourceHistory(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the resources normalized and aggregated 
            over various watchdog results for <paramref name="resourceIds"/>.
            </summary>
            <param name="resourceIds">The resource Id.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">Whether to return normalized or raw history</param>
            <returns>The normalized health history of the resource ordered from the start to end minute.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetBatchResourceHistoryV2(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the resources normalized and aggregated 
            over various watchdog results for <paramref name="resourceIds"/>.
            </summary>
            <param name="resourceIds">The resource Id.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">Whether to return normalized or raw history</param>
            <returns>The normalized health history of the resource ordered from the start to end minute.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetBatchWatchdogHistory(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceWatchdogPair},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Gets the history of the watchdogs in the given time range.
            </summary>
            <param name="resourceWatchdogPairs">The resource watchdog.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">A value indicating if only transitions are to be retrieved..</param>
            <returns>The history of the watchdog in the given time range.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetBatchWatchdogHistoryV2(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceWatchdogPair},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Gets the history of the watchdogs in the given time range.
            </summary>
            <param name="resourceWatchdogPairs">The resource watchdog.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="transitionsOnly">A value indicating if only transitions are to be retrieved..</param>
            <returns>The history of the watchdog in the given time range.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetAllWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports for a given resource including expired reports too.
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchdog reports for the given resource including expired reports too.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.AddResource(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Add a new resource 
            </summary>
            <param name="resourceId">resource id</param>
            <param name="resourceMetadata">resource metadata</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.SubmitWatchdogHealthReportInternal(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport})">
            <summary>
            Submit watchdog reports for resource health.
            </summary>
            <param name="reports">watchdog reports</param>
            <returns>Result for report submissions</returns>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system. Watchdogs 
            submitted externally using this method will be discarded and not be counted for health evaluation.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetIncidents(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the incidents on a resource
            </summary>
            <param name="resourceId">resource id</param>
            <returns>list of incidents</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.CreateTestIncident(System.String,System.String,System.String)">
            <summary>
            Create a new test incident for the tenant.
            </summary>
            <param name="tenant">
                The name of the tenant.
            </param>
            <param name="connectorId">
                The IcM connector Id.
            </param>
            <param name="icmUrl">
                The IcM endpoint Url.
            </param>
            <returns>
            A value indicating if the incident creation failed.
            </returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetSuppressionState(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets the suppression state of the resource
            </summary>
            <param name="resourceId">resource id</param>
            <returns>suppression state of the resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetSerializedBatchSupressionState(System.Byte[])">
            <summary>
            Gets serialized suppression state for resources
            </summary>
            <param name="resourceIdListBlob">blob containing list of resource-id's</param>
            <returns>serialized suppression state for the resources. It is in same order as input.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetResourceIdentifierProperties(System.String,System.String)">
            <summary>
            Gets identifier properties for a resource type in tenant configuration
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="resourceType">type of the resource</param>
            <returns>list of resource identifier properties</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.SubmitSerializedWatchdogHealthReports(System.Byte[],System.Int32)">
            <summary>
            Batch submit WatchdogReport using proprietary binary schema to serialize/deserialize
            WatchdogReport (for input) and WatchdogReportResult (for output) lists.
            </summary>
            <param name="watchdogReportBlob">The serialized WatchdogReport list</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized WatchdogReport list</param>
            <returns>The serialized WatchdogReportResult list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.SubmitSerializedBatchWatchdogHealthReports(System.Byte[])">
            <summary>
            Batch submit WatchdogReport using proprietary binary schema to serialize/deserialize
            BatchWatchdogReport (for input) and WatchdogReportResult (for output) lists.
            </summary>
            <param name="batchReportBlob">The serialized BatchWatchdogReport list</param>
            <returns>The serialized WatchdogReportResult list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.SubmitSerializedWatchdogHealthReportInternal(System.Byte[],System.Int32)">
            <summary>
            Submit watchdog reports for resource health. This is the variation that uses proprietary binary schema
            for serialization/deserialization.
            </summary>
            <param name="reports">watchdog reports</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized WatchdogReport list</param>
            <returns>The serialized WatchdogReportResult list</returns>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system. Watchdogs 
            submitted externally using this method will be discarded and not be counted for health evaluation.
            </remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.ExplicitCreateIncidents(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.IncidentSourceIdentifier},System.Boolean)">
            <summary>
            Whether to explicitly create incidents on this list of incidentSourceIdentifiers,
            with the specified state
            </summary>
            <param name="incidentSourceIdentifiers">List of Incident Source Identifiers</param>
            <param name="state">Whether to explicitly create incidents or not</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.SubmitSerializedBatchWatchdogHealthReportInternal(System.Byte[])">
            <summary>
            API to submit serialized batch watchdog health reports (BatchWatchdogReport instances) for a given resource.
            </summary>
            <param name="batchReportBlob">serialized list of batch-watchdog reports (BatchWatchdogReport)</param>
            <returns>result for report submissions</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetSerializedFailingWatchdogs(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of failing watchdogs for a given resource in serialized binary blob form
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>Serialized blob that represents the list of failing watchdogs for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetSerializedWatchdogReportsForTenant(System.String,System.Boolean)">
            <summary>
            Returns a list of watchdogs for tenant in serialized binary blob form
            </summary>
            <param name="tenant">The tenant name.</param>
            <param name="failing">watchdogs retured are failing or healthy</param>
            <returns>serialized blob for the list of watchdogs for tenant</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetSerializedWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports (in serialized binary blob form) for a given resource, NOT including expired reports
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>The serialized blob that represents the list of watchdog reports for the given resource</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetAllSerializedWatchdogReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Gets list of watchdog reports (in serialized binary blob form) for a given resource including expired reports too.
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>List of watchdog reports for the given resource including expired reports too.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.IsIncidentPresent(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String)">
            <summary>
            Checks whether the incident is present or not on a given resource.
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="incidentSourceId">source id of the incident</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetResourceHealthReport(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the resource based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="resourceId">the id of the resource</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetBatchResourceHealthReports(System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the resource based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="tenant">the tenant of the resources</param>
            <param name="resourceIds">the list of the resources</param>
            <param name="healthStatusFilters">the health status filter. if specified, only resources which matches this filter are returned.</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the list of resource health reports</returns>
            <remarks>there is max limit of 100 resources.</remarks>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetChildResourceHealthReports(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.Nullable{System.DateTime})">
            <summary>
            Gets the health report of the child resources based on watchdogs matching the filters since the time specified.
            </summary>
            <param name="resourceId">the id of the resource</param>
            <param name="childResourceType">the resource type of the children</param>
            <param name="healthStatusFilters">the health status filter. if specified, only resources which matches this filter are returned.</param>
            <param name="watchdogFilters">the watchdog filters to filter the watchdogs whose reports will be 
            used to evaluate health status</param>
            <param name="since">the time after which the filtered watchdog reports will be considered. 
            Any report before that time will be considered stale.</param>
            <returns>the resource health report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.ClearRepairState(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Clears the repair state of the resource. This method should only be used in cases where repair state
            is not cleared automatically by the backend.
            </summary>
            <param name="resourceId">the id of the resource</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.AddorUpdateHealthAnnotation(Microsoft.Online.RecoveryService.Contract.HealthAnnotation)">
            <summary>
            Add or Update the <paramref name="annotation"/>.
            </summary>
            <param name="annotation">
            The health annotation to be added.
            </param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.AddorUpdateHealthAnnotationBulk(System.Collections.Generic.IEnumerable{Microsoft.Online.RecoveryService.Contract.HealthAnnotation})">
            <summary>
            Add or Update the <paramref name="annotations"/>.
            </summary>
            <param name="annotations">
            The health annotations to be added.
            </param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetHealthAnnotations(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.DateTime,System.DateTime)">
            <summary>
            Get the <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/> for the <paramref name="resourceId"/>.
            </summary>
            <param name="resourceId">The resource Id to fetch annotations for.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns>The list of <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/>.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetHealthAnnotationsForWatchdog(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.DateTime,System.DateTime)">
            <summary>
            Get the <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/> for the <paramref name="resourceId"/>.
            </summary>
            <param name="resourceId">The resource Id to fetch annotations for.</param>
            <param name="watchdogName">The name of the watchdog.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns>The list of <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/>.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetIncidentId(System.String,System.Guid)">
            <summary>
            Get the Icm incident id from incident source id.
            </summary>
            <param name="topologyName">The monitoringAccountName</param>
            <param name="incidentSourceId">The incident source id, which is a guid</param>
            <returns>The incident id</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetBatchWatchdogHealthHistory(System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.HealthFilter},System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the health history of the watchdogs matching specified filters on each resource in the results.
            </summary>
            <param name="tenant">name of the tenant</param>
            <param name="resourceIds">The list of resource Ids.</param>
            <param name="watchdogFilters">The list of watchdog filters. 
            only return watchdog histories if the watchdog metadata matches all the filters.
            null means to return all watchdog histories.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="normalized">Normalized vs raw history</param>
            <returns>The health history of the watchdogs matching filters (both health status filter/watchdog filters) per resource 
            ordered from the start to end minute.</returns>
            <returns>There is max limit of 100 resources.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.CreateIncidentResult(System.Guid,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.AzureAd.Icm.Types.IncidentAddUpdateResult)">
            <summary>
            Pass the create IcM incident result to recovery server.
            </summary>
            <param name="incidentId">The unique incident message id</param>
            <param name="resource">The ResourceIdentifier instance</param>
            <param name="result">The IcM create incident result</param>
            <returns>Whether the recovery server could corelate the create incident result to earlier request</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.IncidentResult(System.Guid,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.AzureAd.Icm.Types.IncidentAddUpdateResult)">
            <summary>
            Pass the IcM incident operation result to recovery server.
            </summary>
            <param name="incidentId">The unique CorrelationId between the actor caller and the RecoveryServer callee</param>
            <param name="resource">The ResourceIdentifier instance</param>
            <param name="result">The IcM incident result</param>
            <returns>Whether the recovery server could corelate the incident result to earlier request</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.ReportIncidentResult(System.Guid,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.AzureAd.Icm.Types.IncidentAddUpdateResult,System.String)">
            <summary>
            Pass the IcM incident operation result to recovery server.
            </summary>
            <param name="incidentId">The unique CorrelationId between the actor caller and the RecoveryServer callee</param>
            <param name="resource">The ResourceIdentifier instance</param>
            <param name="result">The IcM incident result</param>
            <param name="alternativeAlertId">The alternative alert id returned from the customer through CreateIncidentResponse message</param>
            <returns>Whether the recovery server could corelate the incident result to earlier request</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetMaxNumberOfDaysForHistory">
            <summary>
            Get the property for the maximum number of days of history data that the health system would keep.
            Currently resource health check will keep maximum 90 days of history/transition/annotation data.
            </summary>
            <returns>The maximum number of days of history data that the health system would keep.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetResourceHealth(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource})">
            <summary>
            Returns the current health data for a list of resources
            </summary>
            <param name="armResourceIds">The list of queried resources.</param>
            <returns>The list of the current health status of the resources in the input list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetHistoricalHealth(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.Int32)">
            <summary>
            Returns the transitions in resource health for last n days for the resource with given arm id.
            </summary>
            <param name="armResourceIds">The list of ArmResourceIds for the queried resource</param>
            <param name="lastNDays">Query the health status of the resource for the given days where the value of lastNDays should be betweeb 0 and MaxDaysForHistory</param>
            <returns>Transitions that the resource went in chronologically sorted order</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetHistoricalEvents(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.DateTime,System.DateTime)">
            <summary>
            Returns the list of all donwtime annotations between startTime and endTime
            This is capped to maximum of 1000 values
            </summary>
            <param name="armResourceIds">List of arm Ids of resources</param>
            <param name="startTime">startTime for querying the annotation</param>
            <param name="endTime">EndTime for querying the annotation</param>
            <returns>Collection of health events reported between startTime and endTime</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetLastNHealthData(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ArmResource},System.Int32)">
            <summary>
            Returns the last N transitions of the resource. Data older than MaxDaysForHistory days will be ignored
            </summary>
            <param name="armResourceIds">The list of ArmResourceIds for the queried resource</param>
            <param name="lastNTransitions">Max number of transition data returned</param>
            <returns>List of at most the last N transitions in chronologically sorted order, if possible</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryService.GetChildren(Microsoft.Online.RecoveryService.Contract.ArmResource)">
             <summary>
             Return the immediate child resources of the given parent resource. 
             A common scenario for this api would where a customer queries for the health of his cloud service, the expected result from RHC is of form:
                 {  
                     ResourceId : "R1"
                     ResourceState : "Degraded", 
                     ChildResourceStates :
                     {
                          [ { ResourceId : "R2", ResourceState: Up, ChildResourceStates: {}}, {{ ResourceId : "R3", ResourceState: Up, ChildResourceStates: {}}]
                     }
                 } 
            
             To achieve this RHC would need to query the hierarchy first from Health Service and then query for the health for each node in the hierarchy independently.
             </summary>
             <param name="armResourceId"></param>
             <returns>The list of immediate child resources; return null if the input resource is a leaft resource (that is, without child resources).</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceObsolete">
            <summary>
            Interface of recovery server
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceObsolete.SubmitSerializedWatchdogHealthReports(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Batch submit WatchdogReport using proprietary binary schema to serialize/deserialize
            WatchdogReport (for input) and WatchdogReportResult (for output) lists.
            </summary>
            <param name="watchdogReportBlob">The serialized WatchdogReport list</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized WatchdogReport list</param>
            <param name="outBlobSize">Return the blob size (in bytes) of the returned WatchdogReportResult list</param>
            <returns>The serialized WatchdogReportResult list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.IRecoveryServiceObsolete.SubmitSerializedWatchdogHealthReportInternal(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Submit watchdog reports for resource health. This is the variation that uses proprietary binary schema
            for serialization/deserialization.
            </summary>
            <param name="reports">watchdog reports</param>
            <param name="inBlobSize">The blob size (in bytes) of the input serialized WatchdogReport list</param>
            <param name="outBlobSize">Return the blob size (in bytes) of the returned WatchdogReportResult list</param>
            <returns>The serialized WatchdogReportResult list</returns>
            <remarks>
            This method should not be used as it is created for internal usage of AD Metrics system. Watchdogs 
            submitted externally using this method will be discarded and not be counted for health evaluation.
            </remarks>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ReportHelper">
            <summary>ReportHelper class</summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ReportHelper.ValidateReportParameters(System.String,Microsoft.Online.RecoveryService.Contract.WatchdogType,Microsoft.Online.RecoveryService.Contract.ResourceHealthType,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.String,System.String)">
            <summary>
            Validate the report parameters
            </summary>
            <param name="watchdogName">name of the watchdog</param>
            <param name="watchdogType">type of the watchdog</param>
            <param name="healthType">health type of the resource</param>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource which is serialization xml of 
            the dictionary of property and their values using DataSerializer.Serialize</param>
            <param name="status">status in the report.</param>
            <param name="watchdogMetadata">metadata of the watchdog which is serialization xml of 
            the dictionary of property and their values using DataSerializer.Serialize</param>
            <param name="message">message for human consumption</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ReportHelper.ValidateReportParameters(Microsoft.Online.RecoveryService.Contract.WatchdogReport,System.String@)">
            <summary>
            Validate the report parameters
            </summary>
            <param name="watchdogReport">Watchdog report</param>
            <param name="reason">Out parameter indicating the reason of failed validation</param>
            <returns>true if report validation is succeeded, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ReportHelper.ValidateReportParameters(Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport,System.String@)">
            <summary>
            Validate the batch report parameters
            </summary>
            <param name="batchWatchdogReport">Watchdog report</param>
            <param name="reason">Out parameter indicating the reason of failed validation</param>
            <returns>true if report validation is succeeded, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthData">
            <summary>
            Resource health data class.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.HeaderSize">
            <summary>
            Header size
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.SerializationVersion1">
            <summary>
            Serialization version 1
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.SerializationVersion2">
            <summary>
            Serialization version 2
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.SerializationVersion">
            <summary>
            The current serialization version
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.metadataCollection">
            <summary>
            The meta data collection.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.ResourceId">
            <summary>
            Gets or sets the resource identifier
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.ResourceMetadata">
            <summary>
            Gets or sets the resource metadata
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.HealthStatus">
            <summary>
            Gets or sets the resource health status
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.HealthState">
            <summary>
            Gets or sets the resource health state
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.OfflineStatus">
            <summary>
            Gets or sets the resource offline status
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.InRepair">
            <summary>
            Gets or sets a value indicating whether the resource is in repair or not
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.HealthySince">
            <summary>
            Gets or sets the health status healthy start time of the resource.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.HealthStateLastUpdated">
            <summary>
            Gets or sets the UTC time at which the recovery health state was updated.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.LastReportTime">
            <summary>
            Gets or sets the UTC time of last watchdog report for this resource
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.Watchdogs">
            <summary>
            Gets or sets the watchdog summary data for the resource.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.DeletionTime">
            <summary>
            Gets or sets the deletion time of the resource.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.ResourceMetadataCollection">
            <summary>
            Gets the resource metadata collection
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.Serialize">
            <summary>
            Serializes this object and returns the byte blob.
            </summary>
            <returns>the serialized bytes blob</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.Deserialize(System.Byte[])">
            <summary>
            Deserializes the object from the blob
            </summary>
            <param name="blob">bytes blob</param>
            <returns>the deserialized object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.SerializePayload">
            <summary>
            Serializes the payload
            </summary>
            <returns>return serialized bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceHealthData.DeserializePayload(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes the payload
            </summary>
            <param name="reader">the binary stream reader</param>
            <param name="serializationVersion">the serialization version</param>
            <returns>deserialized payload</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthReport">
            <summary>
            Resource health report class.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthReport.ResourceId">
            <summary>
            Gets or sets the resource identifier
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthReport.HealthStatus">
            <summary>
            Gets or sets the resource health status
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthReport.HealthStatusReason">
            <summary>
            Gets or sets the reason for the resource's health status
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthReport.HealthStatusReasonDescription">
            <summary>
            Gets or sets the description for the resource's health status reason.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthReport.FailingWatchdogs">
            <summary>
            Gets or sets the watchdogs which are reporting unhealthy for the resource.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceHealthReport.HealthPageLink">
            <summary>
            Gets or sets the health page link for the resource.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusDescription">
            <summary>
            Class representing health status description
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusDescription.ReasonMap">
            <summary>
            Map between the health status reason and the description.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusDescription.Get(Microsoft.Online.RecoveryService.Contract.ResourceHealthStatusReason)">
            <summary>
            Gets the description of a health status reason.
            </summary>
            <param name="reason">health status reason</param>
            <returns>the description.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData">
            <summary>
            The class that represents the data about the action being performed on the resource (persisted in azure).
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.ResourceId">
            <summary>
            Gets or sets the resource metadata
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.IncidentSourceId">
            <summary>
            Gets or sets the source id of the incident
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.IncidentGuid">
            <summary>
            Gets or sets the GUID used to submit incident
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.LatestIcmId">
            <summary>
            Gets or sets the latest id of the incident returned by ICM
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.Status">
            <summary>
            Gets or sets the incident status (Active/Mitigating/Resolved)
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.Severity">
            <summary>
            Gets or sets a value indicating whether the action was successful
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.SubmissionResult">
            <summary>
            Gets or sets the incident submission result by ICM.
            This is IncidentAddUpdateStatus enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.IncidentHealthyTime">
            <summary>
            Gets or sets the time when incident got healthy.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.IncidentUpdateTime">
            <summary>
            Gets or sets the time when incident got updated.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.IsRecoveryMitigated">
            <summary>
            Gets or sets a value indicating whether the incident is mitigated by recovery action or not.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.RecoveryRuleName">
            <summary>
            Gets or sets the name of associated recovery rule if any.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIncidentData.AllUniqueIcmIds">
            <summary>
            Unique list of ids returned by Icm for a given incident source identifier. 
            We file a different incident for different monitor severity.
            This list will be used to mitigate all the incidents submitted for a given monitor.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ReturnContext">
            <summary>
            The return context object. The return context includes extra data for the RecoveyContract API just called.
            The usage is similar to the GetLastError() from WIN32 APIs; that is, right after the RecoveryContract API
            call, create the ReturnContext and access the properties.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ReturnContext.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ReturnContext.CorrelationId">
            <summary>
            The CorrelationId for return context the RecoveryContract API just called.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.SerializationHelper">
            <summary>SerializationHelper class</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializationHelper.useProprietarySerialization">
            <summary>
            The internal useProprietarySerialization setting with initial default value.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SerializationHelper.UseProprietarySerialization">
            <summary>
            Whether to use the proprietary binary serialization schema, or the default XML serailization.
            The deault is true, to use the proprietary binary schema.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetKeyValue(System.String,System.String)">
            <summary>
            Gets the property value from the metadata
            </summary>
            <param name="serializedDictionary">serialization xml of dictionary of property and values</param>
            <param name="key">name of the key</param>
            <returns>the key value</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetKeyValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Gets the key value from the dictionary
            </summary>
            <param name="dictionary">dictionary of key and values</param>
            <param name="key">name of the key</param>
            <returns>the property value</returns>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializationHelper.HeaderSizeMetadata">
            <summary>
            The size of the header blob for meta data, a list of key/value pairs.
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeMetaData
                UINT16 blobType (value of MetaDataType enum)
                UINT16 entryCount
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SignatureResourceId">
            <summary>
            The signature/size of the header block for ResourceId blob.
                UINT32 signature = SignatureResourceId
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeRecordId
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializationHelper.HeaderSizeWatchdogHealthReport">
            <summary>
            The size of the header block for single WatchdogHealthReport
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeWatchdogHealthReport
                UINT16 watchdogType
                UINT16 status
                UINT32 offsetResourceId
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializationHelper.HeaderSizeHealthAnnotation">
            <summary>
            The size of the header block for single HealthAnnotation
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeHealthAnnotation
                byte version
                UINT32 offsetResourceId
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializationHelper.Version1">
            <summary>
            The possible versions of the Health Annotation.
            The VersionLast will always be the version when serializing the instance.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SignatureWatchdogHealthReportList">
            <summary>
            The signature/size of the header block for a list of WatchdogHealthReport for batch processing request.
                UINT32 signature = SignatureWatchdogHealthReportList or SignatureReplicateWatchdogHealthReportList
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeWatchdogHealthReportList
                UINT16 countWatchdogHealthReport
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SignatureHealthAnnotationList">
            <summary>
            The signature/size of the header block for a list of HealthAnnotation for batch processing request.
                UINT32 signature = SignatureHealthAnnotationList
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeHealthAnnotationList
                UINT16 countHealthAnnotations
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializationHelper.HeaderSizeWatchdogHealthReportResultVersion1">
            <summary>
            The size of the header block for single WatchdogHealthReportResult
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeWatchdogHealthReportResult
                UINT8  isRetryable
                UINT8  resultType
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SignatureWatchdogHealthReportResultList">
            <summary>
            The signature/size of the header block for a list of WatchdogHealthReportResult for batch processing result.
                UINT32 signature = SignatureWatchdogHealthReportResultList
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeWatchdogHealthReportResultList
                UINT16 resultCount
                UINT16 userErrorCount
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SizeDateTimeBlob">
            <summary>
            The size of the serialized DateTime structure.
                UINT16 year
                UINT8  month
                UINT8  date
                UINT8  hour
                UINT8  minute
                UINT8  second
                UINT8  reserved - Could we carry DateTimeKind information here?
                UINT32 milliseconds
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.CalculateStringSize(System.String)">
            <summary>
            Calculate the size in bytes for the Unicode string.
            </summary>
            <param name="inString">Input string</param>
            <returns>The size in bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.CalculateStringBlobSize(System.String)">
            <summary>
            Calculate the size in bytes for the serialized blob (with the leading UINT32 for the buffer size then the string buffer.
            </summary>
            <param name="inString">Input string</param>
            <returns>The size in bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.CalculateMetadataSize(Microsoft.Online.RecoveryService.Contract.MetadataCollection)">
            <summary>
            Calculate the size in bytes for the blob to store the metadata, which is a list of key/value pairs.
            </summary>
            <param name="metaDataCollection">The key/value pair list</param>
            <returns>The size in bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.CalculateResourceIdSize(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Calculate the size in bytes for the blob to store the ResourceId object.
            </summary>
            <param name="resource">The ResourceId object</param>
            <returns>The size in bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.CalculateWatchdogHealthReportSize(Microsoft.Online.RecoveryService.Contract.WatchdogReport)">
            <summary>
            Calculate the size in bytes for the blob to store the WatchdogReport object.
            </summary>
            <param name="report">The WatchdogReport object</param>
            <returns>The size in bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.CalculateHealthAnnotationSize(Microsoft.Online.RecoveryService.Contract.HealthAnnotation)">
            <summary>
            Calculate the size in bytes for the blob to store the HealthAnnotation object.
            </summary>
            <param name="annotation">The HealthAnnotation object</param>
            <returns>The size in bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.CalculateWatchdogHealthReportListSize(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport})">
            <summary>
            Calculate the size in bytes for the blob to store a list of WatchdogReport objects
            </summary>
            <param name="reportList">The list of WatchdogReport objects</param>
            <returns>The size in bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.CalculateWatchdogHealthReportResultSize(Microsoft.Online.RecoveryService.Contract.WatchdogReportResult)">
            <summary>
            Calculate the size in bytes for the blob to store the WatchdogReportResult object.
            </summary>
            <param name="result">The WatchdogReportResult object</param>
            <returns>The size in byte</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeString(System.IO.BinaryWriter,System.String)">
            <summary>
            Serialize string to the Binary writer (to memory stream). The format for serialized string is
                UINT32 stringLength in byte
                Null-terminated Unicode string.
            </summary>
            <param name="outWriter">The output BinaryWriter</param>
            <param name="inString">The input string</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeDateTime(System.IO.BinaryWriter,System.DateTime)">
            <summary>
            Serialize the DateTime structure for UTC time.
            </summary>
            <param name="outWriter">The output BinaryWriter</param>
            <param name="inTime">The input DateTime structure</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeValue(System.IO.BinaryWriter,System.Object)">
            <summary>
            Serialize object with different types. Explicitly process known value types and string, then
            use the ToString() to process generic object types.
            </summary>
            <param name="outWriter">The output BinaryWriter</param>
            <param name="valueObject">The object being serialized</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeResourceIdList(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier})">
            <summary>
            Serialize list of the ResourceId objects.
            </summary>
            <param name="resourceIdList">The input ResourceId object list</param>
            <returns>serialized byte array</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeResourceIdListList(System.Collections.Generic.List{System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceIdentifier}})">
            <summary>
            Serialize list of list of the ResourceId objects.
            </summary>
            <param name="resourceIdListList">The input ResourceId object list of lists</param>
            <returns>serialized byte array</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeList``1(System.Collections.Generic.List{``0},System.Func{``0,System.Byte[]})">
            <summary>
            Serialize list of items.
            </summary>
            <param name="list">The list of items</param>
            <param name="serializeFn">Function to serialize one item</param>
            <returns>blob containing serialized list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeListOfList``1(System.Collections.Generic.List{System.Collections.Generic.List{``0}},System.Func{``0,System.Byte[]})">
            <summary>
            Serialize list of list of items.
            </summary>
            <param name="listOfList">The list of lists</param>
            <param name="serializeFn">Function to serialize one item</param>
            <returns>blob containing serialized list of lists</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeWatchdogSummaryDataList(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData})">
            <summary>
            Serialize list of WatchdogSummaryData objects.
            </summary>
            <param name="list">The input WatchdogSummaryData object list of lists</param>
            <returns>serialized byte array</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeWatchdogSummaryDataListList(System.Collections.Generic.List{System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData}})">
            <summary>
            Serialize list of list of the WatchdogSummaryData objects.
            </summary>
            <param name="listOfList">The input WatchdogSummaryData object list of lists</param>
            <returns>serialized byte array</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeResourceHealthDataList(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.ResourceHealthData})">
            <summary>
            Serialize list of the ResourceHealthData objects.
            </summary>
            <param name="list">The input ResourceHealthData object</param>
            <returns>serialized byte array</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeResourceHealthStatusList(System.Collections.Generic.List{System.Nullable{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus}})">
            <summary>
            Serialize list of the ResourceHealthStatus? objects.
            </summary>
            <param name="healthStatusList">The input ResourceHealthStatus? object</param>
            <returns>serialized byte array</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeResourceSuppressionStateList(System.Collections.Generic.List{System.Nullable{Microsoft.Online.RecoveryService.Contract.SuppressionMode}})">
            <summary>
            Serialize list of the SuppressionMode? objects.
            </summary>
            <param name="suppressionStateList">The input SuppressionMode? object</param>
            <returns>serialized byte array</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeResourceId(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Serialize the ResourceId object.
            </summary>
            <param name="resourceId">The input ResourceId object</param>
            <returns>serialized byte array</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeResourceId(System.IO.BinaryWriter,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
             <summary>
             Serialize the ResourceId object. The format for resourceId
                 UINT32 signature, which includes major/minor versions.
                 UINT32 blobSize in bytes
                 UINT16 headerSize in bytes, currently is 12 bytes.
                 [serialized string for topologyName]
                 [serialized string for Type]
            
                 [serialized metaData list for ResourceDimensions]
            
              where [serialized mataData list] is
                 UINT32 blobSize
                 UINT16 headerSize
                 UINT16 blobType
                 UINT16 entryCount
                 [serialized string for ResourceDimension 1 key]
                 [serialized string for ResourceDimension 1 value]
                 ...
             </summary>
             <param name="outWriter">The output BinaryWriter</param>
             <param name="resource">The input ResourceId object</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeMetadataCollection(System.IO.BinaryWriter,Microsoft.Online.RecoveryService.Contract.MetadataCollection,Microsoft.Online.RecoveryService.Contract.MetaDataType)">
            <summary>
            Serialize the metadata collection
            </summary>
            <param name="outWriter">The output BinaryWriter</param>
            <param name="metadataCollection">The metadat collection</param>
            <param name="metadataType">The metadata type</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeMetadataCollection(Microsoft.Online.RecoveryService.Contract.MetadataCollection,Microsoft.Online.RecoveryService.Contract.MetaDataType)">
            <summary>
            Serialize the metadata collection
            </summary>
            <param name="metadataCollection">The metadat collection</param>
            <param name="metadataType">The metadata type</param>
            <returns>serialized byte array</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeWatchdogHealthReport(System.IO.BinaryWriter,Microsoft.Online.RecoveryService.Contract.WatchdogReport)">
            <summary>
            Serialize the single WatchdogReport object. The format for single WatchdogHealthReport
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeWatchdogHealthReport
                UINT16 watchdogType
                UINT16 status
                UINT32 offsetResourceId
                [serialized UtcDateTime for reportTime] ???
                [serialized UtcDateTime for statusNotFilingReportTime] ???
                [serialized string for WatchdogName]
                [serialized string for message]
                [serialized ResourceId]
                [serialized MetaData for WatchdogMetaData]
                [serialized MetaData for ResourceMetaData]
            </summary>
            <param name="outWriter">The output BinaryWriter</param>
            <param name="report">The input WatchdogReport</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeHealthAnnotation(System.IO.BinaryWriter,Microsoft.Online.RecoveryService.Contract.HealthAnnotation)">
            <summary>
            Serialize the single HealthAnnotation object. The format for single HealthAnnotation
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeHealthAnnotation
                UINT32 offsetResourceId
                [serialized UtcDateTime for annotationTime] ???
                [serialized string for MonitorName]
                [serialized string for DisplayName]
                [serialized string for Content]
                [serialized ResourceId]
                [serialized MetaData for AnnotationMetadata]
            </summary>
            <param name="outWriter">The output BinaryWriter</param>
            <param name="annotation">The input HealthAnnotation</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeHealthAnnotation(Microsoft.Online.RecoveryService.Contract.HealthAnnotation)">
            <summary>
            Serialize the single HealthAnnotation object.
            </summary>
            <param name="annotation">The input HealthAnnotation</param>
            <returns>serialized byte array</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeWatchdogHealthReportList(System.IO.BinaryWriter,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},System.Boolean)">
            <summary>
            Serialize the list of WatchdogReport objects for the new batch API. The format for serialized WatchdogHealthReport list
                UINT32 signature = SignatureWatchdogHealthReportList
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeWatchdogHealthReportList
                UINT16 countWatchdogHealthReport
                [serialized WatchdogHealthReport 1]
                ...
            </summary>
            <param name="outWriter">The output BinaryWriter</param>
            <param name="reportList">The input WatchdogReport list</param>
            <param name="isReplicated">Whether the watchdog report list is replicated from the other datacenter</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeHealthAnnotationsList(System.IO.BinaryWriter,System.Collections.Generic.IEnumerable{Microsoft.Online.RecoveryService.Contract.HealthAnnotation})">
            <summary>
            Serialize the list of HealthAnnotation objects for the new batch API. The format for serialized HealthAnnotation list
                UINT32 signature = SignatureHealthAnnotationList
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeHealthAnnotationList
                UINT16 countHealthAnnotation
                [serialized HealthAnnotation 1]
                ...
            </summary>
            <param name="outWriter">The output BinaryWriter</param>
            <param name="annotations">The input HealthAnnotation list</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.BuildWatchdogHealthReportList(System.Collections.Generic.List{System.Byte[]},System.Boolean)">
            <summary>
            Build the serialized binary representation of the list of WatchdogReport based on individual
            WatchdogReport binary blobs.
            
            </summary>
            <param name="reportList">The list of serialized WatchdogReport blobs</param>
            <param name="isReplicated">Whether the watchdog report list is replicated from the other datacenter</param>
            <returns>The serialized blob for the list of the WatchdogReport blobs</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeWatchdogHealthReportResult(System.IO.BinaryWriter,Microsoft.Online.RecoveryService.Contract.WatchdogReportResult)">
            <summary>
            Serialize the single WatchdogReportResult object. The format for serialized WatchdogHealthReportResult
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeWatchdogHEaltheReportReresult
                UINT8  isRetryable (0 or 1)
                UINT8  resultType
                [serialized string for WatchdogName]
                [serialized ResourceId]
                [serialized string for Exception]
                [serialized string for reason]
            </summary>
            <param name="outWriter">The output BinaryWriter</param>
            <param name="result">The input WatchdogReportResult object</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeWatchdogHealthReportResultList(System.IO.BinaryWriter,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReportResult})">
            <summary>
            Serialize the list of WatchdogReportResult objects for the new batch API return. The format for serialized WatchdogReportResult list
                UINT32 signature = SignatureWatchdogHealthReportResultList
                UINT32 blobSize
                UINT16 headerSize = HeaderSizeWatchdogHealthReportResultList
                UINT16 countWatchdogHealthReport
                [serialized WatchdogHealthReport 1]
                ...
            </summary>
            <param name="outWriter"></param>
            <param name="resultList"></param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.BuildWatchdogHealthReportResultList(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Build the serialized binary representation of the list of WatchdogReportResult based on individual
            WatchdogReportResult binary blobs.
            </summary>
            <param name="resultList">The list of serialized WatchdogReport blobs</param>
            <returns>The serialized blob for the list of the WatchdogReport blobs</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeWatchdogReportList(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport})">
            <summary>
            Serialize a list of WatchdogReport object to binary blob.
            </summary>
            <param name="reports">The list of Watchdog objects</param>
            <returns>The serialized binary blob</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeHealthAnnotationsList(System.Collections.Generic.IEnumerable{Microsoft.Online.RecoveryService.Contract.HealthAnnotation})">
            <summary>
            Serialize a list of HealthAnnotation object to binary blob.
            </summary>
            <param name="annotations">The list of <see cref="T:Microsoft.Online.RecoveryService.Contract.HealthAnnotation"/>.</param>
            <returns>The serialized binary blob</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SerializeWatchdogReportResultList(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReportResult})">
            <summary>
            Serialize the WatchdogReportResult list and return the final binary blob.
            </summary>
            <param name="resultList">The list of WatchdogReportResult list</param>
            <returns>The serialized binary blob</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadBool(System.Byte[],System.Int32@)">
            <summary>
            Read bool value from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>bool number</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadSbyte(System.Byte[],System.Int32@)">
            <summary>
            Read sbyte number from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>sbyte number</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadShort(System.Byte[],System.Int32@)">
            <summary>
            Read short number from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>short number</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadInt(System.Byte[],System.Int32@)">
            <summary>
            Read int number from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>int number</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadLong(System.Byte[],System.Int32@)">
            <summary>
            Read long number from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>long number</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadByte(System.Byte[],System.Int32@)">
            <summary>
            Read byte number from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>byte number</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadUshort(System.Byte[],System.Int32@)">
            <summary>
            Read ushort number from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>ushort number</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadUint(System.Byte[],System.Int32@)">
            <summary>
            Read uint number from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>uint number</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadUlong(System.Byte[],System.Int32@)">
            <summary>
            Read ulong number from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>ulong number</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadDouble(System.Byte[],System.Int32@)">
            <summary>
            Read double number from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>double number</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadDateTime(System.Byte[],System.Int32@)">
            <summary>
            Read DateTime structure from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The DateTime structure</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadGuid(System.Byte[],System.Int32@)">
            <summary>
            Read Guid structure from the binary blob; the Guid is represented as 16-byte byte array.
            </summary>
            <param name="byteArray">The binary blob</param>
            <param name="index">The index to the start byte reading</param>
            <returns>The Guid</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadString(System.Byte[],System.Int32@)">
            <summary>
            Read Unicode string from the binary blob.
            </summary>
            <param name="byteArray">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The string</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadValue(System.Byte[],System.Int32@)">
            <summary>
            Read object of the known type from the binary blob.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SkipMetadata(Microsoft.Online.RecoveryService.Contract.MetaDataType,System.Byte[],System.Int32@)">
            <summary>
            Skips the metadata in the blob and updates the index after the metadata.
            </summary>
            <param name="inType">The type of the metadata collection to read</param>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadMetadata(Microsoft.Online.RecoveryService.Contract.MetaDataType,System.Byte[],System.Int32@)">
            <summary>
            Read the metadata collection from the binary blob.
            </summary>
            <param name="inType">The type of the metadata collection to read</param>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The metadata collection, which is a collection of key/value pairs</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.SkipResourceId(System.Byte[],System.Int32@)">
            <summary>
            Skips the resource id in the blob and updates the index after the resource id in the blob.
            </summary>
            <param name="blob"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadResourceId(System.Byte[],System.Int32@)">
            <summary>
            Read single ResourceId structure from the binary blob.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The ResourceId object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ValidateWatchdogReportBlob(System.Byte[],System.Int32,System.UInt32@,System.UInt16@,Microsoft.Online.RecoveryService.Contract.WatchdogType@,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus@,System.UInt32@)">
            <summary>
            Validate the WatchdogReport blob
            </summary>
            <param name="blob">The binary blob</param>
            <param name="index">The start offset of the binary blob</param>
            <param name="blobSize">Returned size of the binary blob representing the WatchdogReport</param>
            <param name="headerSize">Returned size of the header blob in the WatchdogReport blob</param>
            <param name="typeWatchdog">Returned WatchdogReport.Type</param>
            <param name="status">Returned WatchdogReport.Status</param>
            <param name="offsetResource">Returned offset for the ResourceIdentifier blob inside the WatchdogReport</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ValidateHealthAnnotation(System.Byte[],System.Int32,System.UInt32@,System.UInt16@,System.Byte@,System.UInt32@,System.DateTime@)">
            <summary>
            Validate the HealthAnnoation blob
            </summary>
            <param name="blob">The binary blob</param>
            <param name="index">The start offset of the binary blob</param>
            <param name="blobSize">Returned size of the binary blob representing the HealthAnnoation</param>
            <param name="headerSize">Returned size of the header blob in the HealthAnnoation blob</param>
            <param name="version">The version for serialization.</param>
            <param name="offsetResource">Returned offset for the ResourceIdentifier blob inside the HealthAnnoation</param>
            <param name="timestamp">The timestamp of the annotation.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadWatchdogHealthReport(System.Byte[],System.Int32@)">
            <summary>
             Read single WatchdogReport structure from the binary blob.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The WatchdogReport object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadHealthAnnotation(System.Byte[],System.Int32@)">
            <summary>
             Read single HealthAnnotation structure from the binary blob.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The HealthAnnotation object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadWatchdogHealthReportBlobSize(System.Byte[],System.Int32)">
            <summary>
             Read the blob size of the single serialized WatchdogReport blob
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The blob size</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadResourceFromWatchdogHealthReport(System.Byte[],System.Int32)">
            <summary>
             Return the offset of the ResourceIdentifier blob inside the single serialized WatchdogReport blob
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The offset of the ResourceIdentifier object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadWatchdogNameFromWatchdogHealthReport(System.Byte[],System.Int32)">
            <summary>
             Read the WatchdogName from the binary blob.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The The WatchdogName from WatchdogReport</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadWatchdogHealthReportStatus(System.Byte[],System.Int32)">
            <summary>
             Read WatchdogReport.Status helper.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The WatchdogReport.Status value</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadWatchdogHealthReportReportTime(System.Byte[],System.Int32)">
            <summary>
             Read WatchdogReport.ReportTime helper.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The WatchdogReport.ReportTime value</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.WriteWatchdogHealthReportReportTime(System.Byte[],System.Int32,System.DateTime)">
            <summary>
            Update the ReportTime field inside the WatchdogReport blob
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start the WatchdogReport blob</param>
            <param name="reportTime">The updated ReportTime</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetWatchdogHealthReportCount(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Treat this as serialized blob for a list of WatchdogReport objects and get the number of WatchdogReport
            objects in the list
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <param name="listSize">Return the size of the blob for serialized WatchdogReport list</param>
            <returns>Number of WatchdogReport objects in the list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetHealthAnnotationCount(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Treat this as serialized blob for a list of HealthAnnotation objects and get the number of HealthAnnotation
            objects in the list
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <param name="listSize">Return the size of the blob for serialized HealthAnnotation list</param>
            <returns>Number of HealthAnnotation objects in the list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.WatchodgReportListIsReplicated(System.Byte[],System.Int32)">
            <summary>
            Whether the watchdog report list is replicated from the other datacenter
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>Whether the watchdog report list is replicated from the other datacenter</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetFirstWatchdogHealthReport(System.Byte[],System.Int32)">
            <summary>
            Calculate the blob offset for the first WatchdogReport object in the WatchdogReport list.
            It first validates that the blob is indeed the the list of the WatchdogReport objects, then calculate
            the offset for the first WatchdogReport object. The returned offset could be used in the
            ReadWatchdogHealthReport call to extract the WatchdogReport object.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The index for the start of the first WatchdogReport object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetNextWatchdogHealthReport(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate the offset for the next WatchdogReport object. It validates that the input index points to
            the current WatchdogReport object, and calculate the offset of the next WatchdogReport object. If this
            is the last WatchdogReport object in the list, it will return 0 (as the end condition).
            
            The returned offset could be used in the ReadWatchdogHealthReport call to extract the WatchdogReport object.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <param name="listIndex">The offset of the blob for the start of the WatchdogReport list</param>
            <param name="listSize">The size in bytes for the blob that stores the WatchdogReport list</param>
            <returns>The offset for the next WatchdogReport object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetFirstHealthAnnotation(System.Byte[],System.Int32)">
            <summary>
            Calculate the blob offset for the first HealthAnnotation object in the HealthAnnotation list.
            It first validates that the blob is indeed the the list of the HealthAnnotation objects, then calculate
            the offset for the first HealthAnnotation object. The returned offset could be used in the
            ReadHealthAnnotation call to extract the HealthAnnotation object.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The index for the start of the first HealthAnnotation object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetNextHealthAnnotation(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate the offset for the next HealthAnnotation object. It validates that the input index points to
            the current HealthAnnotation object, and calculate the offset of the next HealthAnnotation object. If this
            is the last HealthAnnotation object in the list, it will return 0 (as the end condition).
            
            The returned offset could be used in the ReadHealthAnnotation call to extract the HealthAnnotation object.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <param name="listIndex">The offset of the blob for the start of the HealthAnnotation list</param>
            <param name="listSize">The size in bytes for the blob that stores the HealthAnnotation list</param>
            <returns>The offset for the next HealthAnnotation object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetResourceOffsetFromWatchdogHealthReport(System.Byte[],System.Int32)">
            <summary>
            Calculate the offset (from the start of the blob) to extract the ResourceId structure within the WatchdogReport object.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The offset for the ResourceId structure within the WatchdogReport object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetWatchdogMetadataOffsetFromWatchdogHealthReport(System.Byte[],System.Int32)">
            <summary>
            Calculate the offset (from the start of the blob) to extract the WatchdogMetadata structure within the WatchdogReport object.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The offset for the WatchdogMetadata structure within the WatchdogReport object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetResourceMetadataOffsetFromWatchdogHealthReport(System.Byte[],System.Int32)">
            <summary>
            Calculate the offset (from the start of the blob) to extract the ResourceMetadata structure within the WatchdogReport object.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The offset for the ResourceMetadata structure within the WatchdogReport object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ValidateWatchdogReportResultBlob(System.Byte[],System.Int32@,System.UInt32@,System.UInt16@)">
            <summary>
            Validate the WatchdogReportResult blob
            </summary>
            <param name="blob">The binary blob</param>
            <param name="index">The start offset of the binary blob</param>
            <param name="blobSize">Returned size of the binary blob representing the WatchdogReportResult</param>
            <param name="headerSize">Returned size of the header blob in the WatchdogReportResult blob</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadWatchdogHealthReportResult(System.Byte[],System.Int32@)">
            <summary>
            Read the WatchdogReportResult structure from the binary blob.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The WatchdogReportResult object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadWatchdogHealthReportResultSize(System.Byte[],System.Int32)">
            <summary>
            Read the total blob size of the WatchdogReportResult structure from the binary blob.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The total blob size</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadWatchdogHealthReportResultHeaderSize(System.Byte[],System.Int32)">
            <summary>
            Read the blob header size of the WatchdogReportResult structure from the binary blob.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The total blob size</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.ReadWatchdogHealthReportResultType(System.Byte[],System.Int32)">
            <summary>
            Read the ResultType of the WatchdogReportResult structure from the binary blob.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The ResultType</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetWatchdogHealthReportResultCount(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Treat this as serialized blob for a list of WatchdogReportResult objects and get the number of WatchdogReportResult
            objects in the list
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <param name="userErrorCount">The number of WatchdogReportResult instance from user error</param>
            <returns>Number of WatchdogReportResult objects in the list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetFirstWatchdogHealthReportResult(System.Byte[],System.Int32)">
            <summary>
            Calculate the blob offset for the first WatchdogReportResult object in the WatchdogReportResult list.
            It first validates that the blob is indeed the the list of the WatchdogReportResult objects, then calculate
            the offset for the first WatchdogReportResult object. The returned offset could be used in the
            ReadWatchdogHealthReportResult call to extract the WatchdogReportResult object.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The index for the start of the first WatchdogReportResult object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetNextWatchdogHealthReportResult(System.Byte[],System.Int32)">
            <summary>
            Calculate the offset for the next WatchdogReportResult object. It validates that the input index points to
            the current WatchdogReportResult object, and calculate the offset of the next WatchdogReportResult object. If this
            is the last WatchdogReportResult object in the list, it will return 0 (as the end condition).
            
            The returned offset could be used in the ReadWatchdogHealthReportResult call to extract the WatchdogReportResult object.
            </summary>
            <param name="blob">The binary data blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The offset for the next WatchdogReportResult object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeWatchdogReportList(System.Byte[],System.Int32)">
            <summary>
            Deserialize binary blob to a list of WatchdogReport objects.
            </summary>
            <param name="reportBlob">The binary blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The list of WatchdogReport object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeHealthAnnotationList(System.Byte[],System.Int32)">
            <summary>
            Deserialize binary blob to a list of HealthAnnotation objects.
            </summary>
            <param name="annotationBlob">The binary blob</param>
            <param name="index">The index to start byte reading</param>
            <returns>The list of HealthAnnotation object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeWatchdogReportList(System.Byte[])">
            <summary>
            Deserialize binary blob to a list of WatchdogReport objects.
            </summary>
            <param name="reportBlob">The binary blob</param>
            <returns>The list of WatchdogReport object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeHealthAnnotationList(System.Byte[])">
            <summary>
            Deserialize binary blob to a list of HealthAnnotation objects.
            </summary>
            <param name="annotationBlob">The binary blob</param>
            <returns>The list of HealthAnnotation object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeWatchdogReportResultList(System.Byte[])">
            <summary>
            Deserialize the list of WatchdogReportResult objects from the serialized binary blob
            </summary>
            <param name="resultBlob">The binary blob</param>
            <returns>The list of WatchdogReportResult objects</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeResourceIdList(System.Byte[])">
            <summary>
            Deserialize binary blob to a list of ResourceId objects.
            </summary>
            <param name="resourceIdListBlob">The binary blob</param>
            <returns>The list of ResourceId object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeResourceIdListList(System.Byte[])">
            <summary>
            Deserialize binary blob to a list of list of ResourceId objects.
            </summary>
            <param name="resourceIdListListBlob">The binary blob</param>
            <returns>The list of list of ResourceId object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeResourceHealthStatusList(System.Byte[])">
            <summary>
            Deserialize binary blob to a list of ResourceHealthStatus? objects.
            </summary>
            <param name="healthStatusListBlob">The binary blob</param>
            <returns>The list of ResourceHealthData object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeResourceSuppressionStateList(System.Byte[])">
            <summary>
            Deserialize binary blob to a list of SuppressionMode? objects.
            </summary>
            <param name="suppressionStateListBlob">The binary blob containing list of suppression states</param>
            <returns>The list of SuppressionMode? object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeResourceHealthDataList(System.Byte[])">
            <summary>
            Deserialize binary blob to a list of ResourceHealthData objects.
            </summary>
            <param name="healthDataListBlob">The binary blob</param>
            <returns>The list of ResourceHealthData object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeWatchdogSummaryDataList(System.Byte[])">
            <summary>
            Deserialize binary blob to a list of WatchdogSummaryData objects.
            </summary>
            <param name="listBlob">The binary blob</param>
            <returns>The list of WatchdogSummaryData object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeWatchdogSummaryDataListList(System.Byte[])">
            <summary>
            Deserialize binary blob to a list of list of WatchdogSummaryData objects.
            </summary>
            <param name="listOfListBlob">The binary blob</param>
            <returns>The list of list of WatchdogSummaryData object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.GetListCount(System.Byte[])">
            <summary>
            Gets the count of the items in the serialized list
            </summary>
            <param name="listBlob">The binary blob containing list of items of type T</param>
            <returns>The count of items in the serialized list</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeList``1(System.Byte[],System.Func{System.Byte[],``0})">
            <summary>
            Deserialize binary blob to a list of items of type T
            </summary>
            <param name="listBlob">The binary blob containing list of items of type T</param>
            <param name="deserializeFn">Function to deserialize one item in the list</param>
            <returns>The list of items of type T</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SerializationHelper.DeserializeListOfList``1(System.Byte[],System.Func{System.Byte[],``0})">
            <summary>
            Deserialize binary blob to a list of list of items of type T
            </summary>
            <param name="listOfListBlob">The binary blob containing list of list of items of type T</param>
            <param name="deserializeFn">Function to deserialize item of type T</param>
            <returns>The list of list of items of type T</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceHelper">
            <summary>ResourceHelper class</summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceHelper.GetRoleSliceResourceName(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.MetadataCollection)">
            <summary>
            Gets the role slice resource name of the resource
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="resourceMetadata">metadata of the resource</param>
            <returns>the role slice resource name. null if cannot be retrieved.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceHelper.ToRowKeyString(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Returns the string representation to be used as row key in azure.
            </summary>
            <param name="resourceId">id of the resource</param>
            <returns>string to be used as row-key</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceHelper.ParseRowKeyString(System.String)">
            <summary>
            Parses from the row key string representation of the resource id
            </summary>
            <param name="rowKeyResourceId">resource id as string used in row-key of azure table</param>
            <returns>ResourceIdentifier object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceHelper.GetDisplayString(Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus)">
            <summary>
            Gets the display string of the health status
            </summary>
            <param name="healthStatus">health status</param>
            <returns>health status display string</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier">
            <summary>
            Resource Identifier class.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            The constructor for new ResourceIdentifier that could be serialized by the new proprietart binary schema.
            </summary>
            <param name="topologyName">The TopologyName</param>
            <param name="resourceType">The ResourceType</param>
            <param name="resourceDimensions">The ResourceDimensions collection</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.#ctor(System.String,System.String,System.Func{Microsoft.Online.RecoveryService.Contract.MetadataCollection})">
            <summary>
            The constructor for new ResourceIdentifier that could be serialized by the new proprietart binary schema.
            </summary>
            <param name="topologyName">The TopologyName</param>
            <param name="resourceType">The ResourceType</param>
            <param name="dimensionsGenerator">The generator for ResourceDimensions collection</param>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.ResourceUriScheme">
            <summary>
            Scheme in resource id.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.ResourceNameDelimiter">
            <summary>
            Delimiter in resource name.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.topologyName">
            <summary>
            Topology of the resource
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.type">
            <summary>
            Type of the resource
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.resourceDimensions">
            <summary>
            The internal ResourceDimenasion collection.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.DefaultNameMetadata">
            <summary>
            For the old ResourceIdentifier construction from name, automatically add to the ResourceDimensions metadata
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.containsDimensions">
            <summary>
            The resource identifier contains dimensions.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.hashCode">
            <summary>
            Hash code of this object
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.ResourceDimensions">
            <summary>
            The key/value pair collection for resource dimensions.
            </summary>
            <remarks>It is optional for backward compatibility</remarks>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.TopologyName">
            <summary>
            Gets or sets the topology name. (DMS topology name)
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.Type">
            <summary>
            Gets or sets the resource type. For e.g., "Role" or "RoleInstance"
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.Name">
            <summary>
            Gets or sets the resource name which should be unique for resources of same type.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.ContainsDimensions">
            <summary>
            Whether the identifier contains the individual dimensions.
            </summary>
            <returns>true if it contains the individual dimensions. false if it only contains the metadata dimension.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.Parse(System.String)">
            <summary>
            Parses from the string representation of the resource id
            </summary>
            <param name="resourceId">resource id as string</param>
            <returns>ResourceIdentifier object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.ConstructNameFromMetadata(Microsoft.Online.RecoveryService.Contract.MetadataCollection,System.Collections.Generic.List{System.String})">
            <summary>
            Constructs the resource name from metadata
            </summary>
            <param name="metadata">resource metadata</param>
            <param name="identifierProperties">the metadata properties which will be used to construct name</param>
            <returns>the constructed resource name</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.op_Equality(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Overload of == operator for this class
            </summary>
            <param name="left">object at the left side of the comparison</param>
            <param name="right">object at the right side of the comparison</param>
            <returns>true if they are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.op_Inequality(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Overload of != operator for this class
            </summary>
            <param name="left">object at the left side of the comparison</param>
            <param name="right">object at the right side of the comparison</param>
            <returns>true if they are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.IsValid">
            <summary>
            Whether the resource identifier object is valid or not.
            </summary>
            <returns>true if valid else invalid</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.Equals(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier)">
            <summary>
            Finds if the two resource ids represent the same resources or not.
            </summary>
            <param name="other">The resource id to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.GetHashCode">
            <summary>
            Gets hash code, derived from object, overriden
            </summary>
            <returns>Hash code of the object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>string representation of this object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.Serialize">
            <summary>
            Serializes the resource id as byte blob
            </summary>
            <returns>the byte blob</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.Deserialize(System.Byte[])">
            <summary>
            Deserialize the byte blob
            </summary>
            <param name="blob">The byte blob</param>
            <returns>The resource id</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.ThrowIfInvalid(System.String[])">
            <summary>
            Check the segments in the resource id string for validity.
            Throws Argument exception if segments does not have values as expected.
            </summary>
            <param name="segments">The segments to be validated.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.ThrowIfInvalidName(System.String)">
            <summary>
            Throws Argument exception if invalid name.
            </summary>
            <param name="resourceName">name of the resource</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ResourceIdentifier.ReplaceInvalidCharactersInName(System.String)">
            <summary>
            Replace invalid characters in the name
            </summary>
            <param name="name">name where the invalid characters will be replaced</param>
            <returns>the updated name</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ServiceBusHelper">
            <summary>
            Helper methods for Azure service bus.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ServiceBusHelper.CreateServiceBusTopics(System.String)">
            <summary>
            Try creating the topics required for Health extensibility.
            </summary>
            <param name="connectionString">The service bus connection string.</param>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.TopicConstants">
            <summary>
            The static class that contains constants related to service bus messages.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.TopicConstants.ServiceBusMessageSizeLimit">
            <summary>
            The maximum size limit of the service bus message body.
            Per https://azure.microsoft.com/en-us/documentation/articles/service-bus-quotas/, the message size for a queue/topic
            entity is 256KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).
            So we will limit the size of the message body to be 192KB.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.TopicConstants.Version1">
            <summary>
            The possible versions of the service bus topic messages.
            The VersionLast will always be the version when seriaslize the topic messages.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.TopicHelperFunctions">
            <summary>
            Helper functions to serialize/deserialize objects.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.TopicHelperFunctions.SerializeResourceIdentifier(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Int32,System.Int32@,System.Byte)">
            <summary>
            Serialize ResourceIdentifier with total size limit
            </summary>
            <param name="resourceId">The input WatchdogReport</param>
            <param name="currentSize">Currently accumulated size</param>
            <param name="outSize">The size of serialized ResourceIdentifier</param>
            <param name="version">The serialization version</param>
            <returns>Serialized ResourceIdentifier string</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.TopicHelperFunctions.SerializeAlertSourceIncident(Microsoft.AzureAd.Icm.Types.AlertSourceIncident,System.Int32,System.Int32@,System.Byte)">
            <summary>
            Serialize AlertSourceIncident with total size limit
            </summary>
            <param name="incident">The input AlertSourceIncident</param>
            <param name="currentSize">Currently accumulated size</param>
            <param name="outSize">The size of serialized AlertSourceIncident</param>
            <param name="version">The serialization version</param>
            <returns>Serialized AlertSourceIncident string</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.TopicHelperFunctions.SerializeWatchdogReport(Microsoft.Online.RecoveryService.Contract.WatchdogReport,System.Int32,System.Int32@,System.Byte)">
            <summary>
            Serialize WatchdogReport with total size limit
            </summary>
            <param name="report">The input WatchdogReport</param>
            <param name="currentSize">Currently accumulated size</param>
            <param name="outSize">The size of serialized WatchdogReport</param>
            <param name="version">The serialization version</param>
            <returns>Serialized WatchdogReport string</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.TopicHelperFunctions.SerializeWatchdogReportList(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},System.Int32,System.Int32@,System.Byte)">
            <summary>
            Serialize WatchdogReport list with total size limit
            </summary>
            <param name="reportList">The input WatchdogReport list</param>
            <param name="currentSize">Currently accumulated size</param>
            <param name="outSize">The size of serialized WatchdogReport list</param>
            <param name="version">The serialization version</param>
            <returns>Serialzied WatchdogReport list sting</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.TopicHelperFunctions.DeserializeResourceIdentifier(System.Byte[],System.Byte,System.Int32,System.Int32)">
            <summary>
            Deserialize the string to ResourceIdentifier
            </summary>
            <param name="blob">Te byte blob contains the serialized string</param>
            <param name="version">The serialization schema version</param>
            <param name="offset">The offset of the byte blob to start reading</param>
            <param name="size">The size of the byte blob to read</param>
            <returns>Returned ResourceIdentifier</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.TopicHelperFunctions.DeserializeAlertSourceIncident(System.Byte[],System.Byte,System.Int32,System.Int32)">
            <summary>
            Deserialize the string to AlertSourceIncident
            </summary>
            <param name="blob">Te byte blob contains the serialized string</param>
            <param name="version">The serialization schema version</param>
            <param name="offset">The offset of the byte blob to start reading</param>
            <param name="size">The size of the byte blob to read</param>
            <returns>Returned AlertSourceIncident</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.TopicHelperFunctions.DeserializeWatchdogReport(System.Byte[],System.Byte,System.Int32,System.Int32)">
            <summary>
            Deserialize the string to WatchdogReport
            </summary>
            <param name="blob">Te byte blob contains the serialized string</param>
            <param name="version">The serialization schema version</param>
            <param name="offset">The offset of the byte blob to start reading</param>
            <param name="size">The size of the byte blob to read</param>
            <returns>Returned WatchdogReport</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.TopicHelperFunctions.DeserializeWatchdogReportList(System.Byte[],System.Byte,System.Int32,System.Int32)">
            <summary>
            Deserialize the string to WatchdogReport list
            </summary>
            <param name="blob">Te byte blob contains the serialized string</param>
            <param name="version">The serialization schema version</param>
            <param name="offset">The offset of the byte blob to start reading</param>
            <param name="size">The size of the byte blob to read</param>
            <returns>Returned WatchdogReport list</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport">
            <summary>
            Single watchdog report class.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.HeaderSize">
            <summary>
            Header size
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.SerializationVersion">
            <summary>
            Serialization version
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.resourceMetadataCollectionBlob">
            <summary>
            Blob containing resource metadata collection
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.watchdogMetadataCollectionBlob">
            <summary>
            Blob containing watchdog metadata collection
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.resourceMetadataCollection">
            <summary>
            Blob containing resource metadata collection
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.watchdogMetadataCollection">
            <summary>
            Blob containing watchdog metadata collection
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.resourceId">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.#ctor(Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport,System.Collections.Generic.List{System.String},Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,Microsoft.Online.RecoveryService.Contract.MetadataCollection,Microsoft.Online.RecoveryService.Contract.MetadataCollection,System.DateTime)">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.#ctor(Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport,System.Byte[])">
            <summary>
            The constructor which takes the serialized report blob and deserializes to individual properties.
            </summary>
            <param name="parentReport">the parent report</param>
            <param name="blob">The serialized report blob</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.ParentReport">
            <summary>
            Gets or sets the parent report of this single report
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.ResourceId">
            <summary>
            Gets the resource-id of this report.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.ResourceDimensionValueList">
            <summary>
            Gets or sets list of dimension values identifying the resource in this report.
            The dimension names are in the batch watchdog report
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.ResourceHealthStatus">
            <summary>
            Gets or sets the health status of the resource.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.ResourceMetadataCollection">
            <summary>
            Gets or sets the collection of metadata specific to  this resource.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.WatchdogMetadataCollection">
            <summary>
            Gets or sets the collection metadata specific to this watchdog.
            This collection will be merged with common collection in batch watchdog report to get 
            the full collection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.ResourceMetadataCollectionBlob">
            <summary>
            Gets or sets the collection of metadata specific to  this resource.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.WatchdogMetadataCollectionBlob">
            <summary>
            Gets or sets the collection metadata specific to this watchdog.
            This collection will be merged with common collection in batch watchdog report to get 
            the full collection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.ReportTime">
            <summary>
            Gets or sets the report time of this report
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.StatusNotFailingReportTime">
            <summary>
            Gets or sets watchdog last failure report time
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.SuccessiveHealthyReportCount">
            <summary>
            Gets or sets the count of successive healthy reports.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.SetParentReport(Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport)">
            <summary>
            Sets the parent report of this report.
            </summary>
            <param name="parentReport">the parent report</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.IsNotHealthy">
            <summary>
            Checks if the status is not healthy
            </summary>
            <returns>true if the health status is healthy, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.GetFullReport">
            <summary>
            Gets the full watchdog report
            </summary>
            <returns>the full watchdog report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.GetCategory">
            <summary>
            Gets the category of the watchdog report
            </summary>
            <returns>the category. defaults to <see cref="F:Microsoft.Online.RecoveryService.Common.Constants.WatchdogCategoryDefaultValue"/>.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.GetDowntimeReason">
            <summary>
            Get the downtime reason priority property in the watchdog metadata collection
            </summary>
            <returns>The downtime reason priority</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.GetDowntimeReasonPriority">
            <summary>
            Get the downtime reason property in the watchdog metadata collection
            </summary>
            <returns>The downtime reason</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.ClearSerializedBlobs">
            <summary>
            Clears the stored blobs.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.Serialize">
            <summary>
            Serializes this object and returns the byte blob.
            </summary>
            <returns>the serialized bytes blob</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.Deserialize(Microsoft.Online.RecoveryService.Contract.BatchWatchdogReport,System.Byte[])">
            <summary>
            Deserializes the watchdog report
            </summary>
            <param name="parentReport">The parent report which contains this single report</param>
            <param name="blob">blob containing serialized bytes</param>
            <returns>the deserialized report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.SerializePayload">
            <summary>
            Serializes the payload
            </summary>
            <returns>return serialized bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.DeserializeInternal(System.Byte[])">
            <summary>
            Deserializes the watchdog report
            </summary>
            <param name="blob">blob containing serialized bytes</param>
            <returns>the deserialized report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.DeserializePayload(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes the payload
            </summary>
            <param name="reader">the binary stream reader</param>
            <param name="serializationVersion">version of serialized data</param>
            <returns>deserialized payload</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport.ReplaceMessageTemplateParameters(Microsoft.Online.RecoveryService.Contract.MetadataCollection,System.String)">
            <summary>
            Replace the template parameters in the message.
            </summary>
            <param name="metadata">metadata collection</param>
            <param name="message">message with template parameters</param>
            <returns>final message</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.BitReader">
            <summary>
            The class which allows reading bits from buffer one by one.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.BitReader.Initialize(System.Byte[],System.UInt16)">
            <summary>
            Initializes the <see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitReader"/> object before reading starts.
            </summary>
            <param name="newBuffer">A buffer from which to read.</param>
            <param name="currentByteIndex">Index of the byte to start from.</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.BitReader.CurrentByteIndex">
            <summary>
            Gett the index of the current byte from which data is read.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.BitReader.CurrentBitIndex">
            <summary>
            Gett the index of the current bit from which data is read.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.BitReader.ReadBit">
            <summary>
            Reads one bit from the buffer.
            </summary>
            <returns>Read bit.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.BitWriter">
            <summary>
            A class which allows writing to the buffer arbitrary number of bits.
            Implementation allows to start with any byte and bit in the buffer, thus supporting continuation.
            Object will accumulate current byte value bit by bit and when byte is full will assign it to the
            current byte in the buffer. If you want to make sure that all writter bits are saved to the buffer,
            <see cref="M:Microsoft.Online.RecoveryService.Contract.Store.BitWriter.Flush"/> method should be called.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.BitWriter.CurrentByteIndex">
            <summary>
            Gets the current byte position in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.BitWriter.CurrentBitIndex">
            <summary>
            Gets the current bit position in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.BitWriter.CurrentByte">
            <summary>
            Gets the value of the currently accumulated byte.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.BitWriter.Initialize(System.Byte[],System.UInt16,System.Byte)">
            <summary>
            Initializes the <see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitWriter"/> object before writing starts.
            </summary>
            <param name="newBuffer">A buffer to write.</param>
            <param name="byteIndex">Index of the byte to start with.</param>
            <param name="bitIndex">Index of the bit to start with.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.BitWriter.WriteBit(System.Boolean)">
            <summary>
            Attempts to write bit to the buffer.
            </summary>
            <param name="bit">Bit value to write, where True means 1 and False means 0.</param>
            <returns>True if write was successful, false if buffer was full and write failed.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.BitWriter.WriteArray(System.Collections.Generic.IReadOnlyList{System.Boolean},System.Boolean)">
            <summary>
            Attempts to write sequence of bits to the buffer.
            </summary>
            <param name="bits">Bits collection to write.</param>
            <param name="reverseOrder">If true, bits will be added to the buffer in reversed order.</param>
            <returns>True if write of all bits was successful, false if buffer became full on any bit write.
            Note that in this case last bytes may contain incomplete data.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.BitWriter.Flush">
            <summary>
            Guarantees that data will be written in underlying buffer, but positions 
            stay same, so user can continue writing to same byte and bit in the buffer.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.StorageUtility">
            <summary>
            Utlility for managing health storage accounts.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.StorageUtility.MaxRetryBackoffDelta">
            <summary>
            The delta interval for each backoff.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.StorageUtility.MaxRetries">
            <summary>
            The maximum number of retries for storage failures.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.StorageUtility.GetContainer(System.String,Microsoft.Online.RecoveryService.Server.Configuration.IRecoveryServerSettings,System.String,System.String[])">
            <summary>
            Get the <see cref="T:Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer"/>.
            </summary>
            <param name="folderName">The name of the folder.</param>
            <param name="settings">The <see cref="T:Microsoft.Online.RecoveryService.Server.Configuration.IRecoveryServerSettings"/>.</param>
            <param name="storeType">The store type.</param>
            <param name="storageAccounts">The storage accounts.</param>
            <returns>The container.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.StorageUtility.IsRetryableStorageException(System.Exception)">
            <summary>
            Check if a <see cref="T:Microsoft.WindowsAzure.Storage.StorageException"/> is retryable.
            </summary>
            <param name="ex">The exception instance.</param>
            <returns>The value indicating if the error is retryable.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.StorageUtility.GetStorageConnectionString(System.String,Microsoft.Online.RecoveryService.Server.Configuration.IRecoveryServerSettings,System.String[])">
            <summary>
            Get the relevant storage account key.
            </summary>
            <param name="folderName">The name of the folder used to figure the hash.</param>
            <param name="settings">The <see cref="T:Microsoft.Online.RecoveryService.Server.Configuration.IRecoveryServerSettings"/>.</param>
            <param name="storageAccounts">The storage accounts.</param>
            <returns>The connection string.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.StorageUtility.GetStorageConnectionString(System.Int32,Microsoft.Online.RecoveryService.Server.Configuration.IRecoveryServerSettings,System.String[])">
            <summary>
            Get the relevant storage account key.
            </summary>
            <param name="folderId">The name of the folder used to figure the hash.</param>
            <param name="settings">The <see cref="T:Microsoft.Online.RecoveryService.Server.Configuration.IRecoveryServerSettings"/>.</param>
            <param name="storageAccounts">The storage accounts.</param>
            <returns>The connection string.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility">
            <summary>
            A helper class which contains offsets in the encoded buffer for each parameter which
            should be written there.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.EncodingVersionOffset">
            <summary>
            Offset to the encoding version.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.FirstSampleTimeOffset">
            <summary>
            Offset of the first sample time uint value.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.LastSampleTimeOffset">
            <summary>
            Offset of the last sample time uint value.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.LastByteUsedOffset">
            <summary>
            Offset of the last used buffer's ushort value.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.SamplesCountOffset">
            <summary>
            Offset of the number of encoded samples ushort value.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.CurrentBitOffset">
            <summary>
            Offset of the last used bit in the last used byte.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.LastPersistenceTimeOffset">
            <summary>
            Offset to the last time when data in the buffer was persisted.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.HeaderSize">
            <summary>
            The size of the header.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.GetEncodingVersion(System.Byte[])">
            <summary>
            Gets the version of the encoding used in the <paramref name="buffer"/>.
            </summary>
            <param name="buffer">Buffer containing encoded data.</param>
            <returns>The encoding version.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.GetFirstSampleTime(System.Byte[])">
            <summary>
            Gets the first sample time from the buffer.
            </summary>
            <param name="buffer">Buffer containing encoded data.</param>
            <returns>Data start time.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.GetLastSampleTime(System.Byte[])">
            <summary>
            Gets the last sample time from the buffer.
            </summary>
            <param name="buffer">Buffer containing encoded data.</param>
            <returns>Data end time.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.GetPersistenceTime(System.Byte[])">
            <summary>
            Gets the last persistence time from the buffer.
            </summary>
            <param name="buffer">Buffer containing encoded data.</param>
            <returns>Last persistence time.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.GetLastByteUsed(System.Byte[])">
            <summary>
            Gets the last used byte from the buffer.
            </summary>
            <param name="buffer">Buffer containing encoded data.</param>
            <returns>Last used byte.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.GetLastBitUsed(System.Byte[])">
            <summary>
            Gets the last used bit from the buffer.
            </summary>
            <param name="buffer">Buffer containing encoded data.</param>
            <returns>Last used bit.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.GetSamplesCount(System.Byte[])">
            <summary>
            Gets the encoded samples count from the buffer.
            </summary>
            <param name="buffer">Buffer containing encoded data.</param>
            <returns>Encoded samples count.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.SetPersistenceTime(System.Byte[],System.UInt32)">
            <summary>
            Set the time of persistence.
            </summary>
            <param name="buffer">The buffer to be updated.</param>
            <param name="persistenceTime">The time of persistence completion.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.EncodingUtility.Split(System.Byte[],System.Int32)">
            <summary>
            Split the <paramref name="value"/> in <paramref name="bufferLength"/> chunks.
            </summary>
            <param name="value">The input buffer.</param>
            <param name="bufferLength">The chunk size.</param>
            <returns>The chunks.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.FibonacciEncoder">
            <summary>
            This class provides set of methods to encode signed and unsigned integer numbers using fibonacci code.
            See https://en.wikipedia.org/wiki/Fibonacci_coding.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.FibonacciEncoder.EncodePositiveNumber(Microsoft.Online.RecoveryService.Contract.Store.BitWriter,System.UInt64)">
            <summary>
            Encodes positive number and uses provided <see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitWriter"/> object to write the result.
            </summary>
            <param name="writer"><see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitWriter"/> object.</param>
            <param name="number">Number to encode.</param>
            <returns>True if results were written successfully, False if failed to write to the 
            provided <see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitWriter"/> object becasue underlying buffer is full.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.FibonacciEncoder.EncodeIntegerNumber(Microsoft.Online.RecoveryService.Contract.Store.BitWriter,System.Int64)">
            <summary>
            Encodes integer number and uses provided <see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitWriter"/> object to write the result.
            </summary>
            <param name="writer"><see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitWriter"/> object.</param>
            <param name="number">Number to encode.</param>
            <returns>True if results were written successfully, False if failed to write to the 
            provided <see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitWriter"/> object becasue underlying buffer is full.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.FibonacciEncoder.DecodePositiveNumber(Microsoft.Online.RecoveryService.Contract.Store.BitReader)">
            <summary>
            Decodes positive number obtaining data from provided <see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitReader"/> object.
            </summary>
            <param name="reader"><see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitReader"/> object.</param>
            <returns>Decoded number.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.FibonacciEncoder.DecodeIntegerNumber(Microsoft.Online.RecoveryService.Contract.Store.BitReader)">
            <summary>
            Decodes integer number obtaining data from provided <see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitReader"/> object.
            </summary>
            <param name="reader"><see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitReader"/> object.</param>
            <returns>Decoded number.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesBuffer">
            <summary>
            This class is used to store health series data.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesBuffer.MinBufferSize">
            <summary>
            The minimum buffer size.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesBuffer.buffer">
            <summary>
            The buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesBuffer.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesBuffer"/> class.
            This constructor is used for creation of pooled reusable objects.
            </summary>
            <param name="bufferSize">The size of the buffer to create.</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesBuffer.Buffer">
            <summary>
            Gets the health series data buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesBuffer.Clear">
            <summary>
            Clears the object state and underlying buffer.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder">
            <summary>
            The class used to decode raw time series data using fibonacci coding of value differences.
            See format in <see cref="T:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.reader">
            <summary>
            The bit reader instance.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.Initialize(System.Byte[])">
            <summary>
            The buffer to decode.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.DecodeTimeUtcM2(System.Byte[])">
            <summary>
            Get the t-2 time stamp.
            </summary>
            <param name="buffer">The buffer.</param>
            <remarks>used only in UTs</remarks>
            <returns>The t-2 timestamp.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.DecodeSampleTime(System.UInt32,System.UInt32)">
            <summary>
            Decode a sample time from the current state of <see cref="T:Microsoft.Online.RecoveryService.Contract.Store.BitReader"/>.
            </summary>
            <param name="timeUtcM1">The t-1 time.</param>
            <param name="timeUtcM2">The t-2 time.</param>
            <returns>The sample time decoded.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.DecodeHealtStatus">
            <summary>
            Decodes the health status from the buffer.
            </summary>                
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.DecodeHealthTransition">
            <summary>
            Decodes the health transition from the buffer.
            </summary>                
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.GetEarliestPersistenceTime(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Get the minimum of all the persistence times.
            </summary>
            <param name="buffers">The buffers to be searched.</param>
            <returns>The last persistence time.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.GetMergedSamples(Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesBuffer[],System.UInt32,System.Boolean)">
            <summary>
            Get the merged samples by decoding the <paramref name="buffers"/>.
            </summary>
            <param name="buffers">The buffers to be merged.</param>
            <param name="queryStartTime">The query start time if passed to skip buffers with old data.</param>
            <param name="forPersistence">A value indicating if the merge is for persistence. </param>
            <returns>The merged samples.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.GetMergedTransitions(Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesBuffer[],System.UInt32,System.Boolean)">
            <summary>
            Get the merged samples by decoding the <paramref name="buffers"/>.
            </summary>
            <param name="buffers">The buffers to be merged.</param>
            <param name="queryStartTime">The query start time if passed to skip buffers with old data.</param>
            <param name="forPersistence">A value indicating if the merge is for persistence. </param>
            <returns>The merged samples.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.GetSamples(System.Byte[],System.Boolean)">
            <summary>
            Get the merged samples by decoding the <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The buffers to be merged.</param>
            <param name="skipCount">A value indicating if the start of the buffer has a count field to be skipped.</param>
            <returns>The merged samples.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.GetTransitions(System.Byte[])">
            <summary>
            Get the transitions by decoding the <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The buffers to be merged.</param>
            <returns>The merged samples.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.GetExtendedSamples(System.Byte[],System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Gets samples and fills the gaps with nulls for consumption on the Health page.
            </summary>
            <param name="results">The encoded results buffer.</param>
            <param name="from">The start time of the query.</param>
            <param name="to">The end time of the query.</param>
            <param name="transitionsOnly">A value indicating if only transitions are in the results.</param>
            <returns>The samples.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.ConvertToResourceHealthStatus(System.Nullable{System.Double})">
            <summary>
            Converts from resource health status enumeration.
            </summary>
            <param name="status">double status returned by controller API.</param>
            <returns>The corresponding double value.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.GetMergedHealthStatus(System.Collections.Generic.IEnumerable{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus})">
            <summary>
            Get the merged heath status for the minute.
            </summary>
            <param name="minuteSamples">The samples from the minute.</param>
            <returns>The merged status.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.ConvertFromResourceHealthStatus(Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus)">
            <summary>
            Converts from resource health status enumeration.
            </summary>
            <param name="status">double status returned by controller API.</param>
            <returns>The corresponding double value.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesDecoder.IsSameMinute(System.DateTime,System.DateTime)">
            <summary>
            Get a value indicating if the timestamps are in the same minute.
            </summary>
            <param name="first">The first time stamp.</param>
            <param name="second">The second time stamp.</param>
            <returns>The value indicating if the timestamps are in the same minute.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder">
            <summary>
            The class used to encode raw time series data using fibonacci coding of value differences.
            Encoding format:
            1. Time:
               dt = (t2-t1)-(t1-t0)
               if dt=0 write bit 0
               else write bit 1, then encode dt using <see cref="M:Microsoft.Online.RecoveryService.Contract.Store.FibonacciEncoder.EncodeIntegerNumber(Microsoft.Online.RecoveryService.Contract.Store.BitWriter,System.Int64)"/>
            2. Value:
               Write health state based on chosen encoding
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.CurrentEncodingVersion">
            <summary>
            The current encoding version.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.encoder">
            <summary>
            The encoder used for encoding timestamps.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.writer">
            <summary>
            The bit writer instance.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.HealthStateEncoding">
            <summary>
            Mapping for <see cref="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus"/> to the encoding used in buffer.
            The goal is to allocate fewer bits for the most common states.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.Initialize(System.Byte[],System.UInt32)">
            <summary>
            Initializes encoder state and provided buffer.
            </summary>
            <param name="buffer">buffer to which data will be written by encoder.</param>
            <param name="time">Current UTC time in seconds.</param>
            <returns>Initialized encoder state object to be used for every encoding operation.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.InitializeWriter(System.Byte[])">
            <summary>
            Initialize the writer using <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The buffer using which the writer is initialized.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.EncodeHealthStatus(System.Byte[],Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.UInt32,System.UInt32@)">
            <summary>
            Encodes new raw time series data.
            </summary>
            <param name="buffer">Buffer to which encoded data should be added.</param>
            <param name="healthState">The health status to be encoded.</param>
            <param name="time">The time of the event.</param>
            <param name="timeUtcM2">The t-2 time stamp.</param>
            <returns>True if encoding completed successfully. False if encoding cannot complete.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.EncodeHealthTransition(System.Byte[],Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.UInt32,System.UInt32@)">
            <summary>
            Encodes new raw time series data.
            </summary>
            <param name="buffer">Buffer to which encoded data should be added.</param>
            <param name="previousHealthState">The previous health state.</param>
            <param name="healthState">The health status to be encoded.</param>
            <param name="time">The time of the event.</param>
            <param name="timeUtcM2">The t-2 time stamp.</param>
            <returns>True if encoding completed successfully. False if encoding cannot complete.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.EncodeSampleList(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesSample})">
            <summary>
            Encode the <paramref name="mergedList"/>.
            </summary>
            <param name="mergedList">The list of samples to be merged into the buffer.</param>
            <returns>The merged buffer.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.EncodeTransitionsList(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesTransition})">
            <summary>
            Encode the <paramref name="mergedList"/>.
            </summary>
            <param name="mergedList">The list of transitions to be merged into the buffer.</param>
            <returns>The merged buffer.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.GetBatchMergedHealth(System.Collections.Generic.List{System.Byte[]},System.Collections.Generic.List{System.Byte[]},System.Boolean,System.DateTime)">
            <summary>
            Get the batch merged health history of the two results provided.
            </summary>
            <param name="first">The first result.</param>
            <param name="second">The second result.</param>
            <param name="isTransition">A value indicating if the results are for transition data.</param>
            <param name="queryStartTime">The start time of the query.</param>
            <returns>The merged result.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.GetMergedHealth(System.Byte[],System.Byte[],System.Boolean,System.DateTime)">
            <summary>
            Get the merged health history of the two results provided.
            </summary>
            <param name="first">The first result.</param>
            <param name="second">The second result.</param>
            <param name="isTransition">A value indicating if the results are for transition data.</param>
            <param name="queryStartTime">The start time of the query.</param>
            <returns>The merged result.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.GetMergedAvailability(System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.AvailabilityEvent},System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.AvailabilityEvent},System.DateTime,System.Nullable{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus}@)">
            <summary>
            Get the merged availability events.
            </summary>
            <param name="first">The first result.</param>
            <param name="second">The second result.</param>
            <param name="queryStart">The start of the query.</param>
            <param name="startState">The start state in the query period.</param>
            <returns>The merged result.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.GetMergedResourceTransitions(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesTransition}},System.UInt32)">
            <summary>
            Get the merged transition status over watchdogs of the resource.
            </summary>
            <param name="transitionsByWatchdog">The transitions indexed by the watchdog.</param>
            <param name="queryStartTimeUtc">The start time of the query.</param>
            <returns>The merged transition data.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.GetMergedResourceHealth(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesSample}})">
            <summary>
            Get the merged resource health using the raw sample data from watchdogs.
            </summary>
            <param name="samplesByWatchdog">The samples for the watchdogs.</param>
            <returns>The merged resource health samples.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.SetHeader(System.Byte[],System.UInt32,System.UInt16)">
            <summary>
            Set the header properties after encoding completes.
            </summary>
            <param name="buffer">The buffer to be updated.</param>
            <param name="timeUtcM1">The last time stamp.</param>
            <param name="samplesCount">The new sample count.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.EncodeDiffOfDiff(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Encode the diff of diff of the given values.
            </summary>
            <param name="value">The current value.</param>
            <param name="valueM1">The t-1 value.</param>
            <param name="valueM2">The t-2 value.</param>
            <returns>A value indicating if the encoding was successful.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesEncoder.GetMergedStatus(System.Nullable{Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus},Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus)">
            <summary>
            Get the merged health status.
            </summary>
            <param name="currentStatus">The current status.</param>
            <param name="newStatus">The new status to be merged with.</param>
            <returns>The merged state.</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesTransition">
            <summary>
            The class representing a health transition.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesTransition.#ctor(Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.UInt32)">
            <summary>
            Initializes a new instance of the HealthSeriesTransition class.
            </summary>
            <param name="previousHealthStatus">The previous health status.</param>
            <param name="healthStatus">The health status.</param>
            <param name="sampleTime">The sample time.</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesTransition.SampleTime">
            <summary>
            Gets the sample time.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesTransition.PreviousHealthStatus">
            <summary>
            Gets the previous health status.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesTransition.CurrentHealthStatus">
            <summary>
            Gets the current <see cref="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesTransition.Equals(System.Object)">
            <summary>
            Override for the default comparator.
            </summary>
            <param name="obj">The other sample.</param>
            <returns>The value indicating if the samples were the same.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesTransition.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesTransition.CompareTo(System.Object)">
            <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
            <param name="obj">An object to compare with this instance. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj" /> is not the same type as this instance. </exception>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.ReplicationDataType">
            <summary>
            Represents the type of payload being replicated.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.ReplicationDataType.HealthReport">
            <summary>
            This represents a single health report.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.ReplicationDataType.HealthHistory">
            <summary>
            This represents a historical data.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.ReplicationDataType.DeleteFlag">
            <summary>
            This represents the delete attribute set on a resource/watchdog.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.ReplicationDataType.DeleteHistory">
            <summary>
            This represents history of deleted resources
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState">
            <summary>
            The class representing the health state of a resource/watchdog used for the purpose of replicating.
            <remarks>This is only for P-S replication.</remarks>
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.HeaderSize">
            <summary>
            Header size
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.SerializationVersion1">
            <summary>
            Serialization version 1
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.SerializationVersion2">
            <summary>
            Serialization version 2
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.SerializationVersion3">
            <summary>
            Serialization version 3
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.SerializationVersion4">
            <summary>
            Serialization version 4
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.SerializationVersion">
            <summary>
            The current serialization version
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.#ctor">
            <summary>
            Initializes a new instance of the ReplicationState class.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.#ctor(System.UInt32,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus)">
            <summary>
            Initializes a new instance of the ReplicationState class.
            </summary>
            <param name="startTime">The time of the current state.</param>
            <param name="resourceKey">The key to the resource.</param>
            <param name="watchdogName">The name of the watchdog.</param>
            <param name="healthStatus">The health status of a single point.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.#ctor(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ReplicationState class.
            </summary>
            <param name="resourceKey">The key to the resource.</param>
            <param name="watchdogName">The watchdog name.</param>
            <param name="markForDeletion">Mark the resource for deletion.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.#ctor(System.UInt32,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.Byte[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReplicationState class.
            </summary>
            <param name="startTime">The time of the current state.</param>
            <param name="resourceKey">The key to the resource.</param>
            <param name="watchdogName">The name of the watchdog.</param>
            <param name="healthStateBuffer">The buffer containing the encoded times and health states.</param>
            <param name="transitionBuffer">A value indicating if the buffers contain transition data.</param>
            <param name="skipCount">A value indicating if the start of the buffer has a count field to be skipped.</param>
            <param name="markedForDeletion">A value indicating if the data is marked for deletion.</param>
            <param name="newWatchdogToCheckForPastData">A value indicating if the data is for a new watchdog whose past data is to be checked.</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Tuple{System.UInt32,System.UInt32},System.UInt32}})">
            <summary>
            Initializes a new instance of the ReplicationState class.
            </summary>
            <param name="deletedData">The information about deleted data.</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.StartTime">
            <summary>
            Gets or sets the start time for the current stream of data.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.ResourceKey">
            <summary>
            Gets or sets the key for the resource.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.WatchdogName">
            <summary>
            Gets or sets the name of the watchdog.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.HealthStateBuffer">
            <summary>
            Gets or sets the buffer containing the health state
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.TransitionBuffer">
            <summary>
            Gets or sets a value indicating if the buffer contains transition data.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.HealthStatus">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus"/> used when replicating a single point.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.MarkedForDeletion">
            <summary>
            Gets or sets a value indicating if the resource has been marked for deletion.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.NewWatchdogToCheckForPastData">
            <summary>
            Gets or sets a value indicating if this is a new watchdog whose past data is to be checked.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.DeleteData">
            <summary>
            Gets or sets the list of deleted watchdogs and their deletion times.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.PayloadType">
            <summary>
            The type of payload being replicataed.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.Serialize">
            <summary>
            Serializes this object and returns the byte blob.
            </summary>
            <returns>the serialized bytes blob</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.Deserialize(System.Byte[])">
            <summary>
            Deserializes the object from the blob
            </summary>
            <param name="blob">bytes blob</param>
            <returns>the deserialized object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.SerializePayload">
            <summary>
            Serializes the payload
            </summary>
            <returns>return serialized bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.ReplicationState.DeserializePayload(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes the payload
            </summary>
            <param name="reader">the binary stream reader</param>
            <param name="serializationVersion">the serialization version</param>
            <returns>deserialized payload</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.ResourceWatchdogList">
            <summary>
            The class representing the watchdogs and respective indexes for a resource.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.ResourceWatchdogList.#ctor">
            <summary>
            Initializes a new instance of the ResourceWatchdogList class.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.ResourceWatchdogList.Watchdogs">
            <summary>
            Gets or sets the list of watchdogs and their associated buffer indices.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesSample">
            <summary>
            The class representing a health sample.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesSample.#ctor(Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus,System.UInt32)">
            <summary>
            Initializes a new instance of the HealthSeriesSample class.
            </summary>
            <param name="healthStatus">The health status.</param>
            <param name="sampleTime">The sample time.</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesSample.SampleTime">
            <summary>
            Gets the sample time.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesSample.HealthStatus">
            <summary>
            Gets the <see cref="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesSample.Equals(System.Object)">
            <summary>
            Override for the default comparator.
            </summary>
            <param name="obj">The other sample.</param>
            <returns>The value indicating if the samples were the same.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesSample.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.HealthSeriesSample.CompareTo(System.Object)">
            <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
            <param name="obj">An object to compare with this instance. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj" /> is not the same type as this instance. </exception>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry">
            <summary>
            The class representing an index entry in the index file.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.#ctor(System.UInt32,System.UInt32,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.String,System.UInt32,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the SeriesIndexEntry class.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="resourceIdentifier">The <see cref="P:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.ResourceIdentifier"/>.</param>
            <param name="watchdogName">The name of the watchdog.</param>
            <param name="dataFile">The name of the data file.</param>
            <param name="offset">The offset in the data file.</param>
            <param name="dataSize">The length of the data.</param>
            <param name="stampColor">The color of the stamp.</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.EndTIme">
            <summary>
            Gets the end time.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.ResourceIdentifier">
            <summary>
            Gets the <see cref="P:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.ResourceIdentifier"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.WatchdogName">
            <summary>
            Gets the name of the watchdog.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.DataFileName">
            <summary>
            Gets the name of the data file.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.DataOffset">
            <summary>
            Gets the offset in the data file.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.DataLength">
            <summary>
            Gets the length of the data.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.StampColor">
            <summary>
            Gets the color of the stamp.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.DeserializeIndex(System.Byte[])">
            <summary>
            Deserialize the given index blob.
            </summary>
            <param name="blob">The index blob.</param>
            <returns>
            The list of index data.
            </returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.SeriesIndexEntry.DeserializeIndex(System.IO.Stream)">
            <summary>
            Deserialize the given index blob.
            </summary>
            <param name="stream">The index blob stream.</param>
            <returns>
            The list of index data.
            </returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.Store.WatchdogDataIndex">
            <summary>
            The class representing the watchdog and its index to the buffer holding the states.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.Store.WatchdogDataIndex.#ctor">
            <summary>
            Initializes a new instance of the WatchdogDataIndex class.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.WatchdogDataIndex.WatchdogName">
            <summary>
            Gets or sets the name of the watchdog.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.WatchdogDataIndex.DataIndex">
            <summary>
            Gets or sets the index to the buffers. 
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.WatchdogDataIndex.RawDataStartTime">
            <summary>
            Gets or sets the time of the earliest raw data sample.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.WatchdogDataIndex.TransitionDataStartTime">
            <summary>
            Gets or sets the time of the earliest transition data sample.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.WatchdogDataIndex.HadEventDrop">
            <summary>
            Gets or sets a value indicating whether events were dropped.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.WatchdogDataIndex.MarkedForDeletion">
            <summary>
            Gets or sets a value indicating whether the data is marked for deletion.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.Store.WatchdogDataIndex.NewWatchdogToCheckForPastData">
            <summary>
            Gets or sets a value indicating whether this is a new watchdog which has to be checked.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.SuppressionRule">
            <summary>
            Represents an in-memory representation of a suppression rule
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SuppressionRule.ExpiresAfter">
            <summary>
            Gets or sets expiry time
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SuppressionRule.Rule">
            <summary>
            Gets or sets rule condition
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SuppressionRule.Mode">
            <summary>
            Gets or sets rule mode
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SuppressionRule.Alias">
            <summary>
            Gets or sets changing alias
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SuppressionRule.CreationTime">
            <summary>
            Gets or sets creation time
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SuppressionRule.ResourceTypes">
            <summary>
            Gets or sets resource types
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.SuppressionRule.IsExpired">
            <summary>
            Gets a value indicating whether a rule is already expired or not
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.SuppressionRule.GetRuleHash">
            <summary>
            Returns a hash value based on rule condition to uniquely identify rules
            </summary>
            <returns>hash value generated based on rule condition</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.TopicConstantStrings">
            <summary>
            The static class that contains all constant strings.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.TopicConstantStrings.IncidentRequestTopicName">
            <summary>
            The service bus topic name used to send IncidentRequest messages from the health service to partner services.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.TopicConstantStrings.IncidentResponseTopicName">
            <summary>
            The service bus topic name used to send IncidentResponse messages from the partner services to the health service.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.TopicConstantStrings.HealthStampPropertyKey">
            <summary>
            The HealthStamp property in service bus messages.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.TopicConstantStrings.ResourceTopologyNamePropertyKey">
            <summary>
            The ResourceTopologyName property in service bus messages.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.TopicConstantStrings.SeverityPropertyKey">
            <summary>
            The Severity property in service bus messages.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.TopicConstantStrings.SentTimePropertyKey">
            <summary>
            The Sent time property indicating the time the message was sent.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.TopicConstantStrings.RequestReceivedPropertyKey">
            <summary>
            The property indicating the time the reqest was received.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.TopicConstantStrings.ResponseSentPropertyKey">
            <summary>
            The property indicating the time the response was sent.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.TopicConstantStrings.IncidentMessageTypePropertyKey">
            <summary>
            The IncidentMessageType property in service bus messages.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.TopicConstantStrings.IncidentIdPropertyKey">
            <summary>
            The IncidentId property in service bus messages.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ViewTree">
            <summary>
            View tree class.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTree.TimeSinceLastUpdate">
            <summary>
            Gets or sets the last update time for data. This is a time period passed since last update
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTree.Root">
            <summary>
            Gets or sets the tree root
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTree.ResourceThrottled">
            <summary>
            Gets or sets the value indicating if the tenant is throttled for the number of resources.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTree.MaximumAllowedResources">
            <summary>
            Gets or sets the maximum allowed resources for the tenant.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTree.CurrentResourcesCount">
            <summary>
            Gets or sets the current number of resources for the tenant.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ViewTreeNode">
            <summary>
            View tree node class.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.Id">
            <summary>
            Gets or sets the resource identifier
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.Name">
            <summary>
            Gets or sets name of the node
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.ResourceId">
            <summary>
            Gets or sets resource id
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.Metadata">
            <summary>
            Gets or sets resource metadata
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.HealthStatus">
            <summary>
            Gets or sets the resource health status
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.OfflineStatus">
            <summary>
            Gets or sets the resource offline status
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.InRepair">
            <summary>
            Gets or sets a value indicating whether the resource is in repair or not
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.SuppressionState">
            <summary>
            Gets or sets suppression state of the node
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.SuppressionReason">
            <summary>
            Gets or sets suppression state reason of the node
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.HasChildren">
            <summary>
            Gets or sets a value indicating whether this node has any child or not
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.Children">
            <summary>
            Gets or sets child nodes for child resources
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.ChildrenByHealthStatus">
            <summary>
            Gets or sets the count of children grouped by <see cref="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus"/>. 
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.DimensionName">
            <summary>
            Gets or sets name of the corresponding dimension for the node
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.DimensionValue">
            <summary>
            Gets or sets value of the corresponding dimension for the node
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.ParentDimensions">
            <summary>
            Gets or sets parent dimensions for the node (name, value)
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.CompareTo(Microsoft.Online.RecoveryService.Contract.ViewTreeNode)">
            <summary>
            Compare nodes
            </summary>
            <param name="other">node to compare</param>
            <returns>comparison result</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.ViewTreeNode.ToString(System.UInt32)">
            <summary>
            Converts this object to a string, 
            </summary>
            <param name="maxDepth"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata">
            <summary>WatchdogMetadata class</summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.metadataCollection">
            <summary>
            Metadata collection
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AzureTopologyManager class.
            </summary>
            <param name="serializedMetadata">serialized metadata</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.#ctor(Microsoft.Online.RecoveryService.Contract.MetadataCollection)">
            <summary>
            Initialize WatchdogMetadata from another MetadataCollection
            </summary>
            <param name="metadataCollection">The MetadataCollection parameter</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.SerializationXml">
            <summary>
            Gets the serialized xml for the metadata
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.Collection">
            <summary>
            Return the MetadataCollection of the WatchdogMetadata object
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.ToDictionary">
            <summary>
            Converts to dictionary
            </summary>
            <returns>the dictionary</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.Get(System.String)">
            <summary>
            Gets the value of the metadata property
            </summary>
            <param name="property">the name of the property</param>
            <returns>the value of the property</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetValues(System.Text.RegularExpressions.Regex)">
            <summary>
            Tries to get a value by name.
            </summary>
            <param name="filter">The filter to match against.</param>
            <returns>value if present. null if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetReportExpirationTime">
            <summary>
            Gets the expiration time of the watchdog report
            </summary>
            <returns>expiration time</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetSeverity">
            <summary>
            Gets the severity in the watchdog report
            </summary>
            <returns>severity</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetDataEndTime">
            <summary>
            Gets the data end time property in the watchdog report
            </summary>
            <returns>data end time</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetRoutingId">
            <summary>
            Gets the routing id of the watchdog report if present
            </summary>
            <returns>routing id. null if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetDiagnosticsLink">
            <summary>
            Gets the diagnostics link of the watchdog report if present
            </summary>
            <returns>diagnostics link. null if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetImpactStartDate">
            <summary>
            Gets the impact start date if any.
            </summary>
            <returns>The impact start date, default of DateTime if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetCorrelationId">
            <summary>
            Gets the correlation id of the watchdog report if present
            </summary>
            <returns>correlation id. null if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetTitle">
            <summary>
            Gets the title of the watchdog report if present
            </summary>
            <returns>title. null if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.IsSilentMonitor">
            <summary>
            Is this silent monitor?
            </summary>
            <returns>true if silent. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.IsReplicatedMonitor">
            <summary>
            Is this replicated monitor from primary DC?
            </summary>
            <returns>true if replicated. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.IsComputedReport">
            <summary>
            Is this computed report?
            </summary>
            <returns>true if computed. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetCategory">
            <summary>
            Gets the category of the watchdog report
            </summary>
            <returns>the category. defaults to <see cref="F:Microsoft.Online.RecoveryService.Common.Constants.WatchdogCategoryDefaultValue"/>.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetMessage">
            <summary>
            Gets the message of the watchdog report
            </summary>
            <returns>the message. can be null if not specified.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetSource">
            <summary>
            Gets the source of the watchdog report
            </summary>
            <returns>the source. can be null if not specified.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetDowntimeReason">
            <summary>
            Get the downtime reason priority property in the watchdog metadata collection
            </summary>
            <returns>The downtime reason priority</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetDowntimeReasonPriority">
            <summary>
            Get the downtime reason property in the watchdog metadata collection
            </summary>
            <returns>The downtime reason</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.ShouldMitigateIncident">
            <summary>
            Should mitigate incident?
            </summary>
            <returns>true if incident should be mitigated. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetHealthyDurationToMitigate">
            <summary>
            Gets the healthy duration to mitigate from the watchdog report
            </summary>
            <returns>expiration time</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogMetadata.GetHealthyCountToMitigate">
            <summary>
            Gets the healthy count to mitigate from the watchdog report
            </summary>
            <returns>healthy count</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceWatchdogPair">
            <summary>
            Class representing resource, watchdog pair.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceWatchdogPair.ResourceId">
            <summary>
            Gets or sets the id of the resource
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.ResourceWatchdogPair.WatchdogName">
            <summary>
            Gets or sets the name of the watchdog.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.WatchdogReport">
            <summary>
            Watchdog report class.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReport.watchdogMetadata">
            <summary>
            The deserialized watchdog metadata
            </summary>
            <remarks>Atleast one of serialized or deserialized metadata should be present.</remarks>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReport.resourceMetadataCollection">
            <summary>
            The actual store for ResourceMetadataCollection
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReport.singleReport">
            <summary>
            Single watchdog report
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReport.watchdogName">
            <summary>
            Watchdog name
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReport.watchdogType">
            <summary>
            Watchdog type
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReport.resourceId">
            <summary>
            Resource identifier
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReport.status">
            <summary>
            Resource health status
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReport.reportTime">
            <summary>
            Report time
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReport.statusNotFailingReportTime">
            <summary>
            Time when the status was not failing
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReport.successiveHealthyReportCount">
            <summary>
            Successive healthy count
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogReport.message">
            <summary>
            Message of this report
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.#ctor(Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport)">
            <summary>
            Constructor which takes single report as input.
            </summary>
            <param name="singleReport">the single report</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.WatchdogName">
            <summary>
            Gets or sets watchdog name
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.WatchdogType">
            <summary>
            Gets or sets watchdog type
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.ResourceId">
            <summary>
            Gets or sets resource identifier
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.ResourceMetadata">
            <summary>
            Gets or sets resource metadata
            This will not be needed when use proprietary binary schema for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.Status">
            <summary>
            Gets or sets resource health status
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.WatchdogMetadata">
            <summary>
            Gets or sets watchdog metadata
            This will not be needed when use proprietary binary schema for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.Message">
            <summary>
            Gets or sets watchdog message
            Prefer <see cref="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.TemplateFulfilledMessage"/> for customer display scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.TemplateFulfilledMessage">
            <summary>
            Pulls message template from
             1) Customer overriden message (via Metadata property)
             2) singleReport.ParentReport.MessageTemplate
             3) specifically set Message field
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.ReportTime">
            <summary>
            Gets or sets watchdog report time
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.StatusNotFailingReportTime">
            <summary>
            Gets or sets watchdog last failure report time
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.SuccessiveHealthyReportCount">
            <summary>
            Gets or sets the count of successive healthy reports.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.WatchdogMetadataCollection">
            <summary>
            The key/value pair collection for Watchdog metadata.
            When use proprietary binary schema for serialization, the collection will be
            used, instead of the WatchdogMetadata string (which is also for serialization).
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.ResourceMetadataCollection">
            <summary>
            The key/value pair collection for resources.
            When use proprietary binary schema for serialization, the collection will be
            used, instead of the ResourceMetadata string (whcih is also for serialization).
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReport.SingleReport">
            <summary>
            Gets the single report from which this watchdog report is based of.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.IsExpired">
            <summary>
            Checks if the report has expired
            </summary>
            <returns>true if expired, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.IsNotHealthy">
            <summary>
            Checks if the status is not healthy
            </summary>
            <returns>true if the health status is healthy, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetReportExpirationTime">
            <summary>
            Gets the expiration time of the watchdog report
            </summary>
            <returns>expiration time</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetSeverity">
            <summary>
            Gets the severity in the watchdog report
            </summary>
            <returns>severity</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetDataEndTime">
            <summary>
            Gets the data end time property in the watchdog report
            </summary>
            <returns>data end time</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetRoutingId">
            <summary>
            Gets the routing id of the watchdog report if present
            </summary>
            <returns>routing id. null if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetDiagnosticsLink">
            <summary>
            Gets the diagnostics link of the watchdog report if present
            </summary>
            <returns>diagnostics link. null if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetImpactStartDate">
            <summary>
            Gets the impact start date if any.
            </summary>
            <returns>The impact start date, default of DateTime if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetCorrelationId">
            <summary>
            Gets the correlation id of the watchdog report if present
            </summary>
            <returns>correlation id. null if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetTitle">
            <summary>
            Gets the title of the watchdog report if present
            </summary>
            <returns>title. null if not present.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.IsSilentMonitor">
            <summary>
            Is this silent monitor?
            </summary>
            <returns>true if silent. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.IsReplicatedMonitor">
            <summary>
            Is this replicated monitor from primary DC?
            </summary>
            <returns>true if replicated. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.IsComputedReport">
            <summary>
            Is this computed report?
            </summary>
            <returns>true if computed. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetCategory">
            <summary>
            Gets the category of the watchdog report
            </summary>
            <returns>the category. defaults to <see cref="F:Microsoft.Online.RecoveryService.Common.Constants.WatchdogCategoryDefaultValue"/>.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetSource">
            <summary>
            Gets the source of the watchdog report
            </summary>
            <returns>the source. null if not specified.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.ShouldMitigateIncident">
            <summary>
            Should mitigate incident?
            </summary>
            <returns>true if incident should be mitigated. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetHealthyDurationToMitigate">
            <summary>
            Gets the healthy duration to mitigate from the watchdog report
            </summary>
            <returns>expiration time</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetHealthyCountToMitigate">
            <summary>
            Gets the healthy count to mitigate from the watchdog report
            </summary>
            <returns>healthy count</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetWatchdogMetadata">
            <summary>
            Gets the deserialized watchdog metadata
            </summary>
            <returns>the deserialized metadata object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetDowntimeReason">
            <summary>
            Get the downtime reason priority property in the watchdog metadata collection
            </summary>
            <returns>The downtime reason priority</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.GetDowntimeReasonPriority">
            <summary>
            Get the downtime reason property in the watchdog metadata collection
            </summary>
            <returns>The downtime reason</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.Serialize">
            <summary>
            Serialize the watchdog report
            </summary>
            <returns>the serialized bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.Deserialize(System.Byte[])">
            <summary>
            Deserializes the watchdog report
            </summary>
            <param name="blob">blob containing serialized bytes</param>
            <returns>the deserialized report</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReport.ReplaceMessageTemplateParameters(Microsoft.Online.RecoveryService.Contract.MetadataCollection,System.String)">
            <summary>
            Replace the template parameters in the message.
            </summary>
            <param name="metadata">metadata collection</param>
            <param name="message">message with template parameters</param>
            <returns>final message</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.WatchdogReportResult">
            <summary>
            Watchdog report result class.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReportResult.WatchdogName">
            <summary>
            Gets or sets watchdog name
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReportResult.ResourceId">
            <summary>
            Gets or sets resource identifier
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReportResult.Exception">
            <summary>
            Gets or sets exception returned from watchdog report submission
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReportResult.ExceptionText">
            <summary>
            The string form of the exception returned from watchdog report submission.
            This is used when proprietary binary schema is used for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReportResult.Reason">
            <summary>
            Gets or sets report failure reason
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReportResult.IsRetryable">
            <summary>
            Gets or sets a value indicating whether report submission can be retried
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogReportResult.ResultType">
            <summary>
            The type of the WatchdogReportResult instance.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReportResult.CreateWatchdogReportSubmissionResult(Microsoft.Online.RecoveryService.Contract.WatchdogReport,System.Exception)">
            <summary>
            Creates watchdog submission result for a given report and exception thrown for that report.
            </summary>
            <param name="report">the watchdog report</param>
            <param name="ex">the exception encountered while processing that report</param>
            <returns>the submission result</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReportResult.CreateWatchdogReportSubmissionResult(Microsoft.Online.RecoveryService.Contract.SingleWatchdogReport,System.Exception)">
            <summary>
            Creates watchdog submission result for a given report and exception thrown for that report.
            </summary>
            <param name="report">the watchdog report</param>
            <param name="ex">the exception encountered while processing that report</param>
            <returns>the submission result</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogReportResult.CreateWatchdogReportSubmissionResult(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.String,System.Exception)">
            <summary>
            Creates watchdog submission result for a given report and exception thrown for a given resource and watchdog.
            </summary>
            <param name="resourceId">id of the resource</param>
            <param name="watchdogName">name of the watchdog</param>
            <param name="ex">the exception encountered while processing that report</param>
            <returns>the submission result</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest">
            <summary>
            The message body for PreCreateIncident/PostCreateIncident requests that will be sent from
            health service to the partner services.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.CreatePreCreateIncidentRequest(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport,Microsoft.AzureAd.Icm.Types.AlertSourceIncident,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus)">
            <summary>
            Create PreCreateIncident request message object.
            </summary>
            <param name="resource">The ResourceIdentifier object</param>
            <param name="failingReports">The list of failing WatchdogReport objects</param>
            <param name="computedReport">The computed WatchdogReport object</param>
            <param name="alertSource">The AlertSourceIncident object</param>
            <param name="previousStatus">The resource health status of the same resource from previous report submission; the default is that the current request is a healthy-uunhealthy transition.</param>
            <returns>The returned CreateIncidentRequest object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.CreatePostCreateIncidentRequest(System.Int64,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport,Microsoft.AzureAd.Icm.Types.AlertSourceIncident)">
            <summary>
            Create PreCreateIncident request message object.
            </summary>
            <param name="incidentId">The IcM incident id</param>
            <param name="resource">The ResourceIdentifier object</param>
            <param name="failingReports">The list of failing WatchdogReport objects</param>
            <param name="computedReport">The computed WatchdogReport object</param>
            <param name="alertSource">The AlertSourceIncident object</param>
            <returns>The returned CreateIncidentRequest object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.#ctor(Microsoft.Online.RecoveryService.Contract.IncidentMessageType,System.Int64,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport,Microsoft.AzureAd.Icm.Types.AlertSourceIncident,Microsoft.Online.RecoveryService.Contract.ResourceHealthStatus)">
            <summary>
            The private constructor
            </summary>
            <param name="type">The type of the CreateIncidentRequest message</param>
            <param name="incidentId">The IcM incident id</param>
            <param name="resource">The ResourceIdentifier object</param>
            <param name="failingReports">The list of failing WatchdogReport objects</param>
            <param name="computedReport">The computed WatchdogReport object</param>
            <param name="alertSource">The AlertSourceIncident object</param>
            <param name="previousStatus">The resource health status of the same resource from previous report submission</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.MessageType">
            <summary>
            The type of the CreateIncidentRequest message
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.IncidentId">
            <summary>
            The IcM incident ID
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.Resource">
            <summary>
            The ResourceIdentifier
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.FailingWatchdogReports">
            <summary>
            The listy of the failing WatchdogReport objects
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.ComputedWatchdogReport">
            <summary>
            The computed WatchdogReport object
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.AlertSource">
            <summary>
            The AlertSourceIncident object
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.PreviousHealthStatus">
            <summary>
            The ResourceHealthStatus from previoud report.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.MessageHeaderSize1">
            <summary>
            The fixed-size part of CreateIncidentRequest message body.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.Serialize">
            <summary>
            Serialize the CreateIncidentRequest object to binary blob.
            The format of the binary blob for the first iteration is
            
            UINT32 blobSize
            UINT16 headerSize
            UINT8  version
            UINT8  type (PreCreateIncident or PostCreateIncident)
            UINT32 offsetResourceIdentifier
            UINT32 sizeResourceIdentifier
            UINT32 offsetFailingWatchdogReportList
            UINT32 sizeFailingWatchdogReportList
            UINT32 offsetComputedWatchdogReport
            UINT32 sizeComputedWatchdogReport
            UINT32 offsetAlertSourceIncident
            UINT32 sizeAlertSourceIncident
            UINT64 IcmIncidentId
            UINT16 PreviousHealthStatus (ResourceHealthStatus value)
            
            [serialized ResourceIdentifier]
            [serialized WatchdogReport list for failing watchdog reports]
            [serialized WatchdogReport for computed watchdog report]
            [serialized AlertSourceIncident]
            
            </summary>
            <returns>The binary blob for the serialized CreateIncidentRequest object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest.Deserialize(System.Byte[])">
            <summary>
            Deserialize the binary blob to the CreateIncidentRequest object.
            </summary>
            <param name="blob">The input binary blob</param>
            <returns>The CreateIncidentRequest object</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse">
            <summary>
            The message body for PreCreateIncident/PostCreateIncident responses that will be sent from
            the partner services to the health service incident processing actor.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.CreatePreCreateIncidentResponse(Microsoft.Online.RecoveryService.Contract.IncidentResponse,Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest,System.Int64)">
            <summary>
            Create CreatePreCreateIncidentResponse message based on the corresponding CreateIncidentRequest object
            </summary>
            <param name="response">The type of the response</param>
            <param name="request">The corresponding CreateIncidentRequest object</param>
            <param name="incidentId">The IcM incident ID if the response is to update existing IcM incident; otherwise ignored</param>
            <returns>The returned CreateIncidentResponse object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.CreatePostCreateIncidentResponse(Microsoft.Online.RecoveryService.Contract.CreateIncidentRequest,System.Int64,System.String)">
            <summary>
            Create CreatePostCreateIncidentResponse message based on the corresponding CreateIncidentRequest object
            </summary>
            <param name="request">The corresponding CreateIncidentRequest object</param>
            <param name="incidentId">The IcM incident ID from the reqeust message</param>
            <param name="description">The optional description string that will be added to the IcM incident</param>
            <returns>The returned CreateIncidentResponse object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.CreatePreCreateIncidentResponse(Microsoft.Online.RecoveryService.Contract.IncidentResponse,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.AzureAd.Icm.Types.AlertSourceIncident,System.Int64)">
            <summary>
            Create PreCreateIncident response message body
            </summary>
            <param name="response">The type of the response</param>
            <param name="resource">The ResourceIdentifierobject </param>
            <param name="alertSource">The AlertSourceIncident object</param>
            <param name="incidentId">The IcM incident ID if the response is to update existing IcM incident; otherwise ignored</param>
            <returns>The returned CreateIncidentResponse object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.CreatePostCreateIncidentResponse(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.AzureAd.Icm.Types.AlertSourceIncident,System.Int64,System.String)">
            <summary>
            Create PostCreateIncident response message body
            </summary>
            <param name="resource">The ResourceIdentifierobject </param>
            <param name="alertSource">The AlertSourceIncident object</param>
            <param name="incidentId">The IcM incident ID from the reqeust message</param>
            <param name="description">The optional description string that will be added to the IcM incident</param>
            <returns>The returned CreateIncidentResponse object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.CreatePreCreateIncidentResponse(Microsoft.Online.RecoveryService.Contract.IncidentResponse,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.AzureAd.Icm.Types.AlertSourceIncident,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport,System.Int64)">
            <summary>
            Create PreCreateIncident response message body
            </summary>
            <param name="response">The type of the response</param>
            <param name="resource">The ResourceIdentifierobject </param>
            <param name="alertSource">The AlertSourceIncident object</param>
            <param name="failingReports">The list of failing WatchdogReport objects</param>
            <param name="computedReport">The computed WatchdogReport object</param>
            <param name="incidentId">The IcM incident ID if the response is to update existing IcM incident; otherwise ignored</param>
            <returns>The returned CreateIncidentResponse object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.CreatePostCreateIncidentResponse(Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.AzureAd.Icm.Types.AlertSourceIncident,System.Int64,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport,System.String)">
            <summary>
            Create PostCreateIncident response message body
            </summary>
            <param name="resource">The ResourceIdentifierobject </param>
            <param name="alertSource">The AlertSourceIncident object</param>
            <param name="incidentId">The IcM incident ID from the reqeust message</param>
            <param name="failingReports">The list of failing WatchdogReport objects</param>
            <param name="computedReport">The computed WatchdogReport object</param>
            <param name="description">The optional description string that will be added to the IcM incident</param>
            <returns>The returned CreateIncidentResponse object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.#ctor(Microsoft.Online.RecoveryService.Contract.IncidentMessageType,Microsoft.Online.RecoveryService.Contract.IncidentResponse,System.Int64,Microsoft.Online.RecoveryService.Contract.ResourceIdentifier,Microsoft.AzureAd.Icm.Types.AlertSourceIncident,System.Collections.Generic.List{Microsoft.Online.RecoveryService.Contract.WatchdogReport},Microsoft.Online.RecoveryService.Contract.WatchdogReport,System.String)">
            <summary>
            The private constructor
            </summary>
            <param name="type">The type of the CreateIncidentResponse message</param>
            <param name="response">The type of the response</param>
            <param name="resource">The ResourceIdentifierobject </param>
            <param name="alertSource">The AlertSourceIncident object</param>
            <param name="incidentId">The IcM incident ID</param>
            <param name="description">The optional description string</param>
            <param name="failingReports">The list of failing WatchdogReport objects</param>
            <param name="computedReport">The computed WatchdogReport object</param>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.MessageType">
            <summary>
            The type of the CreateIncidentResponse message
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.Response">
            <summary>
            The type of the CreateIncidentResponse
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.IncidentId">
            <summary>
            The IcM incident ID
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.Resource">
            <summary>
            The ResourceIdentifier object
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.AlertSource">
            <summary>
            The AlertSourceIncident object
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.FailingWatchdogReports">
            <summary>
            The listy of the failing WatchdogReport objects
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.ComputedWatchdogReport">
            <summary>
            The computed WatchdogReport object
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.Description">
            <summary>
            The optional Description string.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.ConnectorId">
            <summary>
            The customized IcM connector id.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.AlertId">
            <summary>
            The alternative AlertId that will be passed back to the health system. For example, the SmartAlertId.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.MessageHeaderSize1">
            <summary>
            The fixed-size part of CreateIncidentRequest message body.
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.Serialize">
            <summary>
            Serialize the CreateIncidentResponse object to binary blob.
            The format of the binary blob for the first iteration is
            
            UINT32 blobSize
            UINT16 headerSize
            UINT8  version
            UINT8  type (PreCreateIncident or PostCreateIncident)
            UINT32 offsetResourceIdentifier
            UINT32 sizeResourceIdentifier
            UINT32 offsetAlertSourceIncident
            UINT32 sizeAlertSourceIncident
            UINT32 offsetDescription
            UINT32 sizeDescription
            UINT64 IcmIncidentId
            UINT8  ResponseType
            UINT32 offsetFailingWatchdogReportList
            UINT32 sizeFailingWatchdogReportList
            UINT32 offsetComputedWatchdogReport
            UINT32 sizeComputedWatchdogReport
            BYTE[16] Byte array for ConnectorId GUID.
            UINT32 offsetAlertId
            UINT32 sizeAlertId
            
            [serialized ResourceIdentifier]
            [serialized AlertSourceIncident]
            [Serialized Description string]
            [serialized FailingWatchdogReportList]
            [serialized ComputedWatchdogReport]
            [serialized AlertId string]
            
            </summary>
            <returns>The binary blob for the serialized CreateIncidentResponse object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.CreateIncidentResponse.Deserialize(System.Byte[])">
            <summary>
            Deserialize the binary blob to the CreateIncidentResponse object.
            </summary>
            <param name="blob">The input binary blob</param>
            <returns>The CreateIncidentResponse object</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData">
            <summary>
            Resource health data class.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.HeaderSize">
            <summary>
            Header size
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.SerializationVersion">
            <summary>
            Serialization version
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.WatchdogMetadataPropertyList">
            <summary>
            List of metadata properties needed by the consumers of watchdog summary data.
            Only these metadata properties will be stored in the metadata collection.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.watchdogMetadata">
            <summary>
            The watchdog metadata collection
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.WatchdogName">
            <summary>
            Gets or sets the watchdog name
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.WatchdogMetadata">
            <summary>
            Gets or sets watchdog metadata
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.ResourceType">
            <summary>
            Gets or sets resource type for watchdog
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.ShouldMitigateIncident">
            <summary>
            Gets or sets a value indicating whether to mitigate the incident submitted for this watchdog
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.HealthyDurationToMitigate">
            <summary>
            Gets or sets the healthy duration to mitigate the incident
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.HealthyCountToMitigate">
            <summary>
            Gets or sets the healthy count to mitigate the incident
            </summary>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.GetWatchdogMetadata">
            <summary>
            Gets the deserialized watchdog metadata
            </summary>
            <returns>the deserialized metadata object</returns>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.Status">
            <summary>
            Gets or sets resource health status.
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.TotalChildCount">
            <summary>
            Total number of child watchdogs with this name and resource type in topology
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.UnhealthyChildCount">
            <summary>
            Number of unheathy child watchdogs with this name and resource type in topology
            </summary>
        </member>
        <member name="P:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.WatchdogMetadataCollection">
            <summary>
            The MetadataCollection for the WatchdogMetadata
            </summary>
            <returns>The MetadataCollection for WatchdogMetadata</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.op_Equality(Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData,Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData)">
            <summary>
            Overload of == operator for this class
            </summary>
            <param name="left">object at the left side of the comparison</param>
            <param name="right">object at the right side of the comparison</param>
            <returns>true if they are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.op_Inequality(Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData,Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData)">
            <summary>
            Overload of != operator for this class
            </summary>
            <param name="left">object at the left side of the comparison</param>
            <param name="right">object at the right side of the comparison</param>
            <returns>true if they are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.Equals(System.Object)">
            <summary>
            Finds if the objects are equal or not
            </summary>
            <param name="other">other object to be compared with</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.Equals(Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData)">
            <summary>
            Finds if the two objects are equal or not.
            </summary>
            <param name="other">The object to be compared with.</param>
            <returns>True, if they have the same field values, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.UpdateFrom(Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData)">
            <summary>
            Update existing object from other object
            </summary>
            <param name="other">the object from which to update</param>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.Serialize">
            <summary>
            Serializes this object and returns the byte blob.
            </summary>
            <returns>the serialized bytes blob</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.Deserialize(System.Byte[])">
            <summary>
            Deserializes the object from the blob
            </summary>
            <param name="blob">bytes blob</param>
            <returns>the deserialized object</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.SerializePayload">
            <summary>
            Serializes the payload
            </summary>
            <returns>return serialized bytes</returns>
        </member>
        <member name="M:Microsoft.Online.RecoveryService.Contract.WatchdogSummaryData.DeserializePayload(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserializes the payload
            </summary>
            <param name="reader">the binary stream reader</param>
            <param name="serializationVersion">version of serialized data</param>
            <returns>deserialized payload</returns>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceHealthConstants">
            <summary>
            Constants used for resource health check related APIs in IRecoveryServiceExternalClient interface.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceHealthConstants.MaxArmResourcePerBatchRequest">
            <summary>
            The maximum number of ArmResource instances that could be passed in the RHC batch APIs.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ArmResource">
            <summary>
            The ARM information to identify the resource.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ArmResource.ArmId">
            <summary>
            The ArmId of the resource. The ArmId should be of the form
                /subscriptions/{guid}/resourceGroups/{resourcegroupName}/providers/{providerNamespace}/{resourceName}
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ArmResource.ArmType">
            <summary>
            The ARM resource type.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ArmResource.MonitoringAccount">
            <summary>
            The monitoring account for the ArmReosurceType; this is for authentication purpose.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.AvailabilityImpactingEvent">
            <summary>
            The downtime reason at a specific time.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.AvailabilityImpactingEvent.EventName">
            <summary>
            The downtime reason.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.AvailabilityImpactingEvent.EventTime">
            <summary>
            The report time.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.AvailabilityImpactingEvent.Priority">
            <summary>
            The priority of the downtime reason; the priority usually means the confidence on the downtime reason with 0 the highest priority
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.AvailabilityEvent">
            <summary>
            The resource availability at a time instance.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.AvailabilityEvent.Time">
            <summary>
            The timestamp when the resource health availability transition happens.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.AvailabilityEvent.ResourceStatus">
            <summary>
            The health status of the resource where the data will be attached to.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.AvailabilityEvent.PreviousResourceStatus">
            <summary>
            The previous health status of the resource where the data will be attached to.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.AvailabilityEvent.ImpactingEvents">
            <summary>
            The list of resource availability impacting events.
            </summary>
        </member>
        <member name="T:Microsoft.Online.RecoveryService.Contract.ResourceAvailabilityData">
            <summary>
            The availability impacting data for a given resource.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceAvailabilityData.ArmResourceId">
            <summary>
            The ArmResourceId
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceAvailabilityData.ResourceLocation">
            <summary>
            The location of the Arm resource.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceAvailabilityData.AvailabilityHistory">
            <summary>
            The list of history data in chronologically sorted order
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceAvailabilityData.ReportTime">
            <summary>
            The time when the health system last received the health report from source service.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceAvailabilityData.ProcessTime">
            <summary>
            The time when the health system process the data.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceAvailabilityData.CacheStartTime">
            <summary>
            An internal value indicating the start time of the samples in HS cache.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceAvailabilityData.ResourceStartState">
            <summary>
            The state of the resource at the start of the query time.
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.ResourceAvailabilityData.ArmResourceType">
            <summary>
            The armResourceType of the resource
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.HealthEvent.ArmResourceId">
            <summary>
            The ArmResourceId
            </summary>
        </member>
        <member name="F:Microsoft.Online.RecoveryService.Contract.HealthEvent.Annotations">
            <summary>
            List of annotations for the resource
            </summary>
        </member>
    </members>
</doc>
